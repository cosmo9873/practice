{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue-BoldItalic;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fswiss\fcharset0 Helvetica-Oblique;\f4\fswiss\fcharset0 Helvetica;\f5\fswiss\fcharset0 Helvetica-Bold;
\f6\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red21\green23\blue25;\red255\green255\blue255;\red52\green56\blue63;
\red78\green84\blue93;\red41\green67\blue135;\red22\green25\blue31;\red0\green0\blue82;\red252\green244\blue202;
\red0\green0\blue0;\red6\green50\blue15;\red152\green18\blue15;\red152\green46\blue3;\red76\green12\blue1;
\red98\green83\blue14;\red83\green83\blue83;}
{\*\expandedcolortbl;;\cssrgb\c10980\c11765\c12941;\cssrgb\c100000\c100000\c100000;\cssrgb\c26667\c28627\c31373;
\cssrgb\c37647\c40392\c43922;\cssrgb\c21176\c34510\c60000;\cssrgb\c11373\c12941\c16078;\cssrgb\c0\c3922\c39608;\cssrgb\c99216\c96078\c83137;
\cssrgb\c0\c0\c0;\cssrgb\c0\c25098\c7059;\cssrgb\c66667\c13333\c6667;\cssrgb\c66667\c25098\c0;\cssrgb\c37647\c7059\c0;
\cssrgb\c46275\c39608\c6275;\cssrgb\c40000\c40000\c40000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
123456789\
\pard\pardeftab720\sl520\qc\partightenfactor0

\f1\i\fs24 \cf3 \
\pard\pardeftab720\sl520\qc\partightenfactor0
\cf4 \
\pard\pardeftab720\sl520\qc\partightenfactor0

\f0\i0 \cf4 More Items\
\pard\pardeftab720\sl320\partightenfactor0

\f2\b0 \cf5 Owner:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/profile/?id=1036320040"}}{\fldrslt \cf6 Arianna Chessen}}\
\pard\pardeftab720\sl280\partightenfactor0

\f3\i \cf7 \
\pard\pardeftab720\sl320\partightenfactor0

\f2\i0 \cf5 Medium\
\pard\pardeftab720\sl280\partightenfactor0

\f3\i \cf7 \
\pard\pardeftab720\sl320\partightenfactor0

\f2\i0 \cf5 Ninja\
\pard\pardeftab720\sl280\partightenfactor0

\f3\i \cf7 \
\pard\pardeftab720\sl320\partightenfactor0

\f2\i0 \cf5 General\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 Description\
\pard\pardeftab720\sl280\partightenfactor0

\f4\b0\fs24 \cf7 Find all combinations that sum up to 100\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 Question Statement\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\fs33 \cf7 Question\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1226581710685629#question"}}{\fldrslt \cf6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 123456789 = 100 (also known as targetSum)\
Using standard integer arithmetic operators +, -, how many different solutions can you find by inserting the operators between some digits?\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f5\b \cf7 All combinations that sums up to 100:
\f4\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0\cf7 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
-1+2-3+4+5+6+78+9\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
1+2+3-4+5+6+78+9\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
1+2+34-5+67-8+9\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
1+23-4+5+6+78-9\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
1+23-4+56+7+8+9\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
12+3+4+5-6-7+89\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
12+3-4+5+67+8+9\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
12-3-4+5-6+7+89\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
123+4-5+67-89\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
123+45-67+8-9\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
123-4-5-6-7+8-9\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
123-45-67+89\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 Solution Type 1 -- Recursive with carry\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1226581710685629#solution-type-1-recursiv"}}{\fldrslt \cf6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 Pretty generic recursion problem with added complexity that you need to evaluate combination to make sure it sums up to 100. It's trivial in Python using eval and more complicated in C++/Java - you need to implement simple evaluation loop.\
\pard\pardeftab720\sl280\partightenfactor0

\f6\fs20 \cf8 \cb9 def\cf10  \cf11 step\cf12 (\cf8 s1\cf12 ,\cf10  \cf8 i\cf12 ):\cf10 \
  \cf13 if\cf10  \cf8 i\cf10  \cf12 ==\cf10  \cf14 10\cf12 :\cf10 \
      \cf13 if\cf10  \cf11 eval\cf12 (\cf8 s1\cf12 )\cf10  \cf12 ==\cf10  \cf14 100\cf12 :\cf10 \
          \cf11 print\cf12 (\cf8 s1\cf12 )\cf10 \
      \cf13 return\cf10 \
  \cf13 if\cf10  \cf8 i\cf10  \cf12 !=\cf10  \cf14 1\cf12 :\cf10 \
      \cf11 step\cf12 (\cf8 s1\cf10  \cf12 +\cf10  \cf15 '+'\cf10  \cf12 +\cf10  \cf11 str\cf12 (\cf8 i\cf12 ),\cf10  \cf8 i\cf10  \cf12 +\cf10  \cf14 1\cf12 )\cf10 \
  \cf11 step\cf12 (\cf8 s1\cf10  \cf12 +\cf10  \cf15 '-'\cf10  \cf12 +\cf10  \cf11 str\cf12 (\cf8 i\cf12 ),\cf10  \cf8 i\cf10  \cf12 +\cf10  \cf14 1\cf12 )\cf10 \
  \cf11 step\cf12 (\cf8 s1\cf10  \cf12 +\cf10  \cf11 str\cf12 (\cf8 i\cf12 ),\cf10  \cf8 i\cf10  \cf12 +\cf10  \cf14 1\cf12 )\cf10 \
\cf11 step\cf12 (\cf15 ''\cf12 ,\cf10  \cf14 1\cf12 )\cf10 \
\pard\pardeftab720\sl375\sa160\partightenfactor0

\f5\b\fs30 \cf7 \cb1 In Javascript without Eval\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1226581710685629#in-javascript-without-ev"}}{\fldrslt \cf6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 Solving this without using eval.\
\pard\pardeftab720\sl280\partightenfactor0

\f6\fs20 \cf13 \cb9 var\cf10  \cf8 optToX\cf10  \cf12 =\cf10  \cf13 function\cf12 (\cf8 str\cf12 ,\cf10  \cf8 target\cf12 )\cf10  \cf12 \{\cf10 \
  \cf13 var\cf10  \cf8 step\cf10  \cf12 =\cf10  \cf13 function\cf12 (\cf8 index\cf12 ,\cf10  \cf8 sum\cf12 ,\cf10  \cf8 carry\cf12 ,\cf10  \cf8 equation\cf12 )\cf10  \cf12 \{\cf10 \
    \cf13 if\cf10  \cf12 (\cf8 index\cf10  \cf12 ==\cf10  \cf8 str\cf12 .\cf8 length\cf12 )\cf10  \cf12 \{\cf10 \
      \cf13 if\cf10  \cf12 (\cf8 sum\cf10  \cf12 ==\cf10  \cf8 target\cf10  \cf12 &&\cf10  \cf8 carry\cf12 .\cf8 length\cf10  \cf12 ==\cf10  \cf14 0\cf12 )\cf10  \cf12 \{\cf10 \
        \cf8 console\cf12 .\cf11 log\cf12 (\cf8 equation\cf10  \cf12 +\cf10  \cf15 ' = '\cf10  \cf12 +\cf10  \cf8 sum\cf12 );\cf10 \
        \cf13 return\cf10  \cf14 1\cf12 ;\cf10 \
      \cf12 \}\cf10  \cf13 else\cf10  \cf12 \{\cf10 \
        \cf13 return\cf10  \cf14 0\cf12 ;\cf10 \
      \cf12 \}\cf10 \
    \cf12 \}\cf10  \
    \cf13 var\cf10  \cf8 curVal\cf10  \cf12 =\cf10  \cf11 parseInt\cf12 (\cf8 carry\cf10  \cf12 +\cf10  \cf8 str\cf12 [\cf8 index\cf12 ],\cf10  \cf14 10\cf12 );\cf10 \
    \cf13 var\cf10  \cf8 min\cf10  \cf12 =\cf10  \cf11 step\cf12 (\cf8 index\cf10  \cf12 +\cf10  \cf14 1\cf12 ,\cf10  \cf8 sum\cf10  \cf12 -\cf10  \cf8 curVal\cf12 ,\cf10  \cf15 ""\cf12 ,\cf10  \cf8 equation\cf10  \cf12 +\cf10  \cf15 ' - '\cf10  \cf12 +\cf10  \cf8 curVal\cf12 );\cf10 \
    \cf13 var\cf10  \cf8 pls\cf10  \cf12 =\cf10  \cf11 step\cf12 (\cf8 index\cf10  \cf12 +\cf10  \cf14 1\cf12 ,\cf10  \cf8 sum\cf10  \cf12 +\cf10  \cf8 curVal\cf12 ,\cf10  \cf15 ""\cf12 ,\cf10  \cf8 equation\cf10  \cf12 +\cf10  \cf15 ' + '\cf10  \cf12 +\cf10  \cf8 curVal\cf12 );\cf10 \
    \cf13 var\cf10  \cf8 car\cf10  \cf12 =\cf10  \cf11 step\cf12 (\cf8 index\cf10  \cf12 +\cf10  \cf14 1\cf12 ,\cf10  \cf8 sum\cf12 ,\cf10  \cf8 carry\cf10  \cf12 +\cf10  \cf8 str\cf12 [\cf8 index\cf12 ],\cf10  \cf8 equation\cf12 );\cf10 \
    \cf13 return\cf10  \cf8 min\cf10  \cf12 +\cf10  \cf8 pls\cf10  \cf12 +\cf10  \cf8 car\cf12 ;\cf10 \
  \cf12 \}\cf10 \
  \cf13 return\cf10  \cf11 step\cf12 (\cf14 0\cf12 ,\cf10  \cf14 0\cf12 ,\cf10  \cf15 ""\cf12 ,\cf10  \cf15 ""\cf12 );\cf10 \
\cf12 \}\cf10 \
\cf8 console\cf12 .\cf11 log\cf12 (\cf15 'Number of solutions:'\cf12 ,\cf10  \cf11 optToX\cf12 (\cf15 '123456789'\cf12 ,\cf10  \cf14 50\cf12 ));\cf10 \
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 \cb1 Solution Type 2 -- Array copying\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1226581710685629#solution-type-2-array-co"}}{\fldrslt \cf6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 Another solution candidates come up with is a version that simply mutates the array as the algorithm progresses, so the + and - code remain the same (and there is no "carry" variable). Seen below:\
\pard\pardeftab720\sl280\partightenfactor0

\f6\fs20 \cf13 \cb9 var\cf10  \cf8 optToX\cf10  \cf12 =\cf10  \cf13 function\cf12 (\cf8 globalNums\cf12 ,\cf10  \cf8 target\cf12 )\cf10  \cf12 \{\cf10 \
  \cf13 var\cf10  \cf8 step\cf10  \cf12 =\cf10  \cf13 function\cf12 (\cf8 nums\cf12 ,\cf10  \cf8 sum\cf12 ,\cf10  \cf8 equation\cf12 )\cf10  \cf12 \{\cf10 \
    \cf13 if\cf10  \cf12 (\cf8 nums\cf12 .\cf8 length\cf10  \cf12 ===\cf10  \cf14 0\cf12 )\cf10  \cf12 \{\cf10 \
      \cf13 if\cf10  \cf12 (\cf8 sum\cf10  \cf12 ==\cf10  \cf8 target\cf12 )\cf10  \cf12 \{\cf10 \
        \cf8 console\cf12 .\cf11 log\cf12 (\cf8 equation\cf10  \cf12 +\cf10  \cf15 ' = '\cf10  \cf12 +\cf10  \cf8 sum\cf12 );\cf10 \
        \cf13 return\cf10  \cf14 1\cf12 ;\cf10 \
      \cf12 \}\cf10  \cf13 else\cf10  \cf12 \{\cf10 \
        \cf13 return\cf10  \cf14 0\cf12 ;\cf10 \
      \cf12 \}\cf10 \
    \cf12 \}\cf10 \
 \
    \cf13 var\cf10  \cf8 curVal\cf10  \cf12 =\cf10  \cf8 nums\cf12 [\cf14 0\cf12 ];\cf10 \
    \
    \cf13 var\cf10  \cf8 min\cf10  \cf12 =\cf10  \cf11 step\cf12 (\cf8 nums\cf12 .\cf11 slice\cf12 (\cf14 1\cf12 ),\cf10  \cf8 sum\cf10  \cf12 -\cf10  \cf8 curVal\cf12 ,\cf10  \cf8 equation\cf10  \cf12 +\cf10  \cf15 ' - '\cf10  \cf12 +\cf10  \cf8 curVal\cf12 );\cf10 \
    \cf13 var\cf10  \cf8 pls\cf10  \cf12 =\cf10  \cf11 step\cf12 (\cf8 nums\cf12 .\cf11 slice\cf12 (\cf14 1\cf12 ),\cf10  \cf8 sum\cf10  \cf12 +\cf10  \cf8 curVal\cf12 ,\cf10  \cf8 equation\cf10  \cf12 +\cf10  \cf15 ' + '\cf10  \cf12 +\cf10  \cf8 curVal\cf12 );\cf10 \
 \
    \cf13 var\cf10  \cf8 concat\cf10  \cf12 =\cf10  \cf14 0\cf12 ;\cf10 \
    \cf16 // Now if we have more than one number in front of us, try doing this with\cf10 \
    \cf16 // the numbers concatenated\cf10 \
    \cf13 if\cf10  \cf12 (\cf8 nums\cf12 .\cf8 length\cf10  \cf12 >=\cf10  \cf14 2\cf12 )\cf10  \cf12 \{\cf10 \
      \cf13 var\cf10  \cf8 concatVal\cf10  \cf12 =\cf10  \cf8 curVal\cf10  \cf12 *\cf10  \cf14 10\cf10  \cf12 +\cf10  \cf8 nums\cf12 [\cf14 1\cf12 ];\cf10 \
      \cf8 concat\cf10  \cf12 =\cf10  \cf11 step\cf12 ([\cf8 concatVal\cf12 ].\cf11 concat\cf12 (\cf8 nums\cf12 .\cf11 slice\cf12 (\cf14 2\cf12 )),\cf10  \cf8 sum\cf12 ,\cf10  \cf8 equation\cf12 );\cf10 \
    \cf12 \}\cf10 \
\
    \cf13 return\cf10  \cf8 min\cf10  \cf12 +\cf10  \cf8 pls\cf10  \cf12 +\cf10  \cf8 concat\cf12 ;\cf10 \
  \cf12 \}\cf10 \
  \cf13 return\cf10  \cf11 step\cf12 (\cf8 globalNums\cf12 ,\cf10  \cf14 0\cf12 ,\cf10  \cf15 ""\cf12 );\cf10 \
\cf12 \}\cf10 \
\cf8 console\cf12 .\cf11 log\cf12 (\cf15 'Number of solutions:'\cf12 ,\cf10  \cf11 optToX\cf12 ([\cf14 1\cf12 ,\cf14 2\cf12 ,\cf14 3\cf12 ,\cf14 4\cf12 ,\cf14 5\cf12 ,\cf14 6\cf12 ,\cf14 7\cf12 ,\cf14 8\cf12 ,\cf14 9\cf12 ],\cf10  \cf14 50\cf12 ));\cf10 \
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 \cb1 Solution Type 2b -- Array copying\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1226581710685629#solution-type-2b-array-c"}}{\fldrslt \cf6 #}}\
\pard\pardeftab720\sl280\partightenfactor0

\f6\b0\fs20 \cf13 \cb9 var\cf10  \cf8 count\cf10  \cf12 =\cf10  \cf14 0\cf12 ;\cf10 \
\cf13 var\cf10  \cf8 nums\cf10  \cf12 =\cf10  \cf12 [\cf14 1\cf12 ,\cf14 2\cf12 ,\cf14 3\cf12 ,\cf14 4\cf12 ,\cf14 5\cf12 ,\cf14 6\cf12 ,\cf14 7\cf12 ,\cf14 8\cf12 ,\cf14 9\cf12 ];\cf10 \
\cf13 var\cf10  \cf8 target\cf10  \cf12 =\cf10  \cf14 100\cf12 ;\cf10 \
\cf13 function\cf10  \cf8 go\cf12 (\cf8 nums\cf12 ,\cf10  \cf8 target\cf12 ,\cf10  \cf8 buffer\cf12 )\cf10  \cf12 \{\cf10 \
  \cf13 if\cf10  \cf12 (\cf8 nums\cf12 .\cf8 length\cf10  \cf12 ===\cf10  \cf14 0\cf10  \cf12 &&\cf10  \cf8 target\cf10  \cf12 ===\cf10  \cf14 0\cf12 )\cf10  \cf12 \{\cf10 \
    \cf8 console\cf12 .\cf11 log\cf12 (\cf15 '#'\cf10  \cf12 +\cf10  \cf8 count\cf10  \cf12 +\cf10  \cf15 ': '\cf10  \cf12 +\cf10  \cf8 buffer\cf10  \cf12 +\cf10  \cf15 ' = '\cf10  \cf12 +\cf10  \cf11 eval\cf12 (\cf8 buffer\cf12 ));\cf10 \
    \cf8 count\cf12 ++;\cf10 \
    \cf13 return\cf12 ;\cf10 \
  \cf12 \}\cf10 \
  \cf13 var\cf10  \cf8 value\cf10  \cf12 =\cf10  \cf14 0\cf12 ;\cf10 \
  \cf13 for\cf10  \cf12 (\cf13 var\cf10  \cf8 i\cf10  \cf12 =\cf10  \cf14 0\cf12 ;\cf10  \cf8 i\cf10  \cf12 <\cf10  \cf8 nums\cf12 .\cf8 length\cf12 ;\cf10  \cf8 i\cf12 ++)\cf10  \cf12 \{\cf10 \
    \cf8 value\cf10  \cf12 =\cf10  \cf8 value\cf10  \cf12 *\cf10  \cf14 10\cf10  \cf12 +\cf10  \cf8 nums\cf12 [\cf8 i\cf12 ];\cf10 \
    \cf11 go\cf12 (\cf8 nums\cf12 .\cf11 slice\cf12 (\cf8 i\cf10  \cf12 +\cf10  \cf14 1\cf12 ),\cf10  \cf8 target\cf10  \cf12 +\cf10  \cf8 value\cf12 ,\cf10  \cf8 buffer\cf10  \cf12 +\cf10  \cf15 '-'\cf10  \cf12 +\cf10  \cf8 value\cf12 );\cf10 \
    \cf11 go\cf12 (\cf8 nums\cf12 .\cf11 slice\cf12 (\cf8 i\cf10  \cf12 +\cf10  \cf14 1\cf12 ),\cf10  \cf8 target\cf10  \cf12 -\cf10  \cf8 value\cf12 ,\cf10  \cf8 buffer\cf10  \cf12 +\cf10  \cf15 '+'\cf10  \cf12 +\cf10  \cf8 value\cf12 );\cf10 \
  \cf12 \}\cf10 \
\cf12 \}\cf10 \
\cf11 go\cf12 (\cf8 nums\cf12 ,\cf10  \cf8 target\cf12 ,\cf10  \cf15 ''\cf12 );\cf10 \
\cf8 console\cf12 .\cf11 log\cf12 (\cf15 'done: '\cf10  \cf12 +\cf10  \cf8 count\cf12 );\cf10 \
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 \cb1 Runtime\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1226581710685629#runtime"}}{\fldrslt \cf6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 The time complexity algorithm of this problem is interesting and whether it's easy to analyze can depend on the chosen solution. The key to the analysis is noticing that at every place we have 3 choices ("+, "-", no-operation). Since 3 is the branching factor, we are considering 3^n different strings at the end. Generating that takes\
\pard\pardeftab720\sl280\partightenfactor0

\f6\fs20 \cf14 \cb9 3\cf12 ^\cf14 1\cf10  \cf12 +\cf10  \cf14 3\cf12 ^\cf14 2\cf10  \cf12 +\cf10  \cf12 ...\cf10  \cf12 +\cf10  \cf14 3\cf12 ^(\cf8 n\cf12 -\cf14 1\cf12 )\cf10  \cf12 =\cf10  \cf11 O\cf12 (\cf14 3\cf12 ^\cf8 n\cf12 )\cf10 \
\cf8 You\cf10  \cf8 can\cf10  \cf8 see\cf10  \cf8 that\cf10  \cf8 by\cf10  \cf8 noticing\cf10  \cf8 that\cf10  \cf8 the\cf10  \cf8 geometric\cf10  \cf8 series\cf10  \cf8 sums\cf10  \cf8 up\cf10  \cf11 to\cf10  \cf12 (\cf14 3\cf12 ^\cf8 n\cf10  \cf12 -\cf10  \cf14 1\cf12 )/\cf14 2\cf10  \cf8 which\cf10  \cf13 is\cf10  \cf11 O\cf12 (\cf14 3\cf12 ^\cf8 n\cf12 ).\cf10 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\fs24 \cf7 \cb1 Once it's determined how many different candidates are considered, it's necessary to analyze how much work is done per candidate. Slicing/substring operations, integer parsing, eval-like passes at the end can easily add additional O(n) factors to the solution and it's easy to end up with O(n^k 3^n) solution. It's usually a nice segue for talking about micro-optimizing the code and delving deeper into candidate's knowledge of the chosen language. How long does a string copy take, could you use COW, can you get rid of passing substring/slice operations, parse numbers yourself etc.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 Solution Type 3 --Dynamic Programing\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1226581710685629#solution-type-3-dynamic"}}{\fldrslt \cf6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 consider a function dp(i,s) define dp(i,s) = the # of all possibilities you can make given List[0~i], by inserting operators, that sum up to number s.\
\pard\pardeftab720\sl280\partightenfactor0

\f6\fs20 \cf11 \cb9 dp\cf12 (\cf8 i\cf12 ,\cf8 s\cf12 )\cf10  \cf12 =\cf10  \cf11 dp\cf12 (\cf8 i\cf12 -\cf14 1\cf12 ,\cf10  \cf8 S\cf12 -\cf13 List\cf12 [\cf8 i\cf12 ])\cf10  \cf12 +\cf10  \cf11 dp\cf12 (\cf8 i\cf12 -\cf14 1\cf12 ,\cf8 S\cf12 +\cf13 List\cf12 [\cf8 i\cf12 ])\cf10 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\fs24 \cf7 \cb1 The goal is to calculate dp(9, 100).\
By caching up a iXs metric, it's possible reach solution in O(nk)\
Comment({\field{\*\fldinst{HYPERLINK "https://our.intern.facebook.com/intern/profile/yiqiw"}}{\fldrslt \cf6 yiqiw}}): I think this solution is not correct. dp(i,s) = dp(i-1, S-List[i]) + dp(i-1,S+List[i]) + dp(i-2, S-"2digitNo") + dp(i-2, S+"2digitNo") + dp(i-3, S-"3digitNo") + dp(i-3, S+"3digitNo") + ..... + dp(0, S+"ndigitNo") + dp(0, S-"ndigitNo")\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 Extensions\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1226581710685629#extensions"}}{\fldrslt \cf6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 One of the interesting followups or extensions to this question deals with the variant of "How do we find just\'a0
\f5\b any
\f4\b0 \'a0solution as fast as possible?" This naturally leads to discussion around\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls2\ilvl0\cf7 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Search pruning -- how can you prune the search with cheap look-aheads to prevent descending the whole depth of the tree? This is usually just a comparison between your current sum and the absolute value of all remaining digits\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Divide and Conquer -- How can you potentially find a solution with fewer than 3^(n-1) explorations? While worst-case will remain the same, some candidates propose doing a divide-and-conquer approach, where the tree is split in half and each possible value of each half is computed. If two values add up to targetSum, you can find a solution with only ~3^(n/2). Worst case remains the same of course.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
There may be some trivial lower/upper bound on the number that can be actually made with digits 1..9. For example, it seems that for digits 1,2,3,4, you can't make a number between 235 and 1234 (which is 1+234, and 1234 respectively), so being asked to make numbers in the range [236..1233] should immediately return "no", etc...\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 Solution Spread\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1226581710685629#solution-spread"}}{\fldrslt \cf6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 Obviously as you can imagine, there are large holes in the input range where no solution exists:\
\pard\pardeftab720\sl280\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://our.intern.facebook.com/intern/px/p/9tMF"}}{\fldrslt \cf6 https://our.intern.facebook.com/intern/px/p/9tMF}}\
But zooming in closer, the values get a bit more interesting:\
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://our.intern.facebook.com/intern/px/p/9tMG"}}{\fldrslt \cf6 https://our.intern.facebook.com/intern/px/p/9tMG}}\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 123456789\
\pard\pardeftab720\sl520\qc\partightenfactor0

\f1\i\fs24 \cf3 \
\pard\pardeftab720\sl520\qc\partightenfactor0
\cf4 \
\pard\pardeftab720\sl520\qc\partightenfactor0

\f0\i0 \cf4 More Items\
\pard\pardeftab720\sl320\partightenfactor0

\f2\b0 \cf5 Owner:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/profile/?id=1036320040"}}{\fldrslt \cf6 Arianna Chessen}}\
\pard\pardeftab720\sl280\partightenfactor0

\f3\i \cf7 \
\pard\pardeftab720\sl320\partightenfactor0

\f2\i0 \cf5 Medium\
\pard\pardeftab720\sl280\partightenfactor0

\f3\i \cf7 \
\pard\pardeftab720\sl320\partightenfactor0

\f2\i0 \cf5 Ninja\
\pard\pardeftab720\sl280\partightenfactor0

\f3\i \cf7 \
\pard\pardeftab720\sl320\partightenfactor0

\f2\i0 \cf5 General\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 Description\
\pard\pardeftab720\sl280\partightenfactor0

\f4\b0\fs24 \cf7 Find all combinations that sum up to 100\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 Question Statement\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\fs33 \cf7 Question\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1226581710685629#question"}}{\fldrslt \cf6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 123456789 = 100 (also known as targetSum)\
Using standard integer arithmetic operators +, -, how many different solutions can you find by inserting the operators between some digits?\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f5\b \cf7 All combinations that sums up to 100:
\f4\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls3\ilvl0\cf7 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
-1+2-3+4+5+6+78+9\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
1+2+3-4+5+6+78+9\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
1+2+34-5+67-8+9\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
1+23-4+5+6+78-9\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
1+23-4+56+7+8+9\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
12+3+4+5-6-7+89\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
12+3-4+5+67+8+9\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
12-3-4+5-6+7+89\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
123+4-5+67-89\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
123+45-67+8-9\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
123-4-5-6-7+8-9\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
123-45-67+89\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 Solution Type 1 -- Recursive with carry\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1226581710685629#solution-type-1-recursiv"}}{\fldrslt \cf6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 Pretty generic recursion problem with added complexity that you need to evaluate combination to make sure it sums up to 100. It's trivial in Python using eval and more complicated in C++/Java - you need to implement simple evaluation loop.\
\pard\pardeftab720\sl280\partightenfactor0

\f6\fs20 \cf8 \cb9 def\cf10  \cf11 step\cf12 (\cf8 s1\cf12 ,\cf10  \cf8 i\cf12 ):\cf10 \
  \cf13 if\cf10  \cf8 i\cf10  \cf12 ==\cf10  \cf14 10\cf12 :\cf10 \
      \cf13 if\cf10  \cf11 eval\cf12 (\cf8 s1\cf12 )\cf10  \cf12 ==\cf10  \cf14 100\cf12 :\cf10 \
          \cf11 print\cf12 (\cf8 s1\cf12 )\cf10 \
      \cf13 return\cf10 \
  \cf13 if\cf10  \cf8 i\cf10  \cf12 !=\cf10  \cf14 1\cf12 :\cf10 \
      \cf11 step\cf12 (\cf8 s1\cf10  \cf12 +\cf10  \cf15 '+'\cf10  \cf12 +\cf10  \cf11 str\cf12 (\cf8 i\cf12 ),\cf10  \cf8 i\cf10  \cf12 +\cf10  \cf14 1\cf12 )\cf10 \
  \cf11 step\cf12 (\cf8 s1\cf10  \cf12 +\cf10  \cf15 '-'\cf10  \cf12 +\cf10  \cf11 str\cf12 (\cf8 i\cf12 ),\cf10  \cf8 i\cf10  \cf12 +\cf10  \cf14 1\cf12 )\cf10 \
  \cf11 step\cf12 (\cf8 s1\cf10  \cf12 +\cf10  \cf11 str\cf12 (\cf8 i\cf12 ),\cf10  \cf8 i\cf10  \cf12 +\cf10  \cf14 1\cf12 )\cf10 \
\cf11 step\cf12 (\cf15 ''\cf12 ,\cf10  \cf14 1\cf12 )\cf10 \
\pard\pardeftab720\sl375\sa160\partightenfactor0

\f5\b\fs30 \cf7 \cb1 In Javascript without Eval\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1226581710685629#in-javascript-without-ev"}}{\fldrslt \cf6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 Solving this without using eval.\
\pard\pardeftab720\sl280\partightenfactor0

\f6\fs20 \cf13 \cb9 var\cf10  \cf8 optToX\cf10  \cf12 =\cf10  \cf13 function\cf12 (\cf8 str\cf12 ,\cf10  \cf8 target\cf12 )\cf10  \cf12 \{\cf10 \
  \cf13 var\cf10  \cf8 step\cf10  \cf12 =\cf10  \cf13 function\cf12 (\cf8 index\cf12 ,\cf10  \cf8 sum\cf12 ,\cf10  \cf8 carry\cf12 ,\cf10  \cf8 equation\cf12 )\cf10  \cf12 \{\cf10 \
    \cf13 if\cf10  \cf12 (\cf8 index\cf10  \cf12 ==\cf10  \cf8 str\cf12 .\cf8 length\cf12 )\cf10  \cf12 \{\cf10 \
      \cf13 if\cf10  \cf12 (\cf8 sum\cf10  \cf12 ==\cf10  \cf8 target\cf10  \cf12 &&\cf10  \cf8 carry\cf12 .\cf8 length\cf10  \cf12 ==\cf10  \cf14 0\cf12 )\cf10  \cf12 \{\cf10 \
        \cf8 console\cf12 .\cf11 log\cf12 (\cf8 equation\cf10  \cf12 +\cf10  \cf15 ' = '\cf10  \cf12 +\cf10  \cf8 sum\cf12 );\cf10 \
        \cf13 return\cf10  \cf14 1\cf12 ;\cf10 \
      \cf12 \}\cf10  \cf13 else\cf10  \cf12 \{\cf10 \
        \cf13 return\cf10  \cf14 0\cf12 ;\cf10 \
      \cf12 \}\cf10 \
    \cf12 \}\cf10  \
    \cf13 var\cf10  \cf8 curVal\cf10  \cf12 =\cf10  \cf11 parseInt\cf12 (\cf8 carry\cf10  \cf12 +\cf10  \cf8 str\cf12 [\cf8 index\cf12 ],\cf10  \cf14 10\cf12 );\cf10 \
    \cf13 var\cf10  \cf8 min\cf10  \cf12 =\cf10  \cf11 step\cf12 (\cf8 index\cf10  \cf12 +\cf10  \cf14 1\cf12 ,\cf10  \cf8 sum\cf10  \cf12 -\cf10  \cf8 curVal\cf12 ,\cf10  \cf15 ""\cf12 ,\cf10  \cf8 equation\cf10  \cf12 +\cf10  \cf15 ' - '\cf10  \cf12 +\cf10  \cf8 curVal\cf12 );\cf10 \
    \cf13 var\cf10  \cf8 pls\cf10  \cf12 =\cf10  \cf11 step\cf12 (\cf8 index\cf10  \cf12 +\cf10  \cf14 1\cf12 ,\cf10  \cf8 sum\cf10  \cf12 +\cf10  \cf8 curVal\cf12 ,\cf10  \cf15 ""\cf12 ,\cf10  \cf8 equation\cf10  \cf12 +\cf10  \cf15 ' + '\cf10  \cf12 +\cf10  \cf8 curVal\cf12 );\cf10 \
    \cf13 var\cf10  \cf8 car\cf10  \cf12 =\cf10  \cf11 step\cf12 (\cf8 index\cf10  \cf12 +\cf10  \cf14 1\cf12 ,\cf10  \cf8 sum\cf12 ,\cf10  \cf8 carry\cf10  \cf12 +\cf10  \cf8 str\cf12 [\cf8 index\cf12 ],\cf10  \cf8 equation\cf12 );\cf10 \
    \cf13 return\cf10  \cf8 min\cf10  \cf12 +\cf10  \cf8 pls\cf10  \cf12 +\cf10  \cf8 car\cf12 ;\cf10 \
  \cf12 \}\cf10 \
  \cf13 return\cf10  \cf11 step\cf12 (\cf14 0\cf12 ,\cf10  \cf14 0\cf12 ,\cf10  \cf15 ""\cf12 ,\cf10  \cf15 ""\cf12 );\cf10 \
\cf12 \}\cf10 \
\cf8 console\cf12 .\cf11 log\cf12 (\cf15 'Number of solutions:'\cf12 ,\cf10  \cf11 optToX\cf12 (\cf15 '123456789'\cf12 ,\cf10  \cf14 50\cf12 ));\cf10 \
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 \cb1 Solution Type 2 -- Array copying\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1226581710685629#solution-type-2-array-co"}}{\fldrslt \cf6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 Another solution candidates come up with is a version that simply mutates the array as the algorithm progresses, so the + and - code remain the same (and there is no "carry" variable). Seen below:\
\pard\pardeftab720\sl280\partightenfactor0

\f6\fs20 \cf13 \cb9 var\cf10  \cf8 optToX\cf10  \cf12 =\cf10  \cf13 function\cf12 (\cf8 globalNums\cf12 ,\cf10  \cf8 target\cf12 )\cf10  \cf12 \{\cf10 \
  \cf13 var\cf10  \cf8 step\cf10  \cf12 =\cf10  \cf13 function\cf12 (\cf8 nums\cf12 ,\cf10  \cf8 sum\cf12 ,\cf10  \cf8 equation\cf12 )\cf10  \cf12 \{\cf10 \
    \cf13 if\cf10  \cf12 (\cf8 nums\cf12 .\cf8 length\cf10  \cf12 ===\cf10  \cf14 0\cf12 )\cf10  \cf12 \{\cf10 \
      \cf13 if\cf10  \cf12 (\cf8 sum\cf10  \cf12 ==\cf10  \cf8 target\cf12 )\cf10  \cf12 \{\cf10 \
        \cf8 console\cf12 .\cf11 log\cf12 (\cf8 equation\cf10  \cf12 +\cf10  \cf15 ' = '\cf10  \cf12 +\cf10  \cf8 sum\cf12 );\cf10 \
        \cf13 return\cf10  \cf14 1\cf12 ;\cf10 \
      \cf12 \}\cf10  \cf13 else\cf10  \cf12 \{\cf10 \
        \cf13 return\cf10  \cf14 0\cf12 ;\cf10 \
      \cf12 \}\cf10 \
    \cf12 \}\cf10 \
 \
    \cf13 var\cf10  \cf8 curVal\cf10  \cf12 =\cf10  \cf8 nums\cf12 [\cf14 0\cf12 ];\cf10 \
    \
    \cf13 var\cf10  \cf8 min\cf10  \cf12 =\cf10  \cf11 step\cf12 (\cf8 nums\cf12 .\cf11 slice\cf12 (\cf14 1\cf12 ),\cf10  \cf8 sum\cf10  \cf12 -\cf10  \cf8 curVal\cf12 ,\cf10  \cf8 equation\cf10  \cf12 +\cf10  \cf15 ' - '\cf10  \cf12 +\cf10  \cf8 curVal\cf12 );\cf10 \
    \cf13 var\cf10  \cf8 pls\cf10  \cf12 =\cf10  \cf11 step\cf12 (\cf8 nums\cf12 .\cf11 slice\cf12 (\cf14 1\cf12 ),\cf10  \cf8 sum\cf10  \cf12 +\cf10  \cf8 curVal\cf12 ,\cf10  \cf8 equation\cf10  \cf12 +\cf10  \cf15 ' + '\cf10  \cf12 +\cf10  \cf8 curVal\cf12 );\cf10 \
 \
    \cf13 var\cf10  \cf8 concat\cf10  \cf12 =\cf10  \cf14 0\cf12 ;\cf10 \
    \cf16 // Now if we have more than one number in front of us, try doing this with\cf10 \
    \cf16 // the numbers concatenated\cf10 \
    \cf13 if\cf10  \cf12 (\cf8 nums\cf12 .\cf8 length\cf10  \cf12 >=\cf10  \cf14 2\cf12 )\cf10  \cf12 \{\cf10 \
      \cf13 var\cf10  \cf8 concatVal\cf10  \cf12 =\cf10  \cf8 curVal\cf10  \cf12 *\cf10  \cf14 10\cf10  \cf12 +\cf10  \cf8 nums\cf12 [\cf14 1\cf12 ];\cf10 \
      \cf8 concat\cf10  \cf12 =\cf10  \cf11 step\cf12 ([\cf8 concatVal\cf12 ].\cf11 concat\cf12 (\cf8 nums\cf12 .\cf11 slice\cf12 (\cf14 2\cf12 )),\cf10  \cf8 sum\cf12 ,\cf10  \cf8 equation\cf12 );\cf10 \
    \cf12 \}\cf10 \
\
    \cf13 return\cf10  \cf8 min\cf10  \cf12 +\cf10  \cf8 pls\cf10  \cf12 +\cf10  \cf8 concat\cf12 ;\cf10 \
  \cf12 \}\cf10 \
  \cf13 return\cf10  \cf11 step\cf12 (\cf8 globalNums\cf12 ,\cf10  \cf14 0\cf12 ,\cf10  \cf15 ""\cf12 );\cf10 \
\cf12 \}\cf10 \
\cf8 console\cf12 .\cf11 log\cf12 (\cf15 'Number of solutions:'\cf12 ,\cf10  \cf11 optToX\cf12 ([\cf14 1\cf12 ,\cf14 2\cf12 ,\cf14 3\cf12 ,\cf14 4\cf12 ,\cf14 5\cf12 ,\cf14 6\cf12 ,\cf14 7\cf12 ,\cf14 8\cf12 ,\cf14 9\cf12 ],\cf10  \cf14 50\cf12 ));\cf10 \
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 \cb1 Solution Type 2b -- Array copying\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1226581710685629#solution-type-2b-array-c"}}{\fldrslt \cf6 #}}\
\pard\pardeftab720\sl280\partightenfactor0

\f6\b0\fs20 \cf13 \cb9 var\cf10  \cf8 count\cf10  \cf12 =\cf10  \cf14 0\cf12 ;\cf10 \
\cf13 var\cf10  \cf8 nums\cf10  \cf12 =\cf10  \cf12 [\cf14 1\cf12 ,\cf14 2\cf12 ,\cf14 3\cf12 ,\cf14 4\cf12 ,\cf14 5\cf12 ,\cf14 6\cf12 ,\cf14 7\cf12 ,\cf14 8\cf12 ,\cf14 9\cf12 ];\cf10 \
\cf13 var\cf10  \cf8 target\cf10  \cf12 =\cf10  \cf14 100\cf12 ;\cf10 \
\cf13 function\cf10  \cf8 go\cf12 (\cf8 nums\cf12 ,\cf10  \cf8 target\cf12 ,\cf10  \cf8 buffer\cf12 )\cf10  \cf12 \{\cf10 \
  \cf13 if\cf10  \cf12 (\cf8 nums\cf12 .\cf8 length\cf10  \cf12 ===\cf10  \cf14 0\cf10  \cf12 &&\cf10  \cf8 target\cf10  \cf12 ===\cf10  \cf14 0\cf12 )\cf10  \cf12 \{\cf10 \
    \cf8 console\cf12 .\cf11 log\cf12 (\cf15 '#'\cf10  \cf12 +\cf10  \cf8 count\cf10  \cf12 +\cf10  \cf15 ': '\cf10  \cf12 +\cf10  \cf8 buffer\cf10  \cf12 +\cf10  \cf15 ' = '\cf10  \cf12 +\cf10  \cf11 eval\cf12 (\cf8 buffer\cf12 ));\cf10 \
    \cf8 count\cf12 ++;\cf10 \
    \cf13 return\cf12 ;\cf10 \
  \cf12 \}\cf10 \
  \cf13 var\cf10  \cf8 value\cf10  \cf12 =\cf10  \cf14 0\cf12 ;\cf10 \
  \cf13 for\cf10  \cf12 (\cf13 var\cf10  \cf8 i\cf10  \cf12 =\cf10  \cf14 0\cf12 ;\cf10  \cf8 i\cf10  \cf12 <\cf10  \cf8 nums\cf12 .\cf8 length\cf12 ;\cf10  \cf8 i\cf12 ++)\cf10  \cf12 \{\cf10 \
    \cf8 value\cf10  \cf12 =\cf10  \cf8 value\cf10  \cf12 *\cf10  \cf14 10\cf10  \cf12 +\cf10  \cf8 nums\cf12 [\cf8 i\cf12 ];\cf10 \
    \cf11 go\cf12 (\cf8 nums\cf12 .\cf11 slice\cf12 (\cf8 i\cf10  \cf12 +\cf10  \cf14 1\cf12 ),\cf10  \cf8 target\cf10  \cf12 +\cf10  \cf8 value\cf12 ,\cf10  \cf8 buffer\cf10  \cf12 +\cf10  \cf15 '-'\cf10  \cf12 +\cf10  \cf8 value\cf12 );\cf10 \
    \cf11 go\cf12 (\cf8 nums\cf12 .\cf11 slice\cf12 (\cf8 i\cf10  \cf12 +\cf10  \cf14 1\cf12 ),\cf10  \cf8 target\cf10  \cf12 -\cf10  \cf8 value\cf12 ,\cf10  \cf8 buffer\cf10  \cf12 +\cf10  \cf15 '+'\cf10  \cf12 +\cf10  \cf8 value\cf12 );\cf10 \
  \cf12 \}\cf10 \
\cf12 \}\cf10 \
\cf11 go\cf12 (\cf8 nums\cf12 ,\cf10  \cf8 target\cf12 ,\cf10  \cf15 ''\cf12 );\cf10 \
\cf8 console\cf12 .\cf11 log\cf12 (\cf15 'done: '\cf10  \cf12 +\cf10  \cf8 count\cf12 );\cf10 \
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 \cb1 Runtime\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1226581710685629#runtime"}}{\fldrslt \cf6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 The time complexity algorithm of this problem is interesting and whether it's easy to analyze can depend on the chosen solution. The key to the analysis is noticing that at every place we have 3 choices ("+, "-", no-operation). Since 3 is the branching factor, we are considering 3^n different strings at the end. Generating that takes\
\pard\pardeftab720\sl280\partightenfactor0

\f6\fs20 \cf14 \cb9 3\cf12 ^\cf14 1\cf10  \cf12 +\cf10  \cf14 3\cf12 ^\cf14 2\cf10  \cf12 +\cf10  \cf12 ...\cf10  \cf12 +\cf10  \cf14 3\cf12 ^(\cf8 n\cf12 -\cf14 1\cf12 )\cf10  \cf12 =\cf10  \cf11 O\cf12 (\cf14 3\cf12 ^\cf8 n\cf12 )\cf10 \
\cf8 You\cf10  \cf8 can\cf10  \cf8 see\cf10  \cf8 that\cf10  \cf8 by\cf10  \cf8 noticing\cf10  \cf8 that\cf10  \cf8 the\cf10  \cf8 geometric\cf10  \cf8 series\cf10  \cf8 sums\cf10  \cf8 up\cf10  \cf11 to\cf10  \cf12 (\cf14 3\cf12 ^\cf8 n\cf10  \cf12 -\cf10  \cf14 1\cf12 )/\cf14 2\cf10  \cf8 which\cf10  \cf13 is\cf10  \cf11 O\cf12 (\cf14 3\cf12 ^\cf8 n\cf12 ).\cf10 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\fs24 \cf7 \cb1 Once it's determined how many different candidates are considered, it's necessary to analyze how much work is done per candidate. Slicing/substring operations, integer parsing, eval-like passes at the end can easily add additional O(n) factors to the solution and it's easy to end up with O(n^k 3^n) solution. It's usually a nice segue for talking about micro-optimizing the code and delving deeper into candidate's knowledge of the chosen language. How long does a string copy take, could you use COW, can you get rid of passing substring/slice operations, parse numbers yourself etc.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 Solution Type 3 --Dynamic Programing\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1226581710685629#solution-type-3-dynamic"}}{\fldrslt \cf6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 consider a function dp(i,s) define dp(i,s) = the # of all possibilities you can make given List[0~i], by inserting operators, that sum up to number s.\
\pard\pardeftab720\sl280\partightenfactor0

\f6\fs20 \cf11 \cb9 dp\cf12 (\cf8 i\cf12 ,\cf8 s\cf12 )\cf10  \cf12 =\cf10  \cf11 dp\cf12 (\cf8 i\cf12 -\cf14 1\cf12 ,\cf10  \cf8 S\cf12 -\cf13 List\cf12 [\cf8 i\cf12 ])\cf10  \cf12 +\cf10  \cf11 dp\cf12 (\cf8 i\cf12 -\cf14 1\cf12 ,\cf8 S\cf12 +\cf13 List\cf12 [\cf8 i\cf12 ])\cf10 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\fs24 \cf7 \cb1 The goal is to calculate dp(9, 100).\
By caching up a iXs metric, it's possible reach solution in O(nk)\
Comment({\field{\*\fldinst{HYPERLINK "https://our.intern.facebook.com/intern/profile/yiqiw"}}{\fldrslt \cf6 yiqiw}}): I think this solution is not correct. dp(i,s) = dp(i-1, S-List[i]) + dp(i-1,S+List[i]) + dp(i-2, S-"2digitNo") + dp(i-2, S+"2digitNo") + dp(i-3, S-"3digitNo") + dp(i-3, S+"3digitNo") + ..... + dp(0, S+"ndigitNo") + dp(0, S-"ndigitNo")\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 Extensions\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1226581710685629#extensions"}}{\fldrslt \cf6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 One of the interesting followups or extensions to this question deals with the variant of "How do we find just\'a0
\f5\b any
\f4\b0 \'a0solution as fast as possible?" This naturally leads to discussion around\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls4\ilvl0\cf7 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Search pruning -- how can you prune the search with cheap look-aheads to prevent descending the whole depth of the tree? This is usually just a comparison between your current sum and the absolute value of all remaining digits\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Divide and Conquer -- How can you potentially find a solution with fewer than 3^(n-1) explorations? While worst-case will remain the same, some candidates propose doing a divide-and-conquer approach, where the tree is split in half and each possible value of each half is computed. If two values add up to targetSum, you can find a solution with only ~3^(n/2). Worst case remains the same of course.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
There may be some trivial lower/upper bound on the number that can be actually made with digits 1..9. For example, it seems that for digits 1,2,3,4, you can't make a number between 235 and 1234 (which is 1+234, and 1234 respectively), so being asked to make numbers in the range [236..1233] should immediately return "no", etc...\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 Solution Spread\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1226581710685629#solution-spread"}}{\fldrslt \cf6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 Obviously as you can imagine, there are large holes in the input range where no solution exists:\
\pard\pardeftab720\sl280\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://our.intern.facebook.com/intern/px/p/9tMF"}}{\fldrslt \cf6 https://our.intern.facebook.com/intern/px/p/9tMF}}\
But zooming in closer, the values get a bit more interesting:\
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://our.intern.facebook.com/intern/px/p/9tMG"}}{\fldrslt \cf6 https://our.intern.facebook.com/intern/px/p/9tMG}}\
}