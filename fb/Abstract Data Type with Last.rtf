{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\fswiss\fcharset0 Helvetica;\f4\fswiss\fcharset0 Helvetica-Bold;\f5\fnil\fcharset0 Monaco;
}
{\colortbl;\red255\green255\blue255;\red21\green23\blue25;\red255\green255\blue255;\red52\green56\blue63;
\red78\green84\blue93;\red41\green67\blue135;\red22\green25\blue31;\red152\green46\blue3;\red252\green244\blue202;
\red0\green0\blue0;\red0\green0\blue82;\red152\green18\blue15;\red6\green50\blue15;\red98\green83\blue14;
\red76\green12\blue1;\red12\green95\blue32;}
{\*\expandedcolortbl;;\cssrgb\c10980\c11765\c12941;\cssrgb\c100000\c100000\c100000;\cssrgb\c26667\c28627\c31373;
\cssrgb\c37647\c40392\c43922;\cssrgb\c21176\c34510\c60000;\cssrgb\c11373\c12941\c16078;\cssrgb\c66667\c25098\c0;\cssrgb\c99216\c96078\c83137;
\cssrgb\c0\c0\c0;\cssrgb\c0\c3922\c39608;\cssrgb\c66667\c13333\c6667;\cssrgb\c0\c25098\c7059;\cssrgb\c46275\c39608\c6275;
\cssrgb\c37647\c7059\c0;\cssrgb\c0\c43922\c16471;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Abstract Data Type with Last\
\pard\pardeftab720\sl520\qc\partightenfactor0

\f1\i\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl520\qc\partightenfactor0
\cf4 \strokec4 \
\pard\pardeftab720\sl520\qc\partightenfactor0

\f0\i0 \cf4 More Items\
\pard\pardeftab720\sl320\partightenfactor0

\f1\b0 \cf5 \strokec5 Owner:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/profile/?id=788915578"}}{\fldrslt \cf6 \strokec6 Felix Handte}}\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Medium\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Ninja\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 General\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \strokec2 Description\
\pard\pardeftab720\sl280\partightenfactor0

\f3\b0\fs24 \cf7 \strokec7 Simple data structure question, similar to an LRU cache.\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \strokec2 Question Statement\
\pard\pardeftab720\sl375\sa160\partightenfactor0

\f4\fs30 \cf7 \strokec7 Question Statement\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1754892401460054#question-statement"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 Write an implementation of the following interface:\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf8 \cb9 \strokec8 interface\cf10 \strokec10  \cf11 \strokec11 AbstractDataTypeWithLast\cf10 \strokec10  \cf12 \strokec12 <\cf11 \strokec11 K\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 V\cf12 \strokec12 >\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
  \cf11 \strokec11 void\cf10 \strokec10  \cf13 \strokec13 put\cf12 \strokec12 (\cf11 \strokec11 K\cf10 \strokec10  \cf11 \strokec11 k\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 V\cf10 \strokec10  \cf11 \strokec11 v\cf12 \strokec12 );\cf10 \strokec10 \
  \cf11 \strokec11 V\cf10 \strokec10     \cf13 \strokec13 get\cf12 \strokec12 (\cf11 \strokec11 K\cf10 \strokec10  \cf11 \strokec11 k\cf12 \strokec12 );\cf10 \strokec10 \
  \cf11 \strokec11 void\cf10 \strokec10  \cf13 \strokec13 delete\cf12 \strokec12 (\cf11 \strokec11 K\cf10 \strokec10  \cf11 \strokec11 k\cf12 \strokec12 );\cf10 \strokec10 \
  \cf11 \strokec11 K\cf10 \strokec10     \cf13 \strokec13 last\cf12 \strokec12 ();\cf10 \strokec10 \
\pard\pardeftab720\sl280\partightenfactor0
\cf12 \strokec12 \}\cf10 \strokec10 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf7 \cb1 \strokec7 Where last returns the last-accessed, non-deleted key. I.e.,\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf13 \cb9 \strokec13 put\cf12 \strokec12 (\cf14 \strokec14 "a"\cf12 \strokec12 ,\cf10 \strokec10  \cf15 \strokec15 1\cf12 \strokec12 )\cf10 \strokec10 \
\cf13 \strokec13 put\cf12 \strokec12 (\cf14 \strokec14 "b"\cf12 \strokec12 ,\cf10 \strokec10  \cf15 \strokec15 2\cf12 \strokec12 )\cf10 \strokec10 \
\cf13 \strokec13 get\cf12 \strokec12 (\cf14 \strokec14 "a"\cf12 \strokec12 )\cf10 \strokec10     \cf12 \strokec12 =>\cf10 \strokec10  \cf15 \strokec15 1\cf10 \strokec10 \
\cf13 \strokec13 last\cf12 \strokec12 ()\cf10 \strokec10       \cf12 \strokec12 =>\cf10 \strokec10  \cf14 \strokec14 "a"\cf10 \strokec10 \
\cf13 \strokec13 delete\cf12 \strokec12 (\cf14 \strokec14 "a"\cf12 \strokec12 )\cf10 \strokec10 \
\cf13 \strokec13 last\cf12 \strokec12 ()\cf10 \strokec10       \cf12 \strokec12 =>\cf10 \strokec10  \cf14 \strokec14 "b"\cf10 \strokec10 \
\pard\pardeftab720\sl375\sa160\partightenfactor0

\f4\b\fs30 \cf7 \cb1 \strokec7 Solution\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1754892401460054#solution"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 This problem is basically analogous to an LRU cache. Candidates that recognize that and know how an LRU cache is implemented will pretty easily solve this question. But knowing how an LRU cache is implemented can be its own signal too.\
There are a number of easier solutions that are O(n) on some or all of the methods. The best solution is O(1) for all four methods.\
Here's an example solution:\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf8 \cb9 \strokec8 class\cf10 \strokec10  \cf13 \strokec13 Node\cf12 \strokec12 (\cf11 \strokec11 object\cf12 \strokec12 ):\cf10 \strokec10 \
  \cf11 \strokec11 def\cf10 \strokec10  \cf13 \strokec13 __init__\cf12 \strokec12 (\cf8 \strokec8 self\cf12 \strokec12 ):\cf10 \strokec10 \
    \cf8 \strokec8 self\cf12 \strokec12 .\cf11 \strokec11 val\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 None\cf10 \strokec10 \
    \cf8 \strokec8 self\cf12 \strokec12 .\cf11 \strokec11 prv\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 None\cf10 \strokec10 \
    \cf8 \strokec8 self\cf12 \strokec12 .\cf11 \strokec11 nxt\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 None\cf10 \strokec10 \
\
\cf8 \strokec8 class\cf10 \strokec10  \cf13 \strokec13 ADTWL\cf12 \strokec12 (\cf11 \strokec11 object\cf12 \strokec12 ):\cf10 \strokec10 \
  \cf11 \strokec11 def\cf10 \strokec10  \cf13 \strokec13 __init__\cf12 \strokec12 (\cf8 \strokec8 self\cf12 \strokec12 ):\cf10 \strokec10 \
    \cf8 \strokec8 self\cf12 \strokec12 .\cf11 \strokec11 map\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf12 \strokec12 \{\}\cf10 \strokec10 \
    \cf8 \strokec8 self\cf12 \strokec12 .\cf11 \strokec11 head\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 None\cf10 \strokec10 \
\
  \cf11 \strokec11 def\cf10 \strokec10  \cf13 \strokec13 touch\cf12 \strokec12 (\cf8 \strokec8 self\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 k\cf12 \strokec12 ):\cf10 \strokec10 \
    \cf11 \strokec11 node\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf8 \strokec8 self\cf12 \strokec12 .\cf11 \strokec11 map\cf12 \strokec12 .\cf13 \strokec13 setdefault\cf12 \strokec12 (\cf11 \strokec11 k\cf12 \strokec12 ,\cf10 \strokec10  \cf13 \strokec13 Node\cf12 \strokec12 ())\cf10 \strokec10 \
    \cf8 \strokec8 if\cf10 \strokec10  \cf11 \strokec11 node\cf12 \strokec12 .\cf11 \strokec11 prv\cf12 \strokec12 :\cf10 \strokec10 \
      \cf8 \strokec8 self\cf12 \strokec12 .\cf11 \strokec11 map\cf12 \strokec12 [\cf11 \strokec11 node\cf12 \strokec12 .\cf11 \strokec11 prv\cf12 \strokec12 ].\cf11 \strokec11 nxt\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 node\cf12 \strokec12 .\cf11 \strokec11 nxt\cf10 \strokec10 \
    \cf8 \strokec8 if\cf10 \strokec10  \cf11 \strokec11 node\cf12 \strokec12 .\cf11 \strokec11 nxt\cf12 \strokec12 :\cf10 \strokec10 \
      \cf8 \strokec8 self\cf12 \strokec12 .\cf11 \strokec11 map\cf12 \strokec12 [\cf11 \strokec11 node\cf12 \strokec12 .\cf11 \strokec11 nxt\cf12 \strokec12 ].\cf11 \strokec11 prv\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 node\cf12 \strokec12 .\cf11 \strokec11 prv\cf10 \strokec10 \
    \cf8 \strokec8 if\cf10 \strokec10  \cf8 \strokec8 self\cf12 \strokec12 .\cf11 \strokec11 head\cf10 \strokec10  \cf12 \strokec12 !=\cf10 \strokec10  \cf11 \strokec11 k\cf10 \strokec10  \cf8 \strokec8 and\cf10 \strokec10  \cf8 \strokec8 self\cf12 \strokec12 .\cf11 \strokec11 head\cf12 \strokec12 :\cf10 \strokec10 \
      \cf11 \strokec11 node\cf12 \strokec12 .\cf11 \strokec11 prv\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf8 \strokec8 self\cf12 \strokec12 .\cf11 \strokec11 head\cf10 \strokec10 \
      \cf8 \strokec8 self\cf12 \strokec12 .\cf11 \strokec11 map\cf12 \strokec12 [\cf8 \strokec8 self\cf12 \strokec12 .\cf11 \strokec11 head\cf12 \strokec12 ].\cf11 \strokec11 nxt\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 k\cf10 \strokec10 \
    \cf8 \strokec8 self\cf12 \strokec12 .\cf11 \strokec11 head\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 k\cf10 \strokec10 \
    \cf8 \strokec8 return\cf10 \strokec10  \cf11 \strokec11 node\cf10 \strokec10 \
\
  \cf11 \strokec11 def\cf10 \strokec10  \cf13 \strokec13 put\cf12 \strokec12 (\cf8 \strokec8 self\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 k\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 v\cf12 \strokec12 ):\cf10 \strokec10 \
    \cf11 \strokec11 node\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf8 \strokec8 self\cf12 \strokec12 .\cf13 \strokec13 touch\cf12 \strokec12 (\cf11 \strokec11 k\cf12 \strokec12 )\cf10 \strokec10 \
    \cf11 \strokec11 node\cf12 \strokec12 .\cf11 \strokec11 val\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 v\cf10 \strokec10 \
\
  \cf11 \strokec11 def\cf10 \strokec10  \cf13 \strokec13 get\cf12 \strokec12 (\cf8 \strokec8 self\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 k\cf12 \strokec12 ):\cf10 \strokec10 \
    \cf8 \strokec8 return\cf10 \strokec10  \cf8 \strokec8 self\cf12 \strokec12 .\cf13 \strokec13 touch\cf12 \strokec12 (\cf11 \strokec11 k\cf12 \strokec12 ).\cf11 \strokec11 val\cf10 \strokec10 \
\
  \cf11 \strokec11 def\cf10 \strokec10  \cf13 \strokec13 delete\cf12 \strokec12 (\cf8 \strokec8 self\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 k\cf12 \strokec12 ):\cf10 \strokec10 \
    \cf11 \strokec11 node\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf8 \strokec8 self\cf12 \strokec12 .\cf13 \strokec13 touch\cf12 \strokec12 (\cf11 \strokec11 k\cf12 \strokec12 )\cf10 \strokec10 \
    \cf8 \strokec8 if\cf10 \strokec10  \cf11 \strokec11 node\cf12 \strokec12 .\cf11 \strokec11 prv\cf12 \strokec12 :\cf10 \strokec10 \
      \cf8 \strokec8 self\cf12 \strokec12 .\cf11 \strokec11 map\cf12 \strokec12 [\cf11 \strokec11 node\cf12 \strokec12 .\cf11 \strokec11 prv\cf12 \strokec12 ].\cf11 \strokec11 nxt\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 None\cf10 \strokec10 \
    \cf8 \strokec8 self\cf12 \strokec12 .\cf11 \strokec11 head\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 node\cf12 \strokec12 .\cf11 \strokec11 prv\cf10 \strokec10 \
    \cf8 \strokec8 self\cf12 \strokec12 .\cf11 \strokec11 map\cf12 \strokec12 .\cf13 \strokec13 pop\cf12 \strokec12 (\cf11 \strokec11 k\cf12 \strokec12 )\cf10 \strokec10 \
\
  \cf11 \strokec11 def\cf10 \strokec10  \cf13 \strokec13 last\cf12 \strokec12 (\cf8 \strokec8 self\cf12 \strokec12 ):\cf10 \strokec10 \
    \cf8 \strokec8 return\cf10 \strokec10  \cf8 \strokec8 self\cf12 \strokec12 .\cf11 \strokec11 head\cf10 \strokec10 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf7 \cb1 \strokec7 Alternatively, cheating in Java:\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf8 \cb9 \strokec8 public\cf10 \strokec10  \cf8 \strokec8 class\cf10 \strokec10  \cf11 \strokec11 ADTWL\cf10 \strokec10  \cf12 \strokec12 <\cf11 \strokec11 K\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 V\cf12 \strokec12 >\cf10 \strokec10  \cf8 \strokec8 extends\cf10 \strokec10  \cf16 \strokec16 LinkedHashMap\cf12 \strokec12 <\cf11 \strokec11 K\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 V\cf12 \strokec12 >\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
  \cf8 \strokec8 public\cf10 \strokec10  \cf13 \strokec13 ADTWL\cf12 \strokec12 ()\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
    \cf13 \strokec13 super\cf12 \strokec12 (\cf15 \strokec15 16\cf12 \strokec12 ,\cf10 \strokec10  \cf15 \strokec15 0.75\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 true\cf12 \strokec12 );\cf10 \strokec10 \
  \cf12 \strokec12 \}\cf10 \strokec10 \
\
  \cf8 \strokec8 public\cf10 \strokec10  \cf11 \strokec11 K\cf10 \strokec10  \cf13 \strokec13 last\cf12 \strokec12 ()\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
    \cf11 \strokec11 Iterator\cf12 \strokec12 <\cf11 \strokec11 Map\cf12 \strokec12 .\cf11 \strokec11 Entry\cf12 \strokec12 <\cf11 \strokec11 K\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 V\cf12 \strokec12 >>\cf10 \strokec10  \cf11 \strokec11 it\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 this\cf12 \strokec12 .\cf13 \strokec13 entrySet\cf12 \strokec12 ().\cf13 \strokec13 iterator\cf12 \strokec12 ();\cf10 \strokec10 \
    \cf8 \strokec8 if\cf10 \strokec10  \cf12 \strokec12 (!\cf11 \strokec11 it\cf12 \strokec12 .\cf13 \strokec13 hasNext\cf12 \strokec12 ())\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
      \cf8 \strokec8 return\cf10 \strokec10  \cf11 \strokec11 null\cf12 \strokec12 ;\cf10 \strokec10 \
    \cf12 \strokec12 \}\cf10 \strokec10 \
    \cf8 \strokec8 return\cf10 \strokec10  \cf11 \strokec11 it\cf12 \strokec12 .\cf13 \strokec13 next\cf12 \strokec12 ().\cf13 \strokec13 getKey\cf12 \strokec12 ();\cf10 \strokec10 \
  \cf12 \strokec12 \}\cf10 \strokec10 \
\pard\pardeftab720\sl280\partightenfactor0
\cf12 \strokec12 \}\cf10 \strokec10 \
}