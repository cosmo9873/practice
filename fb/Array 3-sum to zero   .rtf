{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\fswiss\fcharset0 Helvetica;\f4\fswiss\fcharset0 Helvetica-Bold;\f5\fnil\fcharset0 Monaco;
\f6\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red245\green30\blue48;\red21\green23\blue25;\red255\green255\blue255;
\red52\green56\blue63;\red78\green84\blue93;\red41\green67\blue135;\red22\green25\blue31;\red152\green18\blue15;
\red252\green244\blue202;\red76\green12\blue1;\red0\green0\blue0;\red0\green0\blue82;\red98\green83\blue14;
\red6\green50\blue15;\red152\green46\blue3;\red83\green83\blue83;\red38\green38\blue38;\red228\green230\blue234;
}
{\*\expandedcolortbl;;\cssrgb\c98039\c21961\c24314;\cssrgb\c10980\c11765\c12941;\cssrgb\c100000\c100000\c100000;
\cssrgb\c26667\c28627\c31373;\cssrgb\c37647\c40392\c43922;\cssrgb\c21176\c34510\c60000;\cssrgb\c11373\c12941\c16078;\cssrgb\c66667\c13333\c6667;
\cssrgb\c99216\c96078\c83137;\cssrgb\c37647\c7059\c0;\cssrgb\c0\c0\c0;\cssrgb\c0\c3922\c39608;\cssrgb\c46275\c39608\c6275;
\cssrgb\c0\c25098\c7059;\cssrgb\c66667\c25098\c0;\cssrgb\c40000\c40000\c40000;\cssrgb\c20000\c20000\c20000;\cssrgb\c91373\c92157\c93333;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 [DEPRECATED]\cf3 \strokec3 Array 3-sum to zero\
\pard\pardeftab720\sl520\qc\partightenfactor0

\f1\i\fs24 \cf4 \strokec4 \
\pard\pardeftab720\sl520\qc\partightenfactor0
\cf5 \strokec5 \
\pard\pardeftab720\sl520\qc\partightenfactor0

\f0\i0 \cf5 More Items\
\pard\pardeftab720\sl320\partightenfactor0

\f1\b0 \cf6 \strokec6 Owner:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/profile/?id=100000265941025"}}{\fldrslt \cf7 \strokec7 Kaustubh Karkare}}\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf8 \strokec8 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf6 \strokec6 Medium\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf8 \strokec8 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf6 \strokec6 Ninja\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf8 \strokec8 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf6 \strokec6 Algorithm\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf3 \strokec3 Description\
\pard\pardeftab720\sl280\partightenfactor0

\f3\b0\fs24 \cf8 \strokec8 Determine if any 3 integers in an array sum to 0.\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf3 \strokec3 Question Statement\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\fs24 \cf8 \strokec8 This question appeared on glassdoor.com ({\field{\*\fldinst{HYPERLINK "https://l.facebook.com/l.php?u=https%3A%2F%2Fwww.glassdoor.com%2FInterview%2FQuestion-Determine-if-any-3-integers-in-an-array-sum-to-0-Note-The-following-solutions-assumes-that-repetitions-i-e-QTN_1561697.htm&h=AT091orv2hKXB-GP6tDL_HGAVozuHGmjaZUsAl2m4vzbIptxdHR2BVAZTAS5naOmSExEVrVF4qhv69VF9By-OH-uSmOGU8KH3pMHuxa_ShBzGTcsn8-HBG37hdGNkHzBr0xJBlumD8HWYbuEVCveuHEf"}}{\fldrslt \cf7 \strokec7 https://www.glassdoor.com/Interview/Question-Determine-if-any-3-integers-in-an-array-sum-to-0-Note-The-following-solutions-assumes-that-repetitions-i-e-QTN_1561697.htm}}). We should probably deprecate the question.
\f3\b0 \
Ninja Brown Bag Recording:\'a0{\field{\*\fldinst{HYPERLINK "https://our.intern.facebook.com/intern/hacktv/view/556993821128572/"}}{\fldrslt \cf7 \strokec7 https://our.intern.facebook.com/intern/hacktv/view/556993821128572/}}\
Powerpoint:\'a0{\field{\*\fldinst{HYPERLINK "https://www.dropbox.com/s/izddfayi1s52yez/Ninja%2520BB%25203%2520Sum.pptx?dl=0"}}{\fldrslt \cf7 \strokec7 https://www.dropbox.com/s/izddfayi1s52yez/Ninja%2520BB%25203%2520Sum.pptx?dl=0}}\
Sample input and expected results (don't just copypasta this):\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf9 \cb10 \strokec9 [\cf11 \strokec11 3\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 5\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 8\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 10\cf9 \strokec9 ,\cf12 \strokec12  \cf9 \strokec9 -\cf11 \strokec11 9\cf9 \strokec9 ,\cf12 \strokec12  \cf9 \strokec9 -\cf11 \strokec11 11\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 16\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 2\cf9 \strokec9 ]\cf12 \strokec12  \cf9 \strokec9 =>\cf12 \strokec12  \cf13 \strokec13 true\cf12 \strokec12 \
\cf9 \strokec9 [\cf11 \strokec11 3\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 5\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 4\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 9\cf9 \strokec9 ,\cf12 \strokec12  \cf9 \strokec9 -\cf11 \strokec11 16\cf9 \strokec9 ,\cf12 \strokec12  \cf9 \strokec9 -\cf11 \strokec11 10\cf9 \strokec9 ]\cf12 \strokec12  \cf9 \strokec9 =>\cf12 \strokec12  \cf13 \strokec13 false\cf12 \strokec12 \
\cf9 \strokec9 [\cf11 \strokec11 3\cf9 \strokec9 ,\cf12 \strokec12  \cf9 \strokec9 -\cf11 \strokec11 3\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 4\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 8\cf9 \strokec9 ,\cf12 \strokec12  \cf9 \strokec9 -\cf11 \strokec11 13\cf9 \strokec9 ]\cf12 \strokec12  \cf9 \strokec9 =>\cf12 \strokec12  \cf13 \strokec13 false\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf14 \strokec14 ```\cf12 \strokec12 \
\cf14 \strokec14 The first example can expose a common bug around only finding adjacent-number solutions.\cf12 \strokec12 \
\cf14 \strokec14 The second example is true if repetitions are allowed, but false otherwise.\cf12 \strokec12 \
\cf14 \strokec14 The third example will catch a bug where 2 integers summing to 0 causes a false positive.\cf12 \strokec12 \
\
\cf14 \strokec14 NOTE: The following solutions assumes that repetitions (i.e. choosing the same array element more than once) are *allowed*, so the array [-5,1,10] contains a zero sum (-5-5+10) and so does [0] (0+0+0). The same question can be asked without allowing repetitions, with some modifications to the proposed solutions (especially sorted_ and hashtable_). Make sure the solutions you get respect whatever flavor you choose to ask.\cf12 \strokec12 \
\
\cf14 \strokec14 The brute force method is O(n^3), which is simply a triple for loop that consider all triples. I often give out this solution to candidates who seem stuck in order to unblock them:\cf12 \strokec12 \
\
\cf14 \strokec14 ```\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf13 \strokec13 def\cf12 \strokec12  \cf15 \strokec15 brute_force2\cf9 \strokec9 (\cf13 \strokec13 arr\cf9 \strokec9 ):\cf12 \strokec12 \
    \cf16 \strokec16 for\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf15 \strokec15 range\cf9 \strokec9 (\cf11 \strokec11 0\cf9 \strokec9 ,\cf12 \strokec12  \cf15 \strokec15 len\cf9 \strokec9 (\cf13 \strokec13 arr\cf9 \strokec9 )):\cf12 \strokec12 \
        \cf16 \strokec16 for\cf12 \strokec12  \cf13 \strokec13 j\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf15 \strokec15 range\cf12 \strokec12  \cf9 \strokec9 (\cf13 \strokec13 i\cf9 \strokec9 ,\cf12 \strokec12  \cf15 \strokec15 len\cf9 \strokec9 (\cf13 \strokec13 arr\cf9 \strokec9 )):\cf12 \strokec12 \
            \cf16 \strokec16 for\cf12 \strokec12  \cf13 \strokec13 k\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf15 \strokec15 range\cf9 \strokec9 (\cf13 \strokec13 j\cf9 \strokec9 ,\cf12 \strokec12  \cf15 \strokec15 len\cf9 \strokec9 (\cf13 \strokec13 arr\cf9 \strokec9 )):\cf12 \strokec12 \
                \cf16 \strokec16 if\cf12 \strokec12  \cf9 \strokec9 ((\cf13 \strokec13 arr\cf9 \strokec9 [\cf13 \strokec13 i\cf9 \strokec9 ]\cf12 \strokec12  \cf9 \strokec9 +\cf12 \strokec12  \cf13 \strokec13 arr\cf9 \strokec9 [\cf13 \strokec13 j\cf9 \strokec9 ]\cf12 \strokec12  \cf9 \strokec9 +\cf12 \strokec12  \cf13 \strokec13 arr\cf9 \strokec9 [\cf13 \strokec13 k\cf9 \strokec9 ])\cf12 \strokec12  \cf9 \strokec9 ==\cf12 \strokec12  \cf11 \strokec11 0\cf9 \strokec9 ):\cf12 \strokec12 \
                    \cf15 \strokec15 print\cf9 \strokec9 (\cf13 \strokec13 arr\cf9 \strokec9 [\cf13 \strokec13 i\cf9 \strokec9 ],\cf12 \strokec12  \cf13 \strokec13 arr\cf9 \strokec9 [\cf13 \strokec13 j\cf9 \strokec9 ],\cf12 \strokec12  \cf13 \strokec13 arr\cf9 \strokec9 [\cf13 \strokec13 k\cf9 \strokec9 ])\cf12 \strokec12 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf8 \cb1 \strokec8 The next step is generally to reduce this by optimizing the inner loop. There is no need to do a linear scan to determine if the sum of the first 2 number exists in an array. The 2 most common approaches are to use a hashtable or binary search the array:\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf13 \cb10 \strokec13 def\cf12 \strokec12  \cf15 \strokec15 binary_search\cf9 \strokec9 (\cf13 \strokec13 arr\cf9 \strokec9 ,\cf12 \strokec12  \cf13 \strokec13 value\cf9 \strokec9 ):\cf12 \strokec12 \
    \cf13 \strokec13 min_index\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf11 \strokec11 0\cf12 \strokec12 \
    \cf13 \strokec13 max_index\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf15 \strokec15 len\cf9 \strokec9 (\cf13 \strokec13 arr\cf9 \strokec9 )\cf12 \strokec12  \cf9 \strokec9 -\cf12 \strokec12  \cf11 \strokec11 1\cf12 \strokec12 \
\
    \cf16 \strokec16 while\cf12 \strokec12  \cf9 \strokec9 (\cf13 \strokec13 min_index\cf12 \strokec12  \cf9 \strokec9 <=\cf12 \strokec12  \cf13 \strokec13 max_index\cf9 \strokec9 ):\cf12 \strokec12 \
        \cf13 \strokec13 mid\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf9 \strokec9 (\cf13 \strokec13 min_index\cf12 \strokec12  \cf9 \strokec9 +\cf12 \strokec12  \cf13 \strokec13 max_index\cf9 \strokec9 )\cf12 \strokec12  \cf9 \strokec9 /\cf12 \strokec12  \cf11 \strokec11 2\cf12 \strokec12 \
        \cf16 \strokec16 if\cf12 \strokec12  \cf9 \strokec9 (\cf13 \strokec13 value\cf12 \strokec12  \cf9 \strokec9 ==\cf12 \strokec12  \cf13 \strokec13 arr\cf9 \strokec9 [\cf13 \strokec13 mid\cf9 \strokec9 ]):\cf12 \strokec12 \
            \cf16 \strokec16 return\cf12 \strokec12  \cf13 \strokec13 mid\cf12 \strokec12 \
        \cf15 \strokec15 elif\cf12 \strokec12  \cf9 \strokec9 (\cf13 \strokec13 value\cf12 \strokec12  \cf9 \strokec9 >\cf12 \strokec12  \cf13 \strokec13 arr\cf9 \strokec9 [\cf13 \strokec13 mid\cf9 \strokec9 ]):\cf12 \strokec12 \
            \cf13 \strokec13 min_index\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf13 \strokec13 mid\cf12 \strokec12  \cf9 \strokec9 +\cf12 \strokec12  \cf11 \strokec11 1\cf12 \strokec12 \
        \cf16 \strokec16 else\cf9 \strokec9 :\cf12 \strokec12 \
            \cf13 \strokec13 max_index\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf13 \strokec13 mid\cf12 \strokec12  \cf9 \strokec9 -\cf12 \strokec12  \cf11 \strokec11 1\cf12 \strokec12 \
    \cf16 \strokec16 return\cf12 \strokec12  \cf9 \strokec9 -\cf11 \strokec11 1\cf12 \strokec12 \
\
\cf13 \strokec13 def\cf12 \strokec12  \cf15 \strokec15 sorted_soln\cf9 \strokec9 (\cf13 \strokec13 arr\cf9 \strokec9 ):\cf12 \strokec12 \
    \cf13 \strokec13 arr\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf15 \strokec15 sorted\cf9 \strokec9 (\cf13 \strokec13 arr\cf9 \strokec9 )\cf12 \strokec12 \
    \cf16 \strokec16 for\cf12 \strokec12  \cf13 \strokec13 a\cf9 \strokec9 ,\cf12 \strokec12  \cf13 \strokec13 b\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf9 \strokec9 [[\cf13 \strokec13 x\cf9 \strokec9 ,\cf12 \strokec12  \cf13 \strokec13 y\cf9 \strokec9 ]\cf12 \strokec12  \cf16 \strokec16 for\cf12 \strokec12  \cf13 \strokec13 x\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf13 \strokec13 arr\cf12 \strokec12  \cf16 \strokec16 for\cf12 \strokec12  \cf13 \strokec13 y\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf13 \strokec13 arr\cf9 \strokec9 ]:\cf12 \strokec12 \
        \cf17 \strokec17 # binary search if -ve sum of every pair exists\cf12 \strokec12 \
        \cf13 \strokec13 index\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf15 \strokec15 binary_search\cf9 \strokec9 (\cf13 \strokec13 arr\cf9 \strokec9 ,\cf12 \strokec12  \cf9 \strokec9 -(\cf13 \strokec13 a\cf12 \strokec12  \cf9 \strokec9 +\cf12 \strokec12  \cf13 \strokec13 b\cf9 \strokec9 ))\cf12 \strokec12 \
        \cf16 \strokec16 if\cf12 \strokec12  \cf9 \strokec9 (\cf13 \strokec13 index\cf12 \strokec12  \cf9 \strokec9 !=\cf12 \strokec12  \cf9 \strokec9 -\cf11 \strokec11 1\cf9 \strokec9 ):\cf12 \strokec12 \
            \cf15 \strokec15 print\cf9 \strokec9 (\cf13 \strokec13 a\cf9 \strokec9 ,\cf12 \strokec12  \cf13 \strokec13 b\cf9 \strokec9 ,\cf12 \strokec12  \cf13 \strokec13 arr\cf9 \strokec9 [\cf13 \strokec13 index\cf9 \strokec9 ])\cf12 \strokec12 \
\
\cf13 \strokec13 def\cf12 \strokec12  \cf15 \strokec15 hashtable_soln\cf9 \strokec9 (\cf13 \strokec13 arr\cf9 \strokec9 ):\cf12 \strokec12 \
    \cf17 \strokec17 # create hashtable and insert all values in array\cf12 \strokec12 \
    \cf13 \strokec13 vals\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf9 \strokec9 \{\}\cf12 \strokec12 \
    \cf16 \strokec16 for\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf15 \strokec15 range\cf9 \strokec9 (\cf15 \strokec15 len\cf9 \strokec9 (\cf13 \strokec13 arr\cf9 \strokec9 )):\cf12 \strokec12 \
        \cf13 \strokec13 vals\cf9 \strokec9 [\cf13 \strokec13 arr\cf9 \strokec9 [\cf13 \strokec13 i\cf9 \strokec9 ]]\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12 \
    \cf16 \strokec16 for\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf15 \strokec15 range\cf9 \strokec9 (\cf15 \strokec15 len\cf9 \strokec9 (\cf13 \strokec13 arr\cf9 \strokec9 )):\cf12 \strokec12 \
        \cf16 \strokec16 for\cf12 \strokec12  \cf13 \strokec13 j\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf15 \strokec15 range\cf9 \strokec9 (\cf13 \strokec13 i\cf12 \strokec12  \cf9 \strokec9 +\cf12 \strokec12  \cf11 \strokec11 1\cf9 \strokec9 ,\cf12 \strokec12  \cf15 \strokec15 len\cf9 \strokec9 (\cf13 \strokec13 arr\cf9 \strokec9 )):\cf12 \strokec12 \
            \cf13 \strokec13 sum\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf9 \strokec9 -(\cf13 \strokec13 arr\cf9 \strokec9 [\cf13 \strokec13 i\cf9 \strokec9 ]\cf12 \strokec12  \cf9 \strokec9 +\cf12 \strokec12  \cf13 \strokec13 arr\cf9 \strokec9 [\cf13 \strokec13 j\cf9 \strokec9 ])\cf12 \strokec12 \
            \cf17 \strokec17 # Note: this will print out the same solution multiple times. For instance,\cf12 \strokec12 \
            \cf17 \strokec17 # [0,-1,1] will print 3 solutions. To print only unique solutions:\cf12 \strokec12 \
            \cf17 \strokec17 # if vals.has_key(sum) and j < vals[sum]:\cf12 \strokec12 \
            \cf16 \strokec16 if\cf12 \strokec12  \cf13 \strokec13 vals\cf9 \strokec9 .\cf15 \strokec15 has_key\cf9 \strokec9 (\cf13 \strokec13 sum\cf9 \strokec9 )\cf12 \strokec12  \cf16 \strokec16 and\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf9 \strokec9 !=\cf12 \strokec12  \cf13 \strokec13 vals\cf9 \strokec9 [\cf13 \strokec13 sum\cf9 \strokec9 ]\cf12 \strokec12  \cf16 \strokec16 and\cf12 \strokec12  \cf13 \strokec13 j\cf12 \strokec12  \cf9 \strokec9 !=\cf12 \strokec12  \cf13 \strokec13 vals\cf9 \strokec9 [\cf13 \strokec13 sum\cf9 \strokec9 ]:\cf12 \strokec12 \
               \cf15 \strokec15 print\cf9 \strokec9 (\cf13 \strokec13 arr\cf9 \strokec9 [\cf13 \strokec13 i\cf9 \strokec9 ],\cf12 \strokec12  \cf13 \strokec13 arr\cf9 \strokec9 [\cf13 \strokec13 j\cf9 \strokec9 ],\cf12 \strokec12  \cf13 \strokec13 sum\cf9 \strokec9 )\cf12 \strokec12 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf8 \cb1 \strokec8 The hashtable solution is more efficient because lookups are O(1), which makes the overall running time O(n^2) as opposed to O(n^2 log n) for the binary search solution. The value in the hashtable is the last index seen for the value in the key. It's necessary to check this value against i and j to avoid reusing an element. This works if there are duplicates since for valid solutions i and j will always be less than the value in the hashtable. There are other methods to avoid the problem of reuse, such as storing all the indexes or removing and adding back elements during the iteration.\
Once the candidate has reached this point, I ask them to come up with a O(n^2) solution that\'a0
\f4\b does not
\f3\b0 \'a0require extra space (the hashtable table requires O(n) extra space). This is a tough question and I generally give the candidates a bit of time to think about it. If they don't seem to be making any headway, I give them the hint that it requires sorting the array. If that doesn't help, I give the following hint: If you are trying to determine if there is any pair of numbers in a sorted array that sum up to a target number, then is there any way to eliminate either the min or the max number in the array from a potential pair?\
Answer:\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf13 \cb10 \strokec13 def\cf12 \strokec12  \cf15 \strokec15 walking_soln\cf9 \strokec9 (\cf13 \strokec13 arr\cf9 \strokec9 ):\cf12 \strokec12 \
    \cf13 \strokec13 arr\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf15 \strokec15 sorted\cf9 \strokec9 (\cf13 \strokec13 arr\cf9 \strokec9 )\cf12 \strokec12 \
    \cf17 \strokec17 # enumerate fetches both index and value\cf12 \strokec12 \
    \cf16 \strokec16 for\cf12 \strokec12  \cf13 \strokec13 i\cf9 \strokec9 ,\cf12 \strokec12  \cf13 \strokec13 s\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf15 \strokec15 enumerate\cf9 \strokec9 (\cf13 \strokec13 arr\cf9 \strokec9 ):\cf12 \strokec12 \
        \cf13 \strokec13 min_index\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12 \
        \cf13 \strokec13 max_index\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf15 \strokec15 len\cf9 \strokec9 (\cf13 \strokec13 arr\cf9 \strokec9 )\cf12 \strokec12  \cf9 \strokec9 -\cf12 \strokec12  \cf11 \strokec11 1\cf12 \strokec12 \
        \cf16 \strokec16 while\cf12 \strokec12  \cf9 \strokec9 (\cf13 \strokec13 min_index\cf12 \strokec12  \cf9 \strokec9 <=\cf12 \strokec12  \cf13 \strokec13 max_index\cf9 \strokec9 ):\cf12 \strokec12 \
            \cf17 \strokec17 # if min + max > target then max can't be part of soln\cf12 \strokec12 \
            \cf16 \strokec16 if\cf12 \strokec12  \cf9 \strokec9 ((\cf13 \strokec13 arr\cf9 \strokec9 [\cf13 \strokec13 min_index\cf9 \strokec9 ]\cf12 \strokec12  \cf9 \strokec9 +\cf12 \strokec12  \cf13 \strokec13 arr\cf9 \strokec9 [\cf13 \strokec13 max_index\cf9 \strokec9 ])\cf12 \strokec12  \cf9 \strokec9 >\cf12 \strokec12  \cf9 \strokec9 -\cf13 \strokec13 s\cf9 \strokec9 ):\cf12 \strokec12 \
                \cf13 \strokec13 max_index\cf12 \strokec12  \cf9 \strokec9 -=\cf12 \strokec12  \cf11 \strokec11 1\cf12 \strokec12 \
            \cf17 \strokec17 # if min + max < target then min can't be part of soln\cf12 \strokec12 \
            \cf15 \strokec15 elif\cf12 \strokec12  \cf9 \strokec9 ((\cf13 \strokec13 arr\cf9 \strokec9 [\cf13 \strokec13 min_index\cf9 \strokec9 ]\cf12 \strokec12  \cf9 \strokec9 +\cf12 \strokec12  \cf13 \strokec13 arr\cf9 \strokec9 [\cf13 \strokec13 max_index\cf9 \strokec9 ])\cf12 \strokec12  \cf9 \strokec9 <\cf12 \strokec12  \cf9 \strokec9 -\cf13 \strokec13 s\cf9 \strokec9 ):\cf12 \strokec12 \
                \cf13 \strokec13 min_index\cf12 \strokec12  \cf9 \strokec9 +=\cf12 \strokec12  \cf11 \strokec11 1\cf12 \strokec12 \
            \cf16 \strokec16 else\cf9 \strokec9 :\cf12 \strokec12 \
                \cf17 \strokec17 # valid solution\cf12 \strokec12 \
                \cf15 \strokec15 print\cf9 \strokec9 (\cf13 \strokec13 s\cf9 \strokec9 ,\cf12 \strokec12  \cf13 \strokec13 arr\cf9 \strokec9 [\cf13 \strokec13 min_index\cf9 \strokec9 ],\cf13 \strokec13 arr\cf9 \strokec9 [\cf13 \strokec13 max_index\cf9 \strokec9 ])\cf12 \strokec12 \
                \cf16 \strokec16 break\cf12 \strokec12 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf8 \cb1 \strokec8 Technically, the sorted array is O(n) extra space if not sorted in-place (If sorted in-place, one incurs zero or minimal extra space. If in-place recursive sorting is used, then the growth of the callstack size needs to be taken into account to the degree to which it relates to the input size. Otherwise in-place sorting incurs a time, not space hit.) Bonus point if the candidate points this out.\
For an exhaustive take on this algorithm, see here:\'a0{\field{\*\fldinst{HYPERLINK "http://l.facebook.com/l.php?u=http%3A%2F%2Fcodeperspectives.com%2Fen%2Fnzp-new-3sum-algorithm%2F&h=AT27Eet7D4vYjc2XGZ5_nhaj-7oFnzodF7k1g1R4MY9D6z7iLZGNYyAY34RVSwDT-kxAKu0rS6q14uKX6UZEzfnqMy7J8iz9yDNCwo0G8aXFt0AnM-EObD7UQsxdYI7b4AQZRvk0k5rxonP0yxhuynO2"}}{\fldrslt \cf7 \strokec7 http://codeperspectives.com/en/nzp-new-3sum-algorithm/}}\
There are no explicit followups to this question the last part serves that purpose.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf8 Alternate Solutions\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=641454982697994#alternate-solutions"}}{\fldrslt \cf7 \strokec7 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf8 These solutions allow repetition (e.g.\'a0
\f6 \cf18 \cb19 \strokec18 [1, 2, 0]
\f3 \cf8 \cb1 \strokec8 has the solution\'a0
\f6 \cf18 \cb19 \strokec18 (0, 0, 0)
\f3 \cf8 \cb1 \strokec8 \'a0if repetition is allowed) which the above solutions don't allow.\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf13 \cb10 \strokec13 def\cf12 \strokec12  \cf15 \strokec15 list_three_int_sum_to_zero_naive\cf9 \strokec9 (\cf13 \strokec13 A\cf9 \strokec9 ):\cf12 \strokec12 \
    \cf13 \strokec13 solutions\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf9 \strokec9 []\cf12 \strokec12 \
    \cf16 \strokec16 for\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf15 \strokec15 range\cf9 \strokec9 (\cf15 \strokec15 len\cf9 \strokec9 (\cf13 \strokec13 A\cf9 \strokec9 )):\cf12 \strokec12 \
        \cf16 \strokec16 for\cf12 \strokec12  \cf13 \strokec13 j\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf15 \strokec15 range\cf9 \strokec9 (\cf13 \strokec13 i\cf9 \strokec9 ,\cf12 \strokec12  \cf15 \strokec15 len\cf9 \strokec9 (\cf13 \strokec13 A\cf9 \strokec9 )):\cf12 \strokec12 \
            \cf16 \strokec16 for\cf12 \strokec12  \cf13 \strokec13 k\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf15 \strokec15 range\cf9 \strokec9 (\cf13 \strokec13 j\cf9 \strokec9 ,\cf12 \strokec12  \cf15 \strokec15 len\cf9 \strokec9 (\cf13 \strokec13 A\cf9 \strokec9 )):\cf12 \strokec12 \
                \cf16 \strokec16 if\cf12 \strokec12  \cf13 \strokec13 A\cf9 \strokec9 [\cf13 \strokec13 i\cf9 \strokec9 ]\cf12 \strokec12  \cf9 \strokec9 +\cf12 \strokec12  \cf13 \strokec13 A\cf9 \strokec9 [\cf13 \strokec13 j\cf9 \strokec9 ]\cf12 \strokec12  \cf9 \strokec9 +\cf12 \strokec12  \cf13 \strokec13 A\cf9 \strokec9 [\cf13 \strokec13 k\cf9 \strokec9 ]\cf12 \strokec12  \cf9 \strokec9 ==\cf12 \strokec12  \cf11 \strokec11 0\cf9 \strokec9 :\cf12 \strokec12 \
                    \cf13 \strokec13 solutions\cf9 \strokec9 .\cf15 \strokec15 append\cf9 \strokec9 ((\cf13 \strokec13 i\cf9 \strokec9 ,\cf12 \strokec12  \cf13 \strokec13 j\cf9 \strokec9 ,\cf12 \strokec12  \cf13 \strokec13 k\cf9 \strokec9 ))\cf12 \strokec12 \
    \cf16 \strokec16 return\cf12 \strokec12  \cf13 \strokec13 solutions\cf12 \strokec12 \
\
\pard\pardeftab720\sl280\partightenfactor0
\cf17 \strokec17 # This solution uses a hash table to slightly improve the complexity (to O(n^2))\cf12 \strokec12 \
\cf17 \strokec17 # but requires O(n) extra space.\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf13 \strokec13 def\cf12 \strokec12  \cf15 \strokec15 list_three_int_sum_to_zero_hashtable\cf9 \strokec9 (\cf13 \strokec13 A\cf9 \strokec9 ):\cf12 \strokec12 \
    \cf13 \strokec13 solutions\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf9 \strokec9 []\cf12 \strokec12 \
    \cf13 \strokec13 d\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf9 \strokec9 \{\}\cf12 \strokec12 \
    \cf16 \strokec16 for\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf15 \strokec15 range\cf9 \strokec9 (\cf15 \strokec15 len\cf9 \strokec9 (\cf13 \strokec13 A\cf9 \strokec9 )):\cf12 \strokec12 \
        \cf13 \strokec13 d\cf9 \strokec9 [\cf13 \strokec13 A\cf9 \strokec9 [\cf13 \strokec13 i\cf9 \strokec9 ]]\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12 \
    \cf16 \strokec16 for\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf15 \strokec15 range\cf9 \strokec9 (\cf15 \strokec15 len\cf9 \strokec9 (\cf13 \strokec13 A\cf9 \strokec9 )):\cf12 \strokec12 \
        \cf16 \strokec16 for\cf12 \strokec12  \cf13 \strokec13 j\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf15 \strokec15 range\cf9 \strokec9 (\cf13 \strokec13 i\cf9 \strokec9 ,\cf12 \strokec12  \cf15 \strokec15 len\cf9 \strokec9 (\cf13 \strokec13 A\cf9 \strokec9 )):\cf12 \strokec12 \
            \cf13 \strokec13 sum\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf9 \strokec9 -(\cf13 \strokec13 A\cf9 \strokec9 [\cf13 \strokec13 i\cf9 \strokec9 ]\cf12 \strokec12  \cf9 \strokec9 +\cf12 \strokec12  \cf13 \strokec13 A\cf9 \strokec9 [\cf13 \strokec13 j\cf9 \strokec9 ])\cf12 \strokec12 \
            \cf16 \strokec16 if\cf12 \strokec12  \cf13 \strokec13 sum\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf13 \strokec13 d\cf9 \strokec9 :\cf12 \strokec12 \
                \cf13 \strokec13 solutions\cf9 \strokec9 .\cf15 \strokec15 append\cf9 \strokec9 ((\cf13 \strokec13 i\cf9 \strokec9 ,\cf12 \strokec12  \cf13 \strokec13 j\cf9 \strokec9 ,\cf12 \strokec12  \cf13 \strokec13 d\cf9 \strokec9 [\cf13 \strokec13 sum\cf9 \strokec9 ]))\cf12 \strokec12 \
    \cf16 \strokec16 return\cf12 \strokec12  \cf13 \strokec13 solutions\cf12 \strokec12 \
\
\pard\pardeftab720\sl280\partightenfactor0
\cf17 \strokec17 # This solution first sorts the list, then uses a linear search over the right-\cf12 \strokec12 \
\cf17 \strokec17 # hand side of the list for each element in it. This maintains the quadratic\cf12 \strokec12 \
\cf17 \strokec17 # complexity, but requires no extra space.\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf13 \strokec13 def\cf12 \strokec12  \cf15 \strokec15 list_three_int_sum_to_zero\cf9 \strokec9 (\cf13 \strokec13 A\cf9 \strokec9 ):\cf12 \strokec12 \
    \cf13 \strokec13 solutions\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf9 \strokec9 []\cf12 \strokec12 \
    \cf13 \strokec13 A\cf9 \strokec9 .\cf15 \strokec15 sort\cf9 \strokec9 ()\cf12 \strokec12 \
    \cf16 \strokec16 for\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf15 \strokec15 range\cf9 \strokec9 (\cf15 \strokec15 len\cf9 \strokec9 (\cf13 \strokec13 A\cf9 \strokec9 )\cf12 \strokec12  \cf9 \strokec9 -\cf12 \strokec12  \cf11 \strokec11 2\cf9 \strokec9 ):\cf12 \strokec12 \
        \cf13 \strokec13 j\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf9 \strokec9 +\cf12 \strokec12  \cf11 \strokec11 1\cf12 \strokec12 \
        \cf13 \strokec13 k\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf15 \strokec15 len\cf9 \strokec9 (\cf13 \strokec13 A\cf9 \strokec9 )\cf12 \strokec12  \cf9 \strokec9 -\cf12 \strokec12  \cf11 \strokec11 1\cf12 \strokec12 \
        \cf16 \strokec16 while\cf12 \strokec12  \cf13 \strokec13 j\cf12 \strokec12  \cf9 \strokec9 <=\cf12 \strokec12  \cf13 \strokec13 k\cf9 \strokec9 :\cf12 \strokec12 \
            \cf13 \strokec13 sum\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf13 \strokec13 A\cf9 \strokec9 [\cf13 \strokec13 i\cf9 \strokec9 ]\cf12 \strokec12  \cf9 \strokec9 +\cf12 \strokec12  \cf13 \strokec13 A\cf9 \strokec9 [\cf13 \strokec13 j\cf9 \strokec9 ]\cf12 \strokec12  \cf9 \strokec9 +\cf12 \strokec12  \cf13 \strokec13 A\cf9 \strokec9 [\cf13 \strokec13 k\cf9 \strokec9 ]\cf12 \strokec12 \
            \cf16 \strokec16 if\cf12 \strokec12  \cf13 \strokec13 sum\cf12 \strokec12  \cf9 \strokec9 ==\cf12 \strokec12  \cf11 \strokec11 0\cf9 \strokec9 :\cf12 \strokec12 \
                \cf13 \strokec13 solutions\cf9 \strokec9 .\cf15 \strokec15 append\cf9 \strokec9 ((\cf13 \strokec13 i\cf9 \strokec9 ,\cf12 \strokec12  \cf13 \strokec13 j\cf9 \strokec9 ,\cf12 \strokec12  \cf13 \strokec13 k\cf9 \strokec9 ))\cf12 \strokec12 \
                \cf13 \strokec13 j\cf12 \strokec12  \cf9 \strokec9 +=\cf12 \strokec12  \cf11 \strokec11 1\cf12 \strokec12 \
                \cf13 \strokec13 k\cf12 \strokec12  \cf9 \strokec9 -=\cf12 \strokec12  \cf11 \strokec11 1\cf12 \strokec12 \
            \cf13 \strokec13 elif\cf12 \strokec12  \cf13 \strokec13 sum\cf12 \strokec12  \cf9 \strokec9 <\cf12 \strokec12  \cf11 \strokec11 0\cf9 \strokec9 :\cf12 \strokec12 \
                \cf17 \strokec17 # We need a larger number; move the left end of the range up\cf12 \strokec12 \
                \cf13 \strokec13 j\cf12 \strokec12  \cf9 \strokec9 +=\cf12 \strokec12  \cf11 \strokec11 1\cf12 \strokec12 \
            \cf16 \strokec16 else\cf9 \strokec9 :\cf12 \strokec12 \
                \cf17 \strokec17 # We need a smaller number; move the right end of the range down\cf12 \strokec12 \
                \cf13 \strokec13 k\cf12 \strokec12  \cf9 \strokec9 -=\cf12 \strokec12  \cf11 \strokec11 1\cf12 \strokec12 \
    \cf17 \strokec17 # There are some special cases to handle. Any 0s in the array are also a\cf12 \strokec12 \
    \cf17 \strokec17 # solution (simply pick 0 three times). Finally, if we find A[j] = -2 * A[i]\cf12 \strokec12 \
    \cf17 \strokec17 # in the array for some some i, j, then (i, i, j) is also a solution.\cf12 \strokec12 \
    \cf17 \strokec17 #\cf12 \strokec12 \
    \cf17 \strokec17 # Note that this additional quadratic step doesn't change our asymptotic\cf12 \strokec12 \
    \cf17 \strokec17 # complexity.\cf12 \strokec12 \
    \cf16 \strokec16 for\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf15 \strokec15 range\cf9 \strokec9 (\cf15 \strokec15 len\cf9 \strokec9 (\cf13 \strokec13 A\cf9 \strokec9 )):\cf12 \strokec12 \
        \cf16 \strokec16 if\cf12 \strokec12  \cf13 \strokec13 A\cf9 \strokec9 [\cf13 \strokec13 i\cf9 \strokec9 ]\cf12 \strokec12  \cf9 \strokec9 ==\cf12 \strokec12  \cf11 \strokec11 0\cf9 \strokec9 :\cf12 \strokec12 \
            \cf13 \strokec13 solutions\cf9 \strokec9 .\cf15 \strokec15 append\cf9 \strokec9 ((\cf13 \strokec13 i\cf9 \strokec9 ,\cf12 \strokec12  \cf13 \strokec13 i\cf9 \strokec9 ,\cf12 \strokec12  \cf13 \strokec13 i\cf9 \strokec9 ))\cf12 \strokec12 \
        \cf16 \strokec16 else\cf9 \strokec9 :\cf12 \strokec12 \
            \cf16 \strokec16 for\cf12 \strokec12  \cf13 \strokec13 j\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf15 \strokec15 range\cf9 \strokec9 (\cf13 \strokec13 i\cf12 \strokec12  \cf9 \strokec9 +\cf12 \strokec12  \cf11 \strokec11 1\cf9 \strokec9 ,\cf12 \strokec12  \cf15 \strokec15 len\cf9 \strokec9 (\cf13 \strokec13 A\cf9 \strokec9 )):\cf12 \strokec12 \
                \cf16 \strokec16 if\cf12 \strokec12  \cf11 \strokec11 2\cf12 \strokec12  \cf9 \strokec9 *\cf12 \strokec12  \cf13 \strokec13 A\cf9 \strokec9 [\cf13 \strokec13 i\cf9 \strokec9 ]\cf12 \strokec12  \cf9 \strokec9 +\cf12 \strokec12  \cf13 \strokec13 A\cf9 \strokec9 [\cf13 \strokec13 j\cf9 \strokec9 ]\cf12 \strokec12  \cf9 \strokec9 ==\cf12 \strokec12  \cf11 \strokec11 0\cf9 \strokec9 :\cf12 \strokec12 \
                    \cf13 \strokec13 solutions\cf9 \strokec9 .\cf15 \strokec15 append\cf9 \strokec9 ((\cf13 \strokec13 i\cf9 \strokec9 ,\cf12 \strokec12  \cf13 \strokec13 i\cf9 \strokec9 ,\cf12 \strokec12  \cf13 \strokec13 j\cf9 \strokec9 ))\cf12 \strokec12 \
\
    \cf16 \strokec16 return\cf12 \strokec12  \cf13 \strokec13 solutions\cf12 \strokec12 \
\
\pard\pardeftab720\sl280\partightenfactor0
\cf16 \strokec16 class\cf12 \strokec12  \cf15 \strokec15 ListThreeIntSumToZeroTest\cf9 \strokec9 (\cf13 \strokec13 unittest\cf9 \strokec9 .\cf13 \strokec13 TestCase\cf9 \strokec9 ):\cf12 \strokec12 \
    \cf13 \strokec13 def\cf12 \strokec12  \cf15 \strokec15 setUp\cf9 \strokec9 (\cf16 \strokec16 self\cf9 \strokec9 ):\cf12 \strokec12 \
        \cf16 \strokec16 self\cf9 \strokec9 .\cf13 \strokec13 A\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf9 \strokec9 [\cf11 \strokec11 0\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 1\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 2\cf9 \strokec9 ,\cf12 \strokec12  \cf9 \strokec9 -\cf11 \strokec11 2\cf9 \strokec9 ,\cf12 \strokec12  \cf9 \strokec9 -\cf11 \strokec11 1\cf9 \strokec9 ]\cf12 \strokec12 \
        \cf16 \strokec16 self\cf9 \strokec9 .\cf13 \strokec13 expected_solutions\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf9 \strokec9 [\cf12 \strokec12 \
            \cf9 \strokec9 [\cf11 \strokec11 0\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 0\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 0\cf9 \strokec9 ],\cf12 \strokec12 \
            \cf9 \strokec9 [\cf11 \strokec11 0\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 1\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 4\cf9 \strokec9 ],\cf12 \strokec12 \
            \cf9 \strokec9 [\cf11 \strokec11 0\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 2\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 3\cf9 \strokec9 ],\cf12 \strokec12 \
            \cf9 \strokec9 [\cf11 \strokec11 1\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 1\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 3\cf9 \strokec9 ],\cf12 \strokec12 \
            \cf9 \strokec9 [\cf11 \strokec11 2\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 4\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 4\cf9 \strokec9 ],\cf12 \strokec12 \
        \cf9 \strokec9 ]\cf12 \strokec12 \
\
    \cf13 \strokec13 def\cf12 \strokec12  \cf15 \strokec15 check\cf9 \strokec9 (\cf16 \strokec16 self\cf9 \strokec9 ,\cf12 \strokec12  \cf13 \strokec13 solutions\cf9 \strokec9 ,\cf12 \strokec12  \cf13 \strokec13 expected_solutions\cf9 \strokec9 ):\cf12 \strokec12 \
        \cf16 \strokec16 for\cf12 \strokec12  \cf13 \strokec13 t\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf13 \strokec13 solutions\cf9 \strokec9 :\cf12 \strokec12 \
            \cf16 \strokec16 self\cf9 \strokec9 .\cf15 \strokec15 assertIn\cf9 \strokec9 (\cf15 \strokec15 sorted\cf9 \strokec9 (\cf13 \strokec13 t\cf9 \strokec9 ),\cf12 \strokec12  \cf13 \strokec13 expected_solutions\cf9 \strokec9 )\cf12 \strokec12 \
\
    \cf13 \strokec13 def\cf12 \strokec12  \cf15 \strokec15 test_naive\cf9 \strokec9 (\cf16 \strokec16 self\cf9 \strokec9 ):\cf12 \strokec12 \
        \cf13 \strokec13 solutions\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf15 \strokec15 list_three_int_sum_to_zero_naive\cf9 \strokec9 (\cf16 \strokec16 self\cf9 \strokec9 .\cf13 \strokec13 A\cf9 \strokec9 )\cf12 \strokec12 \
        \cf16 \strokec16 self\cf9 \strokec9 .\cf15 \strokec15 check\cf9 \strokec9 (\cf13 \strokec13 solutions\cf9 \strokec9 ,\cf12 \strokec12  \cf16 \strokec16 self\cf9 \strokec9 .\cf13 \strokec13 expected_solutions\cf9 \strokec9 )\cf12 \strokec12 \
\
    \cf13 \strokec13 def\cf12 \strokec12  \cf15 \strokec15 test_hashtable\cf9 \strokec9 (\cf16 \strokec16 self\cf9 \strokec9 ):\cf12 \strokec12 \
        \cf13 \strokec13 solutions\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf15 \strokec15 list_three_int_sum_to_zero_hashtable\cf9 \strokec9 (\cf16 \strokec16 self\cf9 \strokec9 .\cf13 \strokec13 A\cf9 \strokec9 )\cf12 \strokec12 \
        \cf16 \strokec16 self\cf9 \strokec9 .\cf15 \strokec15 check\cf9 \strokec9 (\cf13 \strokec13 solutions\cf9 \strokec9 ,\cf12 \strokec12  \cf16 \strokec16 self\cf9 \strokec9 .\cf13 \strokec13 expected_solutions\cf9 \strokec9 )\cf12 \strokec12 \
\
    \cf13 \strokec13 def\cf12 \strokec12  \cf15 \strokec15 test_optimal\cf9 \strokec9 (\cf16 \strokec16 self\cf9 \strokec9 ):\cf12 \strokec12 \
        \cf17 \strokec17 # The set of expected solutions is different here, because the function\cf12 \strokec12 \
        \cf17 \strokec17 # sorts the list; when sorted, it looks like [-2, -1, 0, 1, 2].\cf12 \strokec12 \
        \cf13 \strokec13 expected_solutions\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf9 \strokec9 [\cf12 \strokec12 \
            \cf9 \strokec9 [\cf11 \strokec11 0\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 2\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 4\cf9 \strokec9 ],\cf12 \strokec12 \
            \cf9 \strokec9 [\cf11 \strokec11 1\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 2\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 3\cf9 \strokec9 ],\cf12 \strokec12 \
            \cf9 \strokec9 [\cf11 \strokec11 2\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 2\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 2\cf9 \strokec9 ],\cf12 \strokec12 \
            \cf9 \strokec9 [\cf11 \strokec11 0\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 3\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 3\cf9 \strokec9 ],\cf12 \strokec12 \
            \cf9 \strokec9 [\cf11 \strokec11 1\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 1\cf9 \strokec9 ,\cf12 \strokec12  \cf11 \strokec11 4\cf9 \strokec9 ],\cf12 \strokec12 \
        \cf9 \strokec9 ]\cf12 \strokec12 \
        \cf13 \strokec13 solutions\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf15 \strokec15 list_three_int_sum_to_zero\cf9 \strokec9 (\cf16 \strokec16 self\cf9 \strokec9 .\cf13 \strokec13 A\cf9 \strokec9 )\cf12 \strokec12 \
        \cf16 \strokec16 self\cf9 \strokec9 .\cf15 \strokec15 check\cf9 \strokec9 (\cf13 \strokec13 solutions\cf9 \strokec9 ,\cf12 \strokec12  \cf13 \strokec13 expected_solutions\cf9 \strokec9 )\cf12 \strokec12 \
\
\pard\pardeftab720\sl280\partightenfactor0
\cf13 \strokec13 def\cf12 \strokec12  \cf15 \strokec15 run_tests\cf9 \strokec9 ():\cf12 \strokec12 \
    \cf13 \strokec13 suite\cf12 \strokec12  \cf9 \strokec9 =\cf12 \strokec12  \cf13 \strokec13 unittest\cf9 \strokec9 .\cf15 \strokec15 TestLoader\cf9 \strokec9 ().\cf15 \strokec15 loadTestsFromTestCase\cf9 \strokec9 (\cf13 \strokec13 ListThreeIntSumToZeroTest\cf9 \strokec9 )\cf12 \strokec12 \
    \cf13 \strokec13 unittest\cf9 \strokec9 .\cf15 \strokec15 TextTestRunner\cf9 \strokec9 ().\cf15 \strokec15 run\cf9 \strokec9 (\cf13 \strokec13 suite\cf9 \strokec9 )\cf12 \strokec12 \
}