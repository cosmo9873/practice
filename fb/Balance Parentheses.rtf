{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\fswiss\fcharset0 Helvetica;\f4\fswiss\fcharset0 Helvetica-Bold;\f5\fnil\fcharset0 Monaco;
\f6\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red21\green23\blue25;\red255\green255\blue255;\red52\green56\blue63;
\red78\green84\blue93;\red41\green67\blue135;\red22\green25\blue31;\red6\green50\blue15;\red252\green244\blue202;
\red152\green18\blue15;\red98\green83\blue14;\red0\green0\blue0;\red0\green0\blue82;\red152\green46\blue3;
\red12\green95\blue32;\red76\green12\blue1;\red83\green83\blue83;\red38\green38\blue38;\red228\green230\blue234;
}
{\*\expandedcolortbl;;\cssrgb\c10980\c11765\c12941;\cssrgb\c100000\c100000\c100000;\cssrgb\c26667\c28627\c31373;
\cssrgb\c37647\c40392\c43922;\cssrgb\c21176\c34510\c60000;\cssrgb\c11373\c12941\c16078;\cssrgb\c0\c25098\c7059;\cssrgb\c99216\c96078\c83137;
\cssrgb\c66667\c13333\c6667;\cssrgb\c46275\c39608\c6275;\cssrgb\c0\c0\c0;\cssrgb\c0\c3922\c39608;\cssrgb\c66667\c25098\c0;
\cssrgb\c0\c43922\c16471;\cssrgb\c37647\c7059\c0;\cssrgb\c40000\c40000\c40000;\cssrgb\c20000\c20000\c20000;\cssrgb\c91373\c92157\c93333;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Balance Parentheses\
\pard\pardeftab720\sl520\qc\partightenfactor0

\f1\i\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl520\qc\partightenfactor0
\cf4 \strokec4 \
\pard\pardeftab720\sl520\qc\partightenfactor0

\f0\i0 \cf4 More Items\
\pard\pardeftab720\sl320\partightenfactor0

\f1\b0 \cf5 \strokec5 Owner:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/profile/?id=4807645"}}{\fldrslt \cf6 \strokec6 Jonathan Coens}}\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Medium\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Ninja\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 General\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \strokec2 Description\
\pard\pardeftab720\sl280\partightenfactor0

\f3\b0\fs24 \cf7 \strokec7 Given a string with alpha-numeric characters and parentheses, return a string with balanced parentheses by removing the fewest characters possible. You cannot add anything to the string.\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \strokec2 Question Statement\
\pard\pardeftab720\sl540\sa160\partightenfactor0

\f4\fs36 \cf7 \strokec7 Question\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1038826512878589#question"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 Given a string with alpha-numeric characters and parentheses, return a string with balanced parentheses by removing the fewest characters possible. You cannot add anything to the string.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 Examples if needed\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1038826512878589#examples-if-needed"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\partightenfactor0

\f5\b0\fs20 \cf8 \cb9 \strokec8 balance\cf10 \strokec10 (\cf11 \strokec11 "()"\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 ->\cf12 \strokec12  \cf11 \strokec11 "()"\cf12 \strokec12 \
  \cf8 \strokec8 balance\cf10 \strokec10 (\cf11 \strokec11 "a(b)c)"\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 ->\cf12 \strokec12  \cf11 \strokec11 "a(b)c"\cf12 \strokec12 \
  \cf8 \strokec8 balance\cf10 \strokec10 (\cf11 \strokec11 ")("\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 ->\cf12 \strokec12  \cf11 \strokec11 ""\cf12 \strokec12 \
  \cf8 \strokec8 balance\cf10 \strokec10 (\cf11 \strokec11 "((((("\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 ->\cf12 \strokec12  \cf11 \strokec11 ""\cf12 \strokec12 \
  \cf8 \strokec8 balance\cf10 \strokec10 (\cf11 \strokec11 "(()()("\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 ->\cf12 \strokec12  \cf11 \strokec11 "()()"\cf12 \strokec12 \
  \cf8 \strokec8 balance\cf10 \strokec10 (\cf11 \strokec11 ")(())("\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 ->\cf12 \strokec12  \cf11 \strokec11 "(())"\cf12 \strokec12 \
  \cf8 \strokec8 balance\cf10 \strokec10 (\cf11 \strokec11 ")())(()()("\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 ->\cf12 \strokec12  \cf11 \strokec11 "()()()"\cf12 \strokec12 \
  \
\pard\pardeftab720\sl280\partightenfactor0
\cf13 \strokec13 There\cf12 \strokec12  \cf13 \strokec13 can\cf12 \strokec12  \cf13 \strokec13 be\cf12 \strokec12  \cf13 \strokec13 multiple\cf12 \strokec12  \cf13 \strokec13 correct\cf12 \strokec12  \cf13 \strokec13 results\cf12 \strokec12  \cf13 \strokec13 per\cf12 \strokec12  \cf13 \strokec13 input\cf12 \strokec12 \
\
  \cf8 \strokec8 balance\cf10 \strokec10 (\cf11 \strokec11 "(())())"\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 ->\cf12 \strokec12  \cf11 \strokec11 "(()())"\cf12 \strokec12  \cf14 \strokec14 or\cf12 \strokec12  \cf11 \strokec11 "(())()"\cf12 \strokec12 \
\pard\pardeftab720\sl540\sa160\partightenfactor0

\f4\b\fs36 \cf7 \cb1 \strokec7 What to Expect\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1038826512878589#what-to-expect"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\fs33 \cf7 Pros\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1038826512878589#pros"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 I like this question because:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 There are several different possible solutions with varying asymptotic time and space complexity.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Provides a lot of room to push candidates given different constraints\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 In my personal experience of using this question over a few years, this has reliably separated candidates into the "hire" or "no hire" bucket.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 Cons\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1038826512878589#cons"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls2\ilvl0
\f3\b0\fs24 \cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Can be difficult to grasp at first. Multiple candidates have originally perceived this question as whether a string is balanced rather than fix the string.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Optimal solution can be a little hand-wavey and require non-generic data stuctures\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 Common Mistakes\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1038826512878589#common-mistakes"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls3\ilvl0
\f3\b0\fs24 \cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Candidates going for a stack-based solution think they need to push the character being saved ("(") instead of the index of the parenthesis, which is a dead-end and only increases code complexity.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Many candidates create 2 counters, one for opens and one for closes, when they really only need a count of opens that decrements on close.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 It's not uncommon for candidates to need a hint that doing something linear twice is still '''O(n)'''\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Using recursion uses '''O(n)''' space in the call stack even if an explicit stack isn't created\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Strings are immutable in a handful of languages, which can make things tricky\
\pard\pardeftab720\sl540\sa160\partightenfactor0

\f4\b\fs36 \cf7 Solutions\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1038826512878589#solutions"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\fs33 \cf7 Brute-force Match '''O(n^2)''' in time and '''O(n)''' in space\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1038826512878589#brute-force-match-o-n-2"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 Some candidate failed to recognize the stack-based approach and went down the path to do brute-force scans to find each matching pair of parentheses. This could work but is less efficient than the approaches below.\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf13 \cb9 \strokec13 char\cf10 \strokec10 []\cf12 \strokec12  \cf8 \strokec8 balance\cf10 \strokec10 (\cf13 \strokec13 char\cf10 \strokec10 []\cf12 \strokec12  \cf13 \strokec13 paren\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
  \cf13 \strokec13 boolean\cf10 \strokec10 []\cf12 \strokec12  \cf13 \strokec13 shouldKeep\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf14 \strokec14 new\cf12 \strokec12  \cf15 \strokec15 boolean\cf10 \strokec10 [\cf13 \strokec13 paren\cf10 \strokec10 .\cf13 \strokec13 length\cf10 \strokec10 ];\cf12 \strokec12 \
  \cf14 \strokec14 for\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 int\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 ;\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf10 \strokec10 <\cf12 \strokec12  \cf13 \strokec13 paren\cf10 \strokec10 .\cf13 \strokec13 length\cf10 \strokec10 ;\cf12 \strokec12  \cf13 \strokec13 i\cf10 \strokec10 ++)\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
       \cf14 \strokec14 if\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 paren\cf10 \strokec10 .\cf8 \strokec8 charAt\cf10 \strokec10 (\cf13 \strokec13 i\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf11 \strokec11 '('\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
           \cf14 \strokec14 for\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 int\cf12 \strokec12  \cf13 \strokec13 j\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf13 \strokec13 i\cf10 \strokec10 +\cf16 \strokec16 1\cf10 \strokec10 ;\cf12 \strokec12  \cf13 \strokec13 j\cf12 \strokec12  \cf10 \strokec10 <\cf12 \strokec12  \cf13 \strokec13 paren\cf10 \strokec10 .\cf13 \strokec13 length\cf10 \strokec10 ;\cf12 \strokec12  \cf13 \strokec13 j\cf10 \strokec10 ++)\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
                \cf14 \strokec14 if\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 paren\cf10 \strokec10 .\cf8 \strokec8 charAt\cf10 \strokec10 (\cf13 \strokec13 j\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf11 \strokec11 ')'\cf12 \strokec12  \cf10 \strokec10 &&\cf12 \strokec12  \cf13 \strokec13 shouldKeep\cf10 \strokec10 [\cf13 \strokec13 j\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf13 \strokec13 false\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
                     \cf13 \strokec13 shouldKeep\cf10 \strokec10 [\cf13 \strokec13 j\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf13 \strokec13 true\cf10 \strokec10 ;\cf12 \strokec12 \
                     \cf13 \strokec13 shouldKeep\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf13 \strokec13 true\cf10 \strokec10 ;\cf12 \strokec12      \
                     \cf14 \strokec14 break\cf10 \strokec10 ;\cf12 \strokec12 \
                \cf10 \strokec10 \}\cf12 \strokec12 \
           \cf10 \strokec10 \}\cf12 \strokec12 \
      \cf10 \strokec10 \}\cf12 \strokec12 \
  \cf10 \strokec10 \}\cf12 \strokec12 \
  \cf13 \strokec13 char\cf10 \strokec10 []\cf12 \strokec12  \cf13 \strokec13 result\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf14 \strokec14 new\cf12 \strokec12  \cf15 \strokec15 char\cf10 \strokec10 [\cf13 \strokec13 paren\cf10 \strokec10 .\cf13 \strokec13 length\cf10 \strokec10 ];\cf12 \strokec12 \
  \cf13 \strokec13 int\cf12 \strokec12  \cf13 \strokec13 j\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 ;\cf12 \strokec12 \
  \cf14 \strokec14 for\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 int\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 ;\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf10 \strokec10 <\cf12 \strokec12  \cf13 \strokec13 paren\cf10 \strokec10 .\cf13 \strokec13 length\cf10 \strokec10 ;\cf12 \strokec12  \cf13 \strokec13 i\cf10 \strokec10 ++)\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
      \cf17 \strokec17 // should remain the non-parentheses\cf12 \strokec12 \
      \cf14 \strokec14 if\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 shouldKeep\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 ||\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 paren\cf10 \strokec10 .\cf8 \strokec8 charAt\cf10 \strokec10 (\cf13 \strokec13 i\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 !==\cf12 \strokec12  \cf11 \strokec11 '('\cf12 \strokec12  \cf10 \strokec10 &&\cf12 \strokec12  \cf13 \strokec13 paren\cf10 \strokec10 .\cf8 \strokec8 charAt\cf10 \strokec10 (\cf13 \strokec13 i\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 !==\cf12 \strokec12  \cf11 \strokec11 ')'\cf10 \strokec10 ))\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
           \cf13 \strokec13 result\cf10 \strokec10 [\cf13 \strokec13 j\cf10 \strokec10 ++]\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf13 \strokec13 paren\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ];\cf12 \strokec12 \
      \cf10 \strokec10 \}\cf12 \strokec12 \
  \cf10 \strokec10 \}\cf12 \strokec12 \
  \cf14 \strokec14 return\cf12 \strokec12  \cf13 \strokec13 result\cf10 \strokec10 ;\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf10 \strokec10 \}\cf12 \strokec12 \
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 \cb1 \strokec7 Stack Based '''O(n)''' in time and '''O(n)''' in space\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1038826512878589#stack-based-o-n-in-time"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 At minimum, I expect candidates to come up with this solution, fully code it, and correctly analyze its time and space complexities.\
Key Insight: Using a stack to keep track of currently opened parentheses allows you to remove extraneous close parens when the stack is empty and identify which open parens are allowed to be removed. The string contains only alpha-numeric characters, so a garbage character can be used.\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf13 \cb9 \strokec13 def\cf12 \strokec12  \cf8 \strokec8 balance\cf10 \strokec10 (\cf13 \strokec13 str\cf10 \strokec10 ):\cf12 \strokec12 \
  \cf13 \strokec13 str\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf14 \strokec14 list\cf10 \strokec10 (\cf13 \strokec13 str\cf10 \strokec10 )\cf12 \strokec12 \
  \cf13 \strokec13 stack\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf10 \strokec10 []\cf12 \strokec12 \
  \cf14 \strokec14 for\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf8 \strokec8 range\cf10 \strokec10 (\cf8 \strokec8 len\cf10 \strokec10 (\cf13 \strokec13 str\cf10 \strokec10 )):\cf12 \strokec12 \
    \cf14 \strokec14 if\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf11 \strokec11 '('\cf10 \strokec10 :\cf12 \strokec12 \
      \cf13 \strokec13 stack\cf10 \strokec10 .\cf8 \strokec8 append\cf10 \strokec10 (\cf13 \strokec13 i\cf10 \strokec10 )\cf12 \strokec12 \
    \cf13 \strokec13 elif\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf11 \strokec11 ')'\cf10 \strokec10 :\cf12 \strokec12 \
      \cf14 \strokec14 if\cf12 \strokec12  \cf14 \strokec14 not\cf12 \strokec12  \cf13 \strokec13 stack\cf10 \strokec10 :\cf12 \strokec12 \
        \cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf11 \strokec11 '*'\cf12 \strokec12 \
      \cf14 \strokec14 else\cf10 \strokec10 :\cf12 \strokec12 \
        \cf13 \strokec13 stack\cf10 \strokec10 .\cf8 \strokec8 pop\cf10 \strokec10 ()\cf12 \strokec12 \
\
  \cf14 \strokec14 for\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf13 \strokec13 stack\cf10 \strokec10 :\cf12 \strokec12 \
    \cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf11 \strokec11 '*'\cf12 \strokec12 \
\
  \cf14 \strokec14 return\cf12 \strokec12  \cf11 \strokec11 ''\cf10 \strokec10 .\cf8 \strokec8 join\cf10 \strokec10 (\cf13 \strokec13 str\cf10 \strokec10 ).\cf8 \strokec8 replace\cf10 \strokec10 (\cf11 \strokec11 '*'\cf10 \strokec10 ,\cf12 \strokec12  \cf11 \strokec11 ''\cf10 \strokec10 )\cf12 \strokec12 \
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 \cb1 \strokec7 Back And Forth '''O(n)''' in time, not in-place\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1038826512878589#back-and-forth-o-n-in-ti"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 Key Insight: The stack is unnecessary as the size of the stack is the only thing you really need. Combine that with running the same algorithm a second time in reverse yields no extra space. You can also just remove the first '''k''' opens parens from the right , where '''k''' is the number of left-over open parens.\
Coding up one of these solutions is usually my bar for hire on new grads. I expect industry candidates to get further into the optimal solution.\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf17 \cb9 \strokec17 # For brevity I'm treating strings as mutable in python. Points if candidates can grapple with this appropriately\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf13 \strokec13 def\cf12 \strokec12  \cf8 \strokec8 balanceBetter1\cf10 \strokec10 (\cf13 \strokec13 str\cf10 \strokec10 ):\cf12 \strokec12 \
  \cf13 \strokec13 c\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf16 \strokec16 0\cf12 \strokec12 \
  \cf14 \strokec14 for\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf8 \strokec8 range\cf10 \strokec10 (\cf8 \strokec8 len\cf10 \strokec10 (\cf13 \strokec13 str\cf10 \strokec10 )):\cf12 \strokec12 \
    \cf14 \strokec14 if\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf11 \strokec11 '('\cf10 \strokec10 :\cf12 \strokec12 \
      \cf13 \strokec13 c\cf12 \strokec12  \cf10 \strokec10 +=\cf12 \strokec12  \cf16 \strokec16 1\cf12 \strokec12 \
    \cf13 \strokec13 elif\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf11 \strokec11 ')'\cf10 \strokec10 :\cf12 \strokec12 \
      \cf14 \strokec14 if\cf12 \strokec12  \cf13 \strokec13 c\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 :\cf12 \strokec12 \
        \cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf11 \strokec11 '*'\cf12 \strokec12 \
      \cf14 \strokec14 else\cf10 \strokec10 :\cf12 \strokec12 \
        \cf13 \strokec13 c\cf12 \strokec12  \cf10 \strokec10 -=\cf12 \strokec12  \cf16 \strokec16 1\cf12 \strokec12 \
\
  \cf17 \strokec17 # go backward\cf12 \strokec12 \
  \cf13 \strokec13 c\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf16 \strokec16 0\cf12 \strokec12 \
  \cf14 \strokec14 for\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf8 \strokec8 range\cf10 \strokec10 (\cf8 \strokec8 len\cf10 \strokec10 (\cf13 \strokec13 str\cf10 \strokec10 )-\cf16 \strokec16 1\cf10 \strokec10 ,\cf12 \strokec12  \cf10 \strokec10 -\cf16 \strokec16 1\cf10 \strokec10 ,\cf12 \strokec12  \cf10 \strokec10 -\cf16 \strokec16 1\cf10 \strokec10 ):\cf12 \strokec12 \
    \cf14 \strokec14 if\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf11 \strokec11 ')'\cf10 \strokec10 :\cf12 \strokec12 \
      \cf13 \strokec13 c\cf12 \strokec12  \cf10 \strokec10 +=\cf12 \strokec12  \cf16 \strokec16 1\cf12 \strokec12 \
    \cf13 \strokec13 elif\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf11 \strokec11 '('\cf10 \strokec10 :\cf12 \strokec12 \
      \cf14 \strokec14 if\cf12 \strokec12  \cf13 \strokec13 c\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 :\cf12 \strokec12 \
        \cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf11 \strokec11 '*'\cf12 \strokec12 \
      \cf14 \strokec14 else\cf10 \strokec10 :\cf12 \strokec12 \
        \cf13 \strokec13 c\cf12 \strokec12  \cf10 \strokec10 -=\cf12 \strokec12  \cf16 \strokec16 1\cf12 \strokec12 \
\
  \cf14 \strokec14 return\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 .\cf8 \strokec8 replace\cf10 \strokec10 (\cf11 \strokec11 '*'\cf10 \strokec10 ,\cf12 \strokec12  \cf11 \strokec11 ''\cf10 \strokec10 )\cf12 \strokec12 \
\
\pard\pardeftab720\sl280\partightenfactor0
\cf17 \strokec17 # For brevity I'm treating strings as mutable in python. Points if candidates can grapple with this appropriately\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf13 \strokec13 def\cf12 \strokec12  \cf8 \strokec8 balanceBetter2\cf10 \strokec10 (\cf13 \strokec13 str\cf10 \strokec10 ):\cf12 \strokec12 \
  \cf13 \strokec13 c\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf16 \strokec16 0\cf12 \strokec12 \
  \cf14 \strokec14 for\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf8 \strokec8 range\cf10 \strokec10 (\cf8 \strokec8 len\cf10 \strokec10 (\cf13 \strokec13 str\cf10 \strokec10 )):\cf12 \strokec12 \
    \cf14 \strokec14 if\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf11 \strokec11 '('\cf10 \strokec10 :\cf12 \strokec12 \
      \cf13 \strokec13 c\cf12 \strokec12  \cf10 \strokec10 +=\cf12 \strokec12  \cf16 \strokec16 1\cf12 \strokec12 \
    \cf13 \strokec13 elif\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf11 \strokec11 ')'\cf10 \strokec10 :\cf12 \strokec12 \
      \cf14 \strokec14 if\cf12 \strokec12  \cf13 \strokec13 c\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 :\cf12 \strokec12 \
        \cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf11 \strokec11 '*'\cf12 \strokec12 \
      \cf14 \strokec14 else\cf10 \strokec10 :\cf12 \strokec12 \
        \cf13 \strokec13 c\cf12 \strokec12  \cf10 \strokec10 -=\cf12 \strokec12  \cf16 \strokec16 1\cf12 \strokec12 \
\
  \cf17 \strokec17 # remove the right-most open parens as they're guaranteed to have extra ones further left\cf12 \strokec12 \
  \cf14 \strokec14 for\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf13 \strokec13 in\cf12 \strokec12  \cf8 \strokec8 range\cf10 \strokec10 (\cf8 \strokec8 len\cf10 \strokec10 (\cf13 \strokec13 str\cf10 \strokec10 )-\cf16 \strokec16 1\cf10 \strokec10 ,\cf12 \strokec12  \cf10 \strokec10 -\cf16 \strokec16 1\cf10 \strokec10 ,\cf12 \strokec12  \cf10 \strokec10 -\cf16 \strokec16 1\cf10 \strokec10 ):\cf12 \strokec12 \
    \cf14 \strokec14 if\cf12 \strokec12  \cf13 \strokec13 c\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 :\cf12 \strokec12 \
      \cf14 \strokec14 break\cf12 \strokec12 \
    \cf14 \strokec14 if\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf11 \strokec11 '('\cf10 \strokec10 :\cf12 \strokec12 \
      \cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf11 \strokec11 '*'\cf12 \strokec12 \
      \cf13 \strokec13 c\cf12 \strokec12  \cf10 \strokec10 -=\cf12 \strokec12  \cf16 \strokec16 1\cf12 \strokec12 \
\
  \cf14 \strokec14 return\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 .\cf8 \strokec8 replace\cf10 \strokec10 (\cf11 \strokec11 '*'\cf10 \strokec10 ,\cf12 \strokec12  \cf11 \strokec11 ''\cf10 \strokec10 )\cf12 \strokec12 \
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 \cb1 \strokec7 Back And Forth '''O(n)''' in time and '''O(1)''' in space, in-place\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1038826512878589#back-and-forth-o-n-in-ti-1"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 Key Insight: Strings actually are immutable, and python's ''replace'' creates a brand-new string. Using 2 indexes you can front-load everything in the same slot of memory.\
Caveat: This generally requires low-level management of the array rather than some higher-level string data structure\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf13 \cb9 \strokec13 void\cf12 \strokec12  \cf8 \strokec8 balanceInPlace\cf10 \strokec10 (\cf13 \strokec13 string\cf10 \strokec10 &\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
  \cf13 \strokec13 int\cf12 \strokec12  \cf13 \strokec13 c\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 ;\cf12 \strokec12 \
  \cf14 \strokec14 for\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 int\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 ;\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf10 \strokec10 <\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 .\cf8 \strokec8 length\cf10 \strokec10 ();\cf12 \strokec12  \cf13 \strokec13 i\cf10 \strokec10 ++)\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
    \cf14 \strokec14 if\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf11 \strokec11 '('\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
      \cf13 \strokec13 c\cf10 \strokec10 ++;\cf12 \strokec12 \
    \cf10 \strokec10 \}\cf12 \strokec12  \cf14 \strokec14 else\cf12 \strokec12  \cf14 \strokec14 if\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf11 \strokec11 ')'\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
      \cf14 \strokec14 if\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 c\cf12 \strokec12  \cf10 \strokec10 >\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
        \cf13 \strokec13 c\cf10 \strokec10 --;\cf12 \strokec12 \
      \cf10 \strokec10 \}\cf12 \strokec12  \cf14 \strokec14 else\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
        \cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf11 \strokec11 '*'\cf10 \strokec10 ;\cf12 \strokec12 \
      \cf10 \strokec10 \}\cf12 \strokec12 \
    \cf10 \strokec10 \}\cf12 \strokec12 \
  \cf10 \strokec10 \}\cf12 \strokec12 \
\
  \cf14 \strokec14 for\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 int\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 .\cf8 \strokec8 length\cf10 \strokec10 ()\cf12 \strokec12  \cf10 \strokec10 -\cf12 \strokec12  \cf16 \strokec16 1\cf10 \strokec10 ;\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf10 \strokec10 >=\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 ;\cf12 \strokec12  \cf13 \strokec13 i\cf10 \strokec10 --)\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
    \cf14 \strokec14 if\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 c\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
      \cf14 \strokec14 break\cf10 \strokec10 ;\cf12 \strokec12 \
    \cf10 \strokec10 \}\cf12 \strokec12 \
    \cf14 \strokec14 if\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf11 \strokec11 '('\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
      \cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf11 \strokec11 '*'\cf10 \strokec10 ;\cf12 \strokec12 \
      \cf13 \strokec13 c\cf10 \strokec10 --;\cf12 \strokec12 \
    \cf10 \strokec10 \}\cf12 \strokec12 \
  \cf10 \strokec10 \}\cf12 \strokec12 \
\
  \cf13 \strokec13 int\cf12 \strokec12  \cf13 \strokec13 j\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 ;\cf12 \strokec12 \
  \cf14 \strokec14 for\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 int\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 ;\cf12 \strokec12  \cf13 \strokec13 i\cf12 \strokec12  \cf10 \strokec10 <\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 .\cf8 \strokec8 length\cf10 \strokec10 ();\cf12 \strokec12  \cf13 \strokec13 i\cf10 \strokec10 ++)\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
    \cf14 \strokec14 if\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ]\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf11 \strokec11 '*'\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
      \cf14 \strokec14 continue\cf10 \strokec10 ;\cf12 \strokec12 \
    \cf10 \strokec10 \}\cf12 \strokec12 \
    \cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 j\cf10 \strokec10 ++]\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 [\cf13 \strokec13 i\cf10 \strokec10 ];\cf12 \strokec12 \
  \cf10 \strokec10 \}\cf12 \strokec12 \
\
  \cf13 \strokec13 str\cf10 \strokec10 .\cf8 \strokec8 resize\cf10 \strokec10 (\cf13 \strokec13 j\cf10 \strokec10 );\cf12 \strokec12   \cf17 \strokec17 // This is still O(1) in space\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf10 \strokec10 \}\cf12 \strokec12 \
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 \cb1 \strokec7 Back And Forth ''Optimal'' '''O(n)''' in time and '''O(1)''' in space, in-place\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1038826512878589#back-and-forth-optimal-o"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 These two solutions only require one pass for counting and one pass for mutation. It's not necessary to use a third pass nor to rely on a sentinel character like <tt>*</tt>.\
Also note that a C++11 function can still support an in-place modification, even though it doesn't take its argument by reference. If the caller provides a temporary value or an explicit rvalue reference (via\'a0
\f6 \cf18 \cb19 \strokec18 std::move
\f3 \cf7 \cb1 \strokec7 ) then the compiler will optimize away all copies. If the caller provides an lvalue, which might not be safe to modify in-place anyway, then the compiler falls back to making a single copy.\
Key Insight: With one pass you can count the number of each type of parentheses to preserve and to remove. With a second pass you can do all the mutations in-place. Remove all the right-most open parentheses and remove all the left-most close parentheses.\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf13 \cb9 \strokec13 string\cf12 \strokec12  \cf8 \strokec8 balanceShorter\cf10 \strokec10 (\cf13 \strokec13 string\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
  \cf13 \strokec13 int\cf12 \strokec12  \cf13 \strokec13 current_nest\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 ,\cf12 \strokec12  \cf13 \strokec13 valid_nest_count\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 ,\cf12 \strokec12  \cf13 \strokec13 excess_close_count\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 ;\cf12 \strokec12 \
  \cf14 \strokec14 for\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 char\cf12 \strokec12  \cf13 \strokec13 ch\cf12 \strokec12  \cf10 \strokec10 :\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
    \cf14 \strokec14 switch\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 ch\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
    \cf14 \strokec14 case\cf12 \strokec12  \cf11 \strokec11 '('\cf10 \strokec10 :\cf12 \strokec12 \
      \cf10 \strokec10 ++\cf13 \strokec13 current_nest\cf10 \strokec10 ;\cf12 \strokec12 \
      \cf14 \strokec14 break\cf10 \strokec10 ;\cf12 \strokec12 \
    \cf14 \strokec14 case\cf12 \strokec12  \cf11 \strokec11 ')'\cf10 \strokec10 :\cf12 \strokec12 \
      \cf14 \strokec14 if\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 current_nest\cf12 \strokec12  \cf10 \strokec10 >\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
        \cf10 \strokec10 --\cf13 \strokec13 current_nest\cf10 \strokec10 ;\cf12 \strokec12 \
        \cf10 \strokec10 ++\cf13 \strokec13 valid_nest_count\cf10 \strokec10 ;\cf12 \strokec12 \
      \cf10 \strokec10 \}\cf12 \strokec12  \cf14 \strokec14 else\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
        \cf10 \strokec10 ++\cf13 \strokec13 excess_close_count\cf10 \strokec10 ;\cf12 \strokec12 \
      \cf10 \strokec10 \}\cf12 \strokec12 \
      \cf14 \strokec14 break\cf10 \strokec10 ;\cf12 \strokec12 \
    \cf10 \strokec10 \}\cf12 \strokec12  \
  \cf10 \strokec10 \}\cf12 \strokec12 \
\
  \cf13 \strokec13 auto\cf12 \strokec12  \cf13 \strokec13 cursor\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 .\cf8 \strokec8 begin\cf10 \strokec10 ();\cf12 \strokec12 \
  \cf14 \strokec14 for\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 char\cf12 \strokec12  \cf13 \strokec13 ch\cf12 \strokec12  \cf10 \strokec10 :\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
    \cf14 \strokec14 switch\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 ch\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
    \cf14 \strokec14 case\cf12 \strokec12  \cf11 \strokec11 '('\cf10 \strokec10 :\cf12 \strokec12 \
      \cf14 \strokec14 if\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 valid_nest_count\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
        \cf14 \strokec14 continue\cf10 \strokec10 ;\cf12 \strokec12 \
      \cf10 \strokec10 \}\cf12 \strokec12 \
      \cf10 \strokec10 --\cf13 \strokec13 valid_nest_count\cf10 \strokec10 ;\cf12 \strokec12 \
      \cf14 \strokec14 break\cf10 \strokec10 ;\cf12 \strokec12 \
    \cf14 \strokec14 case\cf12 \strokec12  \cf11 \strokec11 ')'\cf10 \strokec10 :\cf12 \strokec12 \
      \cf14 \strokec14 if\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 excess_close_count\cf12 \strokec12  \cf10 \strokec10 >\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
        \cf10 \strokec10 --\cf13 \strokec13 excess_close_count\cf10 \strokec10 ;\cf12 \strokec12 \
        \cf14 \strokec14 continue\cf10 \strokec10 ;\cf12 \strokec12 \
      \cf10 \strokec10 \}\cf12 \strokec12 \
      \cf14 \strokec14 break\cf10 \strokec10 ;\cf12 \strokec12 \
    \cf10 \strokec10 \}\cf12 \strokec12 \
    \cf10 \strokec10 *\cf13 \strokec13 cursor\cf10 \strokec10 ++\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf13 \strokec13 ch\cf10 \strokec10 ;\cf12 \strokec12 \
  \cf10 \strokec10 \}\cf12 \strokec12 \
\
  \cf13 \strokec13 str\cf10 \strokec10 .\cf8 \strokec8 erase\cf10 \strokec10 (\cf13 \strokec13 cursor\cf10 \strokec10 ,\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 .\cf8 \strokec8 end\cf10 \strokec10 ());\cf12 \strokec12 \
  \cf14 \strokec14 return\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 ;\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf10 \strokec10 \}\cf12 \strokec12 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf7 \cb1 \strokec7 This is the shortest solution, requiring only two passes and three variables.\
Key Insight: The only thing that isn't already known during the first pass is the count of remaining close parentheses. If that count is made during its own pass, then everything else can be tracked easily during the mutation pass.\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf13 \cb9 \strokec13 string\cf12 \strokec12  \cf8 \strokec8 balanceShortest\cf10 \strokec10 (\cf13 \strokec13 string\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
  \cf13 \strokec13 auto\cf12 \strokec12  \cf13 \strokec13 remaining_close\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf8 \strokec8 count\cf10 \strokec10 (\cf13 \strokec13 str\cf10 \strokec10 .\cf8 \strokec8 begin\cf10 \strokec10 (),\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 .\cf8 \strokec8 end\cf10 \strokec10 (),\cf12 \strokec12  \cf11 \strokec11 ')'\cf10 \strokec10 );\cf12 \strokec12 \
\
  \cf13 \strokec13 int\cf12 \strokec12  \cf13 \strokec13 current_nest\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 ;\cf12 \strokec12 \
  \cf13 \strokec13 auto\cf12 \strokec12  \cf13 \strokec13 cursor\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 .\cf8 \strokec8 begin\cf10 \strokec10 ();\cf12 \strokec12 \
  \cf14 \strokec14 for\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 char\cf12 \strokec12  \cf13 \strokec13 ch\cf12 \strokec12  \cf10 \strokec10 :\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
    \cf14 \strokec14 switch\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 ch\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
    \cf14 \strokec14 case\cf12 \strokec12  \cf11 \strokec11 '('\cf10 \strokec10 :\cf12 \strokec12 \
      \cf14 \strokec14 if\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 current_nest\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf13 \strokec13 remaining_close\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
        \cf17 \strokec17 // All the remaining close parentheses have been matched.\cf12 \strokec12 \
        \cf14 \strokec14 continue\cf10 \strokec10 ;\cf12 \strokec12 \
      \cf10 \strokec10 \}\cf12 \strokec12 \
      \cf10 \strokec10 ++\cf13 \strokec13 current_nest\cf10 \strokec10 ;\cf12 \strokec12 \
      \cf14 \strokec14 break\cf10 \strokec10 ;\cf12 \strokec12 \
    \cf14 \strokec14 case\cf12 \strokec12  \cf11 \strokec11 ')'\cf10 \strokec10 :\cf12 \strokec12 \
      \cf10 \strokec10 --\cf13 \strokec13 remaining_close\cf10 \strokec10 ;\cf12 \strokec12 \
      \cf14 \strokec14 if\cf12 \strokec12  \cf10 \strokec10 (\cf13 \strokec13 current_nest\cf12 \strokec12  \cf10 \strokec10 ==\cf12 \strokec12  \cf16 \strokec16 0\cf10 \strokec10 )\cf12 \strokec12  \cf10 \strokec10 \{\cf12 \strokec12 \
        \cf17 \strokec17 // There are no matching open parentheses before this.\cf12 \strokec12 \
        \cf14 \strokec14 continue\cf10 \strokec10 ;\cf12 \strokec12 \
      \cf10 \strokec10 \}\cf12 \strokec12 \
      \cf10 \strokec10 --\cf13 \strokec13 current_nest\cf10 \strokec10 ;\cf12 \strokec12 \
      \cf14 \strokec14 break\cf10 \strokec10 ;\cf12 \strokec12 \
    \cf10 \strokec10 \}\cf12 \strokec12 \
    \cf10 \strokec10 *\cf13 \strokec13 cursor\cf10 \strokec10 ++\cf12 \strokec12  \cf10 \strokec10 =\cf12 \strokec12  \cf13 \strokec13 ch\cf10 \strokec10 ;\cf12 \strokec12 \
  \cf10 \strokec10 \}\cf12 \strokec12 \
\
  \cf13 \strokec13 str\cf10 \strokec10 .\cf8 \strokec8 erase\cf10 \strokec10 (\cf13 \strokec13 cursor\cf10 \strokec10 ,\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 .\cf8 \strokec8 end\cf10 \strokec10 ());\cf12 \strokec12 \
  \cf14 \strokec14 return\cf12 \strokec12  \cf13 \strokec13 str\cf10 \strokec10 ;\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf10 \strokec10 \}\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0

\f3\fs24 \cf7 \cb1 \strokec7 Candidates coding in python can also achieve the same effect as 'resize' by simply receiving a list and then calling slice at the end to shrink the list. Slice only creates a new reference, it does not copy. (Note, slicing a string does generate a copy, but slicing a list does not)\
}