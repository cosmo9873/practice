{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fmodern\fcharset0 Courier;
\f3\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red22\green25\blue31;\red255\green255\blue255;\red41\green67\blue135;
\red42\green44\blue51;\red249\green249\blue249;\red66\green147\blue62;\red50\green94\blue238;\red143\green144\blue150;
\red147\green0\blue147;\red133\green85\blue4;}
{\*\expandedcolortbl;;\cssrgb\c11373\c12941\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c21176\c34510\c60000;
\cssrgb\c21961\c22745\c25882;\cssrgb\c98039\c98039\c98039;\cssrgb\c31373\c63137\c30980;\cssrgb\c25098\c47059\c94902;\cssrgb\c62745\c63137\c65490;
\cssrgb\c65098\c14902\c64314;\cssrgb\c59608\c40784\c392;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl860\partightenfactor0

\f0\b\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Burrows Wheeler Transform\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs42 \cf2 Burrows-Wheeler Transform\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 Burrows-Wheeler Transform (BWT) starts as an easy interview interview question but escalates to an extremely tough problem in part two. BWT is good at weeding out weak candidates and identifying really strong ones, but is hard for evaluating borderline candidates. I put the question out here because it's very novel and is useful for making a memorable impression on smart candidates. Therefore, I use this question only in on-sites for amazing candidates I want to sell.\'a0
\i Don't ask this question unless you have 50+ interviews under your belt and feel very comfortable identifying when you need to help the candidate, why, and how much helping the candidate should be considered a negative signal.
\i0 \cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f0\b \cf2 \cb3 \strokec2 Owner:
\f1\b0 \cf2 \strokec2 \'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/profile/?id=78203968"}}{\fldrslt \cf4 \strokec4 Nicolas Spiegelberg}}\cb1 \

\f0\b \cf2 \cb3 \strokec2 Difficulty:
\f1\b0 \cf2 \strokec2 \'a0Advanced. Should take full 35 minutes.\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 Introduction\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 Compression techniques work by finding repeated patterns in the data and encoding the duplications more compactly. The Burrows\'96Wheeler transform rearranges a character string into runs of similar characters. The transform is done by sorting all rotations of the text in lexicographic order (INCLUDING EOF), then taking the last column. For example:\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf5 \cb6 \strokec5 EOF = \cf7 \strokec7 '$'\cf5 \strokec5 \
\
\pard\pardeftab720\sl480\partightenfactor0
\cf8 \strokec8 >>> \cf5 \strokec5 bwt(\cf7 \strokec7 'gogo'\cf5 \strokec5 )\
\pard\pardeftab720\sl480\partightenfactor0

\f3\i \cf9 \strokec9 # rotation
\f2\i0 \cf5 \strokec5 \
gogo$\
ogo$g\
go$go\
o$gog\
$gogo\
\

\f3\i \cf9 \strokec9 #sort
\f2\i0 \cf5 \strokec5 \
$gogo\
go$go\
gogo$\
o$gog\
ogo$g\
\
bwt == \cf7 \strokec7 'oo$gg'\cf5 \strokec5 \
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb3 \strokec2 You should write the above manual solution on the board. I find it's easier just to bring in a paper with this code and walk through it with the candidate. Before jumping into coding, you can get some quick signal by asking the candidate to explain why a BWT results in character runs. (If you haven't figured out yet, BWT takes advantage of Markov Chains in word characters. You might hint about how often "the" or "es" occurs in a sentence.)\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 Part 1: Code BWT\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 Code the BWT function we just described. Tell the candidate that you want to know optimal time complexity, but their solution can have unnecessary copies for simplicity. Good candidates will recognize that 'C' is a crappy language for expressing this. C++ is passable but people can get bogged down in std::iterator and string slicing. I find that Python/C#/Perl is the most succinct in expression.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A bad candidate will spend the full 30 minutes here.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A good candidate will spend about 10-15 minutes here.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A great candidate will breeze through this. Make sure candidates identify big-O.\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b\fs36 \cf2 \cb3 \strokec2 Solution\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf5 \cb6 \strokec5 EOF = \cf7 \strokec7 '$'\cf5 \strokec5 \
\pard\pardeftab720\sl480\partightenfactor0
\cf10 \strokec10 def\cf5 \strokec5  \cf8 \strokec8 bwt\cf5 \strokec5 (str):\
  str += EOF\
  words = [str[i:] + str[:i] \cf10 \strokec10 for\cf5 \strokec5  i \cf10 \strokec10 in\cf5 \strokec5  xrange(len(str))]\
  words.sort()\
  \cf10 \strokec10 return\cf5 \strokec5  \cf7 \strokec7 ''\cf5 \strokec5 .join(w[\cf11 \strokec11 -1\cf5 \strokec5 ] \cf10 \strokec10 for\cf5 \strokec5  w \cf10 \strokec10 in\cf5 \strokec5  words)\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 \strokec2 Part 2: Reverse BWT\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 Now that you have the BWT string, is this reversible?\'a0
\i\b \cf2 \strokec2 Let the candidate think about this for a second and explain the rationale
\i0\b0 \cf2 \cb1 \strokec2 \
\cb3 Comment that it is reversible and ask them how. If the candidate is still speechless after 3-5 minutes, ask them if they know what the character after EOF is (hint, it's the first one)\cb1 \
\cb3 If the candidate starts picking up a solution, ask them to explain it to you at a high level and not worry about solving it right now.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls2\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A bad candidate will just be overwhelmed.\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A good candidate will start tracing the outline of one of the two below solutions.\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A strong candidate should be able to sketch out an initial solution skeleton, but they'll probably have a lot of bugs with index offset.\'a0
\f0\b INTERVIEWER MISTAKE: Don't let the candidate spent too much time on this part if they aren't making decent progress.
\f1\b0 \'a0If the candidate spends 10-15 minutes and can't start working towards a solution, then skip to part 3. If the candidate is making steady but slow progress, I find that get the best signal out of this section.\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b\fs36 \cf2 \cb3 \strokec2 Solution\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\fs30 \cf2 \cb3 \strokec2 STATELESS\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0 \cf2 \cb3 \strokec2 The stateless inverse transform repeatedly inserts bwt as the left column of the table and sorts the table. After the whole table is built, it returns the row that ends with EOF. I don't see candidates get this very often, but it's much easier to code. I'd let the candidate code this if identified, but ask them the big-O of this solution and if they can optimize afterwards.\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf5 \cb6 \strokec5 EOF = \cf7 \strokec7 '$'\cf5 \strokec5 \
\pard\pardeftab720\sl480\partightenfactor0
\cf10 \strokec10 def\cf5 \strokec5  \cf8 \strokec8 ibwt\cf5 \strokec5 (b):\
  tbl = [\cf7 \strokec7 ''\cf5 \strokec5 ] * len(b)\
  \cf10 \strokec10 for\cf5 \strokec5  i \cf10 \strokec10 in\cf5 \strokec5  range(len(b)):\
    tbl = sorted(b[x] + tbl[x] \cf10 \strokec10 for\cf5 \strokec5  x \cf10 \strokec10 in\cf5 \strokec5  range(len(b)))\
  filtered = [str \cf10 \strokec10 for\cf5 \strokec5  str \cf10 \strokec10 in\cf5 \strokec5  tbl \cf10 \strokec10 if\cf5 \strokec5  str[\cf11 \strokec11 -1\cf5 \strokec5 ] == EOF]\
  \cf10 \strokec10 return\cf5 \strokec5  filtered.pop(\cf11 \strokec11 0\cf5 \strokec5 )[:\cf11 \strokec11 -1\cf5 \strokec5 ]\
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 \strokec2 TRANSITION MAP\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0 \cf2 \cb3 \strokec2 This is the optimal solution since it directly jumps from one character to another instead of setting up a word grid. I see more candidates go down this path. However, it's very hard to handle jumping to the correct duplicate number. The solution is understood when you realize that a stable sort is required for both BWT and SortedBWT, so the n-th instance of a character in BWT maps to the n-th instance of the same character in SortedBWT. I normally give the candidate a pass if they struggle through the offset portion and make mistakes, as long as they recognize this problem and understand that it is a really tricky. I've seen a couple stellar candidates who are able to clearly express the solution. Start selling hard if you see this (or decipher if they found this from CareerCup)\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf5 \cb6 \strokec5 EOF = \cf7 \strokec7 '$'\cf5 \strokec5 \
\pard\pardeftab720\sl480\partightenfactor0
\cf10 \strokec10 def\cf5 \strokec5  \cf8 \strokec8 ibwt2\cf5 \strokec5 (bwt):\
  srt = sorted(bwt)\
  bwt_cnt = \{\}\
  srt_cnt = \{\}\
  map = \{\}\
  \cf10 \strokec10 for\cf5 \strokec5  i \cf10 \strokec10 in\cf5 \strokec5  range(len(bwt)):\
    next = (bwt[i], bwt_cnt.setdefault(bwt[i],\cf11 \strokec11 0\cf5 \strokec5 ))\
    prev = (srt[i], srt_cnt.setdefault(srt[i],\cf11 \strokec11 0\cf5 \strokec5 ))\
    bwt_cnt[bwt[i]] += \cf11 \strokec11 1\cf5 \strokec5 \
    srt_cnt[srt[i]] += \cf11 \strokec11 1\cf5 \strokec5 \
    map[prev] = next\
  cur_idx = map[(EOF,\cf11 \strokec11 0\cf5 \strokec5 )]\
  revstr = \cf7 \strokec7 ''\cf5 \strokec5 \
  \cf10 \strokec10 for\cf5 \strokec5  i \cf10 \strokec10 in\cf5 \strokec5  range(len(bwt) - \cf11 \strokec11 1\cf5 \strokec5 ):\
    revstr += cur_idx[\cf11 \strokec11 0\cf5 \strokec5 ]\
    cur_idx = map[cur_idx]\
  \cf10 \strokec10 return\cf5 \strokec5  \cf7 \strokec7 ''\cf5 \strokec5 .join(reversed(revstr))\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 \strokec2 Part 3: Run Length encoding\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 Given a bwt, write code to perform a run-lenth encoding on the string. Part 3 is easier than Part 2, so I like to switch to this for a borderline/stuck candidate to get more signal.\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 Notes{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/wiki/Engineering/Interviewing/Ninja/Burrows_Wheeler_Transform/#notes"}}{\fldrslt \cf4 \strokec4 #}}\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls3\ilvl0
\f1\b0\fs30 \cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Burrows%E2%80%93Wheeler_transform"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Wikipedia article}}\cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
}