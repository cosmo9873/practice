{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\fswiss\fcharset0 Helvetica;\f4\fswiss\fcharset0 Helvetica-Bold;\f5\fnil\fcharset0 Monaco;
\f6\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red21\green23\blue25;\red255\green255\blue255;\red52\green56\blue63;
\red78\green84\blue93;\red41\green67\blue135;\red22\green25\blue31;\red0\green0\blue82;\red252\green244\blue202;
\red152\green18\blue15;\red0\green0\blue0;\red152\green46\blue3;\red38\green38\blue38;\red228\green230\blue234;
\red6\green50\blue15;\red83\green83\blue83;\red76\green12\blue1;}
{\*\expandedcolortbl;;\cssrgb\c10980\c11765\c12941;\cssrgb\c100000\c100000\c100000;\cssrgb\c26667\c28627\c31373;
\cssrgb\c37647\c40392\c43922;\cssrgb\c21176\c34510\c60000;\cssrgb\c11373\c12941\c16078;\cssrgb\c0\c3922\c39608;\cssrgb\c99216\c96078\c83137;
\cssrgb\c66667\c13333\c6667;\cssrgb\c0\c0\c0;\cssrgb\c66667\c25098\c0;\cssrgb\c20000\c20000\c20000;\cssrgb\c91373\c92157\c93333;
\cssrgb\c0\c25098\c7059;\cssrgb\c40000\c40000\c40000;\cssrgb\c37647\c7059\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid302\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Contact Deduplication\
\pard\pardeftab720\sl520\qc\partightenfactor0

\f1\i\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl520\qc\partightenfactor0
\cf4 \strokec4 \
\pard\pardeftab720\sl520\qc\partightenfactor0

\f0\i0 \cf4 More Items\
\pard\pardeftab720\sl320\partightenfactor0

\f1\b0 \cf5 \strokec5 Owner:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/profile/?id=100000349307562"}}{\fldrslt \cf6 \strokec6 Sergey Tyurin}}\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Hard\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Ninja\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Algorithm\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \strokec2 Description\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 \strokec7 An address book contains a list of contacts which were imported from different sources (i.e. Facebook, LinkedIn). Each contact has 1 or more email addresses. Write a function to group or merge all contacts which share any email together.\
\pard\pardeftab720\sl375\sa160\partightenfactor0

\f4\b\fs30 \cf7 Input\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=596252993880763#input"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\partightenfactor0

\f5\b0\fs20 \cf8 \cb9 \strokec8 C1\cf10 \strokec10 :\cf11 \strokec11  \cf8 \strokec8 bob\cf10 \strokec10 @\cf8 \strokec8 yahoo\cf10 \strokec10 .\cf8 \strokec8 com\cf10 \strokec10 ,\cf11 \strokec11  \cf8 \strokec8 bob\cf10 \strokec10 @\cf8 \strokec8 gmail\cf10 \strokec10 .\cf8 \strokec8 com\cf11 \strokec11 \
\cf8 \strokec8 C2\cf10 \strokec10 :\cf11 \strokec11  \cf8 \strokec8 mary\cf10 \strokec10 @\cf8 \strokec8 facebook\cf10 \strokec10 .\cf8 \strokec8 com\cf11 \strokec11 \
\cf8 \strokec8 C3\cf10 \strokec10 :\cf11 \strokec11  \cf8 \strokec8 bob\cf10 \strokec10 @\cf8 \strokec8 gmail\cf10 \strokec10 .\cf8 \strokec8 com\cf10 \strokec10 ,\cf11 \strokec11  \cf8 \strokec8 bob_1\cf10 \strokec10 @\cf8 \strokec8 hotmail\cf10 \strokec10 .\cf8 \strokec8 com\cf11 \strokec11 \
\cf8 \strokec8 C4\cf10 \strokec10 :\cf11 \strokec11  \cf8 \strokec8 bob_1\cf10 \strokec10 @\cf8 \strokec8 hotmail\cf10 \strokec10 .\cf8 \strokec8 com\cf11 \strokec11 \
\cf8 \strokec8 C5\cf10 \strokec10 :\cf11 \strokec11  \cf8 \strokec8 mary\cf10 \strokec10 @\cf8 \strokec8 facebook\cf10 \strokec10 .\cf8 \strokec8 com\cf11 \strokec11 \
\cf8 \strokec8 C6\cf10 \strokec10 :\cf11 \strokec11  \cf8 \strokec8 mark\cf10 \strokec10 @\cf8 \strokec8 gmail\cf10 \strokec10 .\cf8 \strokec8 com\cf11 \strokec11 \
\pard\pardeftab720\sl375\sa160\partightenfactor0

\f4\b\fs30 \cf7 \cb1 \strokec7 Output\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=596252993880763#output"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\partightenfactor0

\f5\b0\fs20 \cf10 \cb9 \strokec10 ((\cf8 \strokec8 C1\cf10 \strokec10 ,\cf11 \strokec11  \cf8 \strokec8 C3\cf10 \strokec10 ,\cf11 \strokec11  \cf8 \strokec8 C4\cf10 \strokec10 ),\cf11 \strokec11  \cf10 \strokec10 (\cf8 \strokec8 C2\cf10 \strokec10 ,\cf11 \strokec11  \cf8 \strokec8 C5\cf10 \strokec10 ),\cf11 \strokec11  \cf10 \strokec10 (\cf8 \strokec8 C6\cf10 \strokec10 ))\cf11 \strokec11 \
\
\cf10 \strokec10 (\cf8 \strokec8 C1\cf10 \strokec10 ,\cf11 \strokec11  \cf8 \strokec8 C3\cf10 \strokec10 ,\cf11 \strokec11  \cf8 \strokec8 C4\cf10 \strokec10 )\cf11 \strokec11  \cf8 \strokec8 are\cf11 \strokec11  \cf8 \strokec8 in\cf11 \strokec11  \cf8 \strokec8 the\cf11 \strokec11  \cf8 \strokec8 same\cf11 \strokec11  \cf8 \strokec8 subset\cf11 \strokec11  \cf8 \strokec8 because\cf11 \strokec11  \cf8 \strokec8 they\cf11 \strokec11  \cf8 \strokec8 likely\cf11 \strokec11  \cf8 \strokec8 represent\cf11 \strokec11  \cf8 \strokec8 the\cf11 \strokec11  \cf8 \strokec8 same\cf11 \strokec11  \cf8 \strokec8 person\cf10 \strokec10 .\cf11 \strokec11  \cf8 \strokec8 Ditto\cf11 \strokec11  \cf12 \strokec12 for\cf11 \strokec11  \cf8 \strokec8 the\cf11 \strokec11  \cf8 \strokec8 other\cf11 \strokec11  \cf8 \strokec8 subsets\cf10 \strokec10 .\cf11 \strokec11 \
\pard\pardeftab720\sl280\partightenfactor0
\cf8 \strokec8 Notice\cf11 \strokec11  \cf8 \strokec8 that\cf11 \strokec11  \cf8 \strokec8 each\cf11 \strokec11  \cf8 \strokec8 contact\cf11 \strokec11  \cf8 \strokec8 can\cf11 \strokec11  \cf8 \strokec8 appear\cf11 \strokec11  \cf8 \strokec8 in\cf11 \strokec11  \cf8 \strokec8 only\cf11 \strokec11  \cf8 \strokec8 one\cf11 \strokec11  \cf8 \strokec8 subset\cf10 \strokec10 .\cf11 \strokec11 \
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 Question Statement\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 \strokec7 Author: Shu Wu\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 Hints\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=596252993880763#hints"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0
\f3\b0\fs24 \cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 If candidate is totally off, guide them towards the graph find connected components solution\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl280\partightenfactor0
\ls1\ilvl1\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Think of the contacts as nodes in a graph. An edge connects two contacts if they share at least a similar email.\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 A good solution should uses a graph traversal algorithm like DFS or BFS, which has the complexity of O(N+E) where N is the number of nodes and E is the number of edges in the graph. However, since this is an implicit graph, the complexity may be more than O(N+E) depending on how the implementation implicitly traverse the edges.\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 An even more efficient solution is to use union-find with disjoint-set structures which has the complexity of O(V \uc0\u945 (V)) where V is the total number of emails in all of the contacts and \u945  is the inverse Ackermann function. This is effectively O(V) for all practical inputs.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 If they still don't get it, ask them for a naive solution (for example, using two\'a0
\f6 \cf13 \cb14 \strokec13 for
\f3 \cf7 \cb1 \strokec7 \'a0loops and compare each pair of contacts for similarity) and move on to another question.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 Solution\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=596252993880763#solution"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 Contact is just a list of emails.\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf12 \cb9 \strokec12 class\cf11 \strokec11  \cf8 \strokec8 Contact\cf10 \strokec10 :\cf11 \strokec11 \
  \cf8 \strokec8 def\cf11 \strokec11  \cf15 \strokec15 __init__\cf10 \strokec10 (\cf12 \strokec12 self\cf10 \strokec10 ,\cf11 \strokec11  \cf8 \strokec8 emails\cf10 \strokec10 ):\cf11 \strokec11 \
    \cf12 \strokec12 self\cf10 \strokec10 .\cf8 \strokec8 emails\cf11 \strokec11  \cf10 \strokec10 =\cf11 \strokec11  \cf8 \strokec8 emails\cf11 \strokec11 \
\pard\pardeftab720\sl375\sa160\partightenfactor0

\f4\b\fs30 \cf7 \cb1 \strokec7 Solution #1 Find connected components\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=596252993880763#solution-1-find-connecte"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 I think candidates are most likely to arrive at this solution.\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf16 \cb9 \strokec16 # Recursive depth-first search\cf11 \strokec11 \
\pard\pardeftab720\sl280\partightenfactor0
\cf8 \strokec8 def\cf11 \strokec11  \cf15 \strokec15 dfs\cf10 \strokec10 (\cf8 \strokec8 edges\cf10 \strokec10 ,\cf11 \strokec11  \cf8 \strokec8 contact\cf10 \strokec10 ,\cf11 \strokec11  \cf8 \strokec8 seen\cf10 \strokec10 ,\cf11 \strokec11  \cf8 \strokec8 found\cf10 \strokec10 =\cf8 \strokec8 None\cf10 \strokec10 ):\cf11 \strokec11 \
  \cf8 \strokec8 found\cf11 \strokec11  \cf10 \strokec10 =\cf11 \strokec11  \cf8 \strokec8 found\cf11 \strokec11  \cf12 \strokec12 or\cf11 \strokec11  \cf10 \strokec10 []\cf11 \strokec11 \
  \cf12 \strokec12 if\cf11 \strokec11  \cf8 \strokec8 contact\cf11 \strokec11  \cf12 \strokec12 not\cf11 \strokec11  \cf8 \strokec8 in\cf11 \strokec11  \cf8 \strokec8 seen\cf10 \strokec10 :\cf11 \strokec11 \
    \cf8 \strokec8 seen\cf10 \strokec10 .\cf15 \strokec15 add\cf10 \strokec10 (\cf8 \strokec8 contact\cf10 \strokec10 )\cf11 \strokec11 \
    \cf8 \strokec8 found\cf10 \strokec10 .\cf15 \strokec15 append\cf10 \strokec10 (\cf8 \strokec8 contact\cf10 \strokec10 )\cf11 \strokec11 \
    \cf12 \strokec12 for\cf11 \strokec11  \cf8 \strokec8 email\cf11 \strokec11  \cf8 \strokec8 in\cf11 \strokec11  \cf8 \strokec8 contact\cf10 \strokec10 .\cf8 \strokec8 emails\cf10 \strokec10 :\cf11 \strokec11 \
      \cf12 \strokec12 for\cf11 \strokec11  \cf8 \strokec8 other\cf11 \strokec11  \cf8 \strokec8 in\cf11 \strokec11  \cf8 \strokec8 edges\cf10 \strokec10 [\cf8 \strokec8 email\cf10 \strokec10 ]:\cf11 \strokec11 \
        \cf15 \strokec15 dfs\cf10 \strokec10 (\cf8 \strokec8 edges\cf10 \strokec10 ,\cf11 \strokec11  \cf8 \strokec8 other\cf10 \strokec10 ,\cf11 \strokec11  \cf8 \strokec8 seen\cf10 \strokec10 ,\cf11 \strokec11  \cf8 \strokec8 found\cf10 \strokec10 )\cf11 \strokec11 \
\
  \cf12 \strokec12 return\cf11 \strokec11  \cf8 \strokec8 found\cf11 \strokec11 \
\
\cf8 \strokec8 def\cf11 \strokec11  \cf15 \strokec15 deduplicate\cf10 \strokec10 (\cf8 \strokec8 contacts\cf10 \strokec10 ):\cf11 \strokec11 \
  \cf8 \strokec8 by_email\cf11 \strokec11  \cf10 \strokec10 =\cf11 \strokec11  \cf15 \strokec15 defaultdict\cf10 \strokec10 (\cf8 \strokec8 lambda\cf10 \strokec10 :\cf11 \strokec11  \cf10 \strokec10 [])\cf11 \strokec11 \
  \cf12 \strokec12 for\cf11 \strokec11  \cf8 \strokec8 contact\cf11 \strokec11  \cf8 \strokec8 in\cf11 \strokec11  \cf8 \strokec8 contacts\cf10 \strokec10 :\cf11 \strokec11 \
    \cf12 \strokec12 for\cf11 \strokec11  \cf8 \strokec8 email\cf11 \strokec11  \cf8 \strokec8 in\cf11 \strokec11  \cf8 \strokec8 contact\cf10 \strokec10 .\cf8 \strokec8 emails\cf10 \strokec10 :\cf11 \strokec11 \
      \cf8 \strokec8 by_email\cf10 \strokec10 [\cf8 \strokec8 email\cf10 \strokec10 ].\cf15 \strokec15 append\cf10 \strokec10 (\cf8 \strokec8 contact\cf10 \strokec10 )\cf11 \strokec11 \
\
  \cf8 \strokec8 seen\cf11 \strokec11  \cf10 \strokec10 =\cf11 \strokec11  \cf15 \strokec15 set\cf10 \strokec10 ()\cf11 \strokec11 \
  \cf12 \strokec12 return\cf11 \strokec11  \cf15 \strokec15 filter\cf10 \strokec10 (\cf8 \strokec8 None\cf10 \strokec10 ,\cf11 \strokec11  \cf10 \strokec10 [\cf15 \strokec15 dfs\cf10 \strokec10 (\cf8 \strokec8 by_email\cf10 \strokec10 ,\cf11 \strokec11  \cf8 \strokec8 contact\cf10 \strokec10 ,\cf11 \strokec11  \cf8 \strokec8 seen\cf10 \strokec10 )\cf11 \strokec11  \cf12 \strokec12 for\cf11 \strokec11  \cf8 \strokec8 contact\cf11 \strokec11  \cf8 \strokec8 in\cf11 \strokec11  \cf8 \strokec8 contacts\cf10 \strokec10 ]);\cf11 \strokec11 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf7 \cb1 \strokec7 Things to look for:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls2\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 some candidates don't do any traversal but just look for the first level of matches. this will not produce the right output given the example input so ask them to check.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 dfs will return empty if the root contact is already seen, so that needs to be filtered\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 if they iterate over emails instead of contacts in the top level loop, it's more tricky but they can arrive at\'a0{\field{\*\fldinst{HYPERLINK "https://phabricator.fb.com/P2163700"}}{\fldrslt \cf6 \strokec6 a solution}}.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 if they implemented the recursive solution, ask them how to do it iteratively and what the trade offs are. And vice versa.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 ask about memory and runtime complexity\
\pard\pardeftab720\sl375\sa160\partightenfactor0

\f4\b\fs30 \cf7 Solution #2 Use union-find / disjoint-set data structure\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=596252993880763#solution-2-use-union-fin"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 This solution is harder to implement than #1 so if the candidate is stuck, I prefer to guide them to #1.\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf12 \cb9 \strokec12 class\cf11 \strokec11  \cf8 \strokec8 Node\cf10 \strokec10 :\cf11 \strokec11 \
  \cf8 \strokec8 def\cf11 \strokec11  \cf15 \strokec15 __init__\cf10 \strokec10 (\cf12 \strokec12 self\cf10 \strokec10 ,\cf11 \strokec11  \cf8 \strokec8 value\cf10 \strokec10 ):\cf11 \strokec11 \
    \cf12 \strokec12 self\cf10 \strokec10 .\cf8 \strokec8 value\cf11 \strokec11  \cf10 \strokec10 =\cf11 \strokec11  \cf8 \strokec8 value\cf11 \strokec11 \
    \cf12 \strokec12 self\cf10 \strokec10 .\cf12 \strokec12 parent\cf11 \strokec11  \cf10 \strokec10 =\cf11 \strokec11  \cf12 \strokec12 self\cf11 \strokec11 \
    \cf12 \strokec12 self\cf10 \strokec10 .\cf8 \strokec8 rank\cf11 \strokec11  \cf10 \strokec10 =\cf11 \strokec11  \cf17 \strokec17 0\cf11 \strokec11 \
\
  \cf8 \strokec8 def\cf11 \strokec11  \cf15 \strokec15 find\cf10 \strokec10 (\cf12 \strokec12 self\cf10 \strokec10 ):\cf11 \strokec11 \
    \cf16 \strokec16 # path compression\cf11 \strokec11 \
    \cf12 \strokec12 if\cf11 \strokec11  \cf12 \strokec12 self\cf10 \strokec10 .\cf12 \strokec12 parent\cf11 \strokec11  \cf10 \strokec10 !=\cf11 \strokec11  \cf12 \strokec12 self\cf10 \strokec10 :\cf11 \strokec11 \
      \cf12 \strokec12 self\cf10 \strokec10 .\cf12 \strokec12 parent\cf11 \strokec11  \cf10 \strokec10 =\cf11 \strokec11  \cf12 \strokec12 self\cf10 \strokec10 .\cf12 \strokec12 parent\cf10 \strokec10 .\cf15 \strokec15 find\cf10 \strokec10 ()\cf11 \strokec11 \
    \cf12 \strokec12 return\cf11 \strokec11  \cf12 \strokec12 self\cf10 \strokec10 .\cf12 \strokec12 parent\cf11 \strokec11 \
\
  \cf8 \strokec8 def\cf11 \strokec11  \cf15 \strokec15 union\cf10 \strokec10 (\cf12 \strokec12 self\cf10 \strokec10 ,\cf11 \strokec11  \cf8 \strokec8 node\cf10 \strokec10 ):\cf11 \strokec11 \
    \cf8 \strokec8 root\cf11 \strokec11  \cf10 \strokec10 =\cf11 \strokec11  \cf12 \strokec12 self\cf10 \strokec10 .\cf15 \strokec15 find\cf10 \strokec10 ()\cf11 \strokec11 \
    \cf8 \strokec8 other_root\cf11 \strokec11  \cf10 \strokec10 =\cf11 \strokec11  \cf8 \strokec8 node\cf10 \strokec10 .\cf15 \strokec15 find\cf10 \strokec10 ()\cf11 \strokec11 \
    \cf12 \strokec12 if\cf11 \strokec11  \cf8 \strokec8 root\cf11 \strokec11  \cf10 \strokec10 ==\cf11 \strokec11  \cf8 \strokec8 other_root\cf10 \strokec10 :\cf11 \strokec11 \
      \cf12 \strokec12 return\cf11 \strokec11 \
    \cf16 \strokec16 # union by rank\cf11 \strokec11 \
    \cf12 \strokec12 if\cf11 \strokec11  \cf8 \strokec8 root\cf10 \strokec10 .\cf8 \strokec8 rank\cf11 \strokec11  \cf10 \strokec10 <\cf11 \strokec11  \cf8 \strokec8 other_root\cf10 \strokec10 .\cf8 \strokec8 rank\cf10 \strokec10 :\cf11 \strokec11 \
      \cf8 \strokec8 root\cf10 \strokec10 .\cf12 \strokec12 parent\cf11 \strokec11  \cf10 \strokec10 =\cf11 \strokec11  \cf8 \strokec8 other_root\cf11 \strokec11 \
    \cf12 \strokec12 else\cf10 \strokec10 :\cf11 \strokec11 \
      \cf8 \strokec8 other_root\cf10 \strokec10 .\cf12 \strokec12 parent\cf11 \strokec11  \cf10 \strokec10 =\cf11 \strokec11  \cf8 \strokec8 root\cf11 \strokec11 \
      \cf12 \strokec12 if\cf11 \strokec11  \cf8 \strokec8 root\cf10 \strokec10 .\cf8 \strokec8 rank\cf11 \strokec11  \cf10 \strokec10 ==\cf11 \strokec11  \cf8 \strokec8 other_root\cf10 \strokec10 .\cf8 \strokec8 rank\cf10 \strokec10 :\cf11 \strokec11 \
        \cf8 \strokec8 root\cf10 \strokec10 .\cf8 \strokec8 rank\cf11 \strokec11  \cf10 \strokec10 +=\cf11 \strokec11  \cf17 \strokec17 1\cf11 \strokec11 \
\
\pard\pardeftab720\sl280\partightenfactor0
\cf8 \strokec8 def\cf11 \strokec11  \cf15 \strokec15 deduplicate\cf10 \strokec10 (\cf8 \strokec8 contacts\cf10 \strokec10 ):\cf11 \strokec11 \
  \cf8 \strokec8 by_email\cf11 \strokec11  \cf10 \strokec10 =\cf11 \strokec11  \cf10 \strokec10 \{\}\cf11 \strokec11 \
  \cf8 \strokec8 nodes\cf11 \strokec11  \cf10 \strokec10 =\cf11 \strokec11  \cf10 \strokec10 []\cf11 \strokec11 \
\
  \cf16 \strokec16 # use disjoint-set data structure\cf11 \strokec11 \
  \cf12 \strokec12 for\cf11 \strokec11  \cf8 \strokec8 contact\cf11 \strokec11  \cf8 \strokec8 in\cf11 \strokec11  \cf8 \strokec8 contacts\cf10 \strokec10 :\cf11 \strokec11 \
    \cf8 \strokec8 node\cf11 \strokec11  \cf10 \strokec10 =\cf11 \strokec11  \cf15 \strokec15 Node\cf10 \strokec10 (\cf8 \strokec8 contact\cf10 \strokec10 )\cf11 \strokec11 \
    \cf8 \strokec8 nodes\cf10 \strokec10 .\cf15 \strokec15 append\cf10 \strokec10 (\cf8 \strokec8 node\cf10 \strokec10 )\cf11 \strokec11 \
\
    \cf12 \strokec12 for\cf11 \strokec11  \cf8 \strokec8 email\cf11 \strokec11  \cf8 \strokec8 in\cf11 \strokec11  \cf8 \strokec8 contact\cf10 \strokec10 .\cf8 \strokec8 emails\cf10 \strokec10 :\cf11 \strokec11 \
      \cf8 \strokec8 seen_node\cf11 \strokec11  \cf10 \strokec10 =\cf11 \strokec11  \cf8 \strokec8 by_email\cf10 \strokec10 .\cf15 \strokec15 get\cf10 \strokec10 (\cf8 \strokec8 email\cf10 \strokec10 )\cf11 \strokec11 \
      \cf12 \strokec12 if\cf11 \strokec11  \cf8 \strokec8 seen_node\cf10 \strokec10 :\cf11 \strokec11 \
        \cf8 \strokec8 seen_node\cf10 \strokec10 .\cf15 \strokec15 union\cf10 \strokec10 (\cf8 \strokec8 node\cf10 \strokec10 )\cf11 \strokec11 \
      \cf12 \strokec12 else\cf10 \strokec10 :\cf11 \strokec11 \
        \cf8 \strokec8 by_email\cf10 \strokec10 [\cf8 \strokec8 email\cf10 \strokec10 ]\cf11 \strokec11  \cf10 \strokec10 =\cf11 \strokec11  \cf8 \strokec8 node\cf11 \strokec11 \
\
  \cf16 \strokec16 # return disjoint subsets as list\cf11 \strokec11 \
  \cf8 \strokec8 results\cf11 \strokec11  \cf10 \strokec10 =\cf11 \strokec11  \cf15 \strokec15 defaultdict\cf10 \strokec10 (\cf8 \strokec8 lambda\cf10 \strokec10 :\cf11 \strokec11  \cf10 \strokec10 [])\cf11 \strokec11 \
  \cf12 \strokec12 for\cf11 \strokec11  \cf8 \strokec8 node\cf11 \strokec11  \cf8 \strokec8 in\cf11 \strokec11  \cf8 \strokec8 nodes\cf10 \strokec10 :\cf11 \strokec11 \
    \cf8 \strokec8 results\cf10 \strokec10 [\cf8 \strokec8 node\cf10 \strokec10 .\cf15 \strokec15 find\cf10 \strokec10 ()].\cf15 \strokec15 append\cf10 \strokec10 (\cf8 \strokec8 node\cf10 \strokec10 .\cf8 \strokec8 value\cf10 \strokec10 )\cf11 \strokec11 \
  \cf12 \strokec12 return\cf11 \strokec11  \cf8 \strokec8 results\cf10 \strokec10 .\cf15 \strokec15 values\cf10 \strokec10 ()\cf11 \strokec11 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf7 \cb1 \strokec7 Things to look for:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls3\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 If they forget forget to union by rank, ask what pathological case will degrade the runtime\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 If they forget forget to use path compression, ask what pathological case will degrade the runtime\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 Follow up questions\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=596252993880763#follow-up-questions"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls4\ilvl0
\f3\b0\fs24 \cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Add constraints on the memory and force a solution that does not require a dictionary\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 What edge cases should you test for? (i.e. all contacts are the same, contacts with duplicate emails)\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Now we also want to de-duplicate contacts by emails AND phone numbers. How do you modify your current solution w/o introducing a new dictionary?\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 For this problem we considered the similarity of contacts to be binary. If we had other contact fields such as [Name, Birth Date, Sex, Country, Address, Company], how would you measure the similarity of contacts?\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl280\partightenfactor0
\ls4\ilvl1\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Adapt the solution to use a similarity function which returns a score vs. a boolean.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls4\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 How would you / or wouldn't you accomplish this using SQL?\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 If you had to use multiple machines to parallelize this task, how would you do it?\
}