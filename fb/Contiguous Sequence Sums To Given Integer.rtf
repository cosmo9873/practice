{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\fswiss\fcharset0 Helvetica;\f4\fswiss\fcharset0 Helvetica-Bold;\f5\fnil\fcharset0 Monaco;
}
{\colortbl;\red255\green255\blue255;\red21\green23\blue25;\red255\green255\blue255;\red52\green56\blue63;
\red78\green84\blue93;\red41\green67\blue135;\red22\green25\blue31;\red152\green18\blue15;\red252\green244\blue202;
\red76\green12\blue1;\red0\green0\blue0;\red83\green83\blue83;\red0\green0\blue82;\red6\green50\blue15;
\red152\green46\blue3;\red98\green83\blue14;}
{\*\expandedcolortbl;;\cssrgb\c10980\c11765\c12941;\cssrgb\c100000\c100000\c100000;\cssrgb\c26667\c28627\c31373;
\cssrgb\c37647\c40392\c43922;\cssrgb\c21176\c34510\c60000;\cssrgb\c11373\c12941\c16078;\cssrgb\c66667\c13333\c6667;\cssrgb\c99216\c96078\c83137;
\cssrgb\c37647\c7059\c0;\cssrgb\c0\c0\c0;\cssrgb\c40000\c40000\c40000;\cssrgb\c0\c3922\c39608;\cssrgb\c0\c25098\c7059;
\cssrgb\c66667\c25098\c0;\cssrgb\c46275\c39608\c6275;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Contiguous Sequence Sums To Given Integer\
\pard\pardeftab720\sl520\qc\partightenfactor0

\f1\i\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl520\qc\partightenfactor0
\cf4 \strokec4 \
\pard\pardeftab720\sl520\qc\partightenfactor0

\f0\i0 \cf4 More Items\
\pard\pardeftab720\sl320\partightenfactor0

\f1\b0 \cf5 \strokec5 Owner:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/profile/?id=100000386384418"}}{\fldrslt \cf6 \strokec6 Keenan Monks}}\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Medium\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Ninja\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 General\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \strokec2 Description\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 \strokec7 Given a sequence of integers and an integer total target, return whether a contiguous sequence of integers sums up to target.\
\pard\pardeftab720\sl280\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.facebook.com/internalvideos/videos/817486951795684/"}}{\fldrslt \cf6 \strokec6 Ninja Brown Bag Recording}}\
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.dropbox.com/s/h7vul6jwh3krrfm/contiguous%20subsequence%20sums.pptx?dl=0+Contiguous+Sequence+Deck"}}{\fldrslt \cf6 \strokec6 PowerPoint}}\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \strokec2 Question Statement\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\fs33 \cf7 \strokec7 Question\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1573054929691708#question"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 Given a sequence of integers and an integer total target, return whether a contiguous sequence of integers sums up to target.\
\pard\pardeftab720\sl375\sa160\partightenfactor0

\f4\b\fs30 \cf7 Example\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1573054929691708#example"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\partightenfactor0

\f5\b0\fs20 \cf8 \cb9 \strokec8 [\cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 3\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 4\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 23\cf8 \strokec8 ],\cf11 \strokec11  \cf10 \strokec10 8\cf11 \strokec11  \cf12 \strokec12 # True (because 3 + 1 + 4 = 8)\cf11 \strokec11 \
\cf8 \strokec8 [\cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 3\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 4\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 23\cf8 \strokec8 ],\cf11 \strokec11  \cf10 \strokec10 7\cf11 \strokec11  \cf12 \strokec12 # False\cf11 \strokec11 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf7 \cb1 \strokec7 Questions candidates ask:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Are the integers all positive? - yes\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Should I enumerate all the sequences that match? - no, return true if there exist one\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 What is the expected result if the sequence is empty? - return false, as there is no subsequence\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Is the list sorted? no\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf7 Dealing with zeroes can be quite nasty, so in the first iteration, we can just assume that all integers (in seq and total) are strictly positive.\
Good candidates see the linear solution pretty early.\
If they don't see it right away, it's possible to start with the brute force solution, and then possible optimizations:\
\pard\pardeftab720\sl375\sa160\partightenfactor0

\f4\b\fs30 \cf7 Brute force\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1573054929691708#brute-force"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 list all possible subsequences and sum each of them - O(n^3)\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf13 \cb9 \strokec13 def\cf11 \strokec11  \cf14 \strokec14 containsTotal\cf8 \strokec8 (\cf13 \strokec13 seq\cf8 \strokec8 ,\cf11 \strokec11  \cf13 \strokec13 total\cf8 \strokec8 ):\cf11 \strokec11 \
  \cf15 \strokec15 for\cf11 \strokec11  \cf13 \strokec13 i\cf11 \strokec11  \cf13 \strokec13 in\cf11 \strokec11  \cf14 \strokec14 range\cf8 \strokec8 (\cf14 \strokec14 len\cf8 \strokec8 (\cf13 \strokec13 seq\cf8 \strokec8 )):\cf11 \strokec11 \
    \cf15 \strokec15 for\cf11 \strokec11  \cf13 \strokec13 j\cf11 \strokec11  \cf13 \strokec13 in\cf11 \strokec11  \cf14 \strokec14 range\cf8 \strokec8 (\cf13 \strokec13 i\cf8 \strokec8 ,\cf11 \strokec11  \cf14 \strokec14 len\cf8 \strokec8 (\cf13 \strokec13 seq\cf8 \strokec8 )):\cf11 \strokec11 \
      \cf13 \strokec13 subtotal\cf11 \strokec11  \cf8 \strokec8 =\cf11 \strokec11  \cf10 \strokec10 0\cf11 \strokec11 \
      \cf15 \strokec15 for\cf11 \strokec11  \cf13 \strokec13 k\cf11 \strokec11  \cf13 \strokec13 in\cf11 \strokec11  \cf14 \strokec14 range\cf8 \strokec8 (\cf13 \strokec13 i\cf8 \strokec8 ,\cf11 \strokec11  \cf13 \strokec13 j\cf11 \strokec11  \cf8 \strokec8 +\cf11 \strokec11  \cf10 \strokec10 1\cf8 \strokec8 ):\cf11 \strokec11 \
        \cf13 \strokec13 subtotal\cf11 \strokec11  \cf8 \strokec8 +=\cf11 \strokec11  \cf13 \strokec13 seq\cf8 \strokec8 [\cf13 \strokec13 k\cf8 \strokec8 ]\cf11 \strokec11 \
      \cf15 \strokec15 if\cf11 \strokec11  \cf13 \strokec13 subtotal\cf11 \strokec11  \cf8 \strokec8 ==\cf11 \strokec11  \cf13 \strokec13 total\cf8 \strokec8 :\cf11 \strokec11 \
        \cf15 \strokec15 return\cf11 \strokec11  \cf13 \strokec13 True\cf11 \strokec11 \
  \cf15 \strokec15 return\cf11 \strokec11  \cf13 \strokec13 False\cf11 \strokec11 \
\pard\pardeftab720\sl375\sa160\partightenfactor0

\f4\b\fs30 \cf7 \cb1 \strokec7 Optimisations on brute force:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1573054929691708#optimisations-on-brute-f"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 sum from each starting point so we can remove the third loop - O(n^2)\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf13 \cb9 \strokec13 def\cf11 \strokec11  \cf14 \strokec14 containsTotal\cf8 \strokec8 (\cf13 \strokec13 seq\cf8 \strokec8 ,\cf11 \strokec11  \cf13 \strokec13 total\cf8 \strokec8 ):\cf11 \strokec11 \
  \cf15 \strokec15 for\cf11 \strokec11  \cf13 \strokec13 i\cf11 \strokec11  \cf13 \strokec13 in\cf11 \strokec11  \cf14 \strokec14 range\cf8 \strokec8 (\cf14 \strokec14 len\cf8 \strokec8 (\cf13 \strokec13 seq\cf8 \strokec8 )):\cf11 \strokec11 \
    \cf13 \strokec13 subtotal\cf11 \strokec11  \cf8 \strokec8 =\cf11 \strokec11  \cf10 \strokec10 0\cf11 \strokec11 \
    \cf15 \strokec15 for\cf11 \strokec11  \cf13 \strokec13 j\cf11 \strokec11  \cf13 \strokec13 in\cf11 \strokec11  \cf14 \strokec14 range\cf8 \strokec8 (\cf13 \strokec13 i\cf8 \strokec8 ,\cf11 \strokec11  \cf14 \strokec14 len\cf8 \strokec8 (\cf13 \strokec13 seq\cf8 \strokec8 )):\cf11 \strokec11 \
      \cf13 \strokec13 subtotal\cf11 \strokec11  \cf8 \strokec8 +=\cf11 \strokec11  \cf13 \strokec13 seq\cf8 \strokec8 [\cf13 \strokec13 j\cf8 \strokec8 ]\cf11 \strokec11 \
      \cf15 \strokec15 if\cf11 \strokec11  \cf13 \strokec13 subtotal\cf11 \strokec11  \cf8 \strokec8 ==\cf11 \strokec11  \cf13 \strokec13 total\cf8 \strokec8 :\cf11 \strokec11 \
        \cf15 \strokec15 return\cf11 \strokec11  \cf13 \strokec13 True\cf11 \strokec11 \
  \cf15 \strokec15 return\cf11 \strokec11  \cf13 \strokec13 False\cf11 \strokec11 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls2\ilvl0
\f3\fs24 \cf7 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 create an array with cumulative sums so sum computation of the sequences is constant time - O(n^2) but with additional memory\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 because cumulative sum array is naturally sorted, it's possible to do a binary search for the end of the interval - O(n^log(n)) -- only writing this here because I had a candidate who noticed this, and I thought it was a clever remark, although not the point here.\
\pard\pardeftab720\sl375\sa160\partightenfactor0

\f4\b\fs30 \cf7 Linear solutions\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1573054929691708#linear-solutions"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 Here is a linear solution that works with positive and negative integers (it also relies on prefix sums). This solution is interesting because it is much easier to leap from a n^2 solution to it. It has a linear space complexity.\
The idea is to grow a set/hashtable of cumulative sums from the beginning of the list, and for each new one, determine if there is a sum s in the set that satisfies s = (last calculated sum - target total).\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf13 \cb9 \strokec13 def\cf11 \strokec11  \cf14 \strokec14 containsTotal\cf8 \strokec8 (\cf13 \strokec13 seq\cf8 \strokec8 ,\cf11 \strokec11  \cf13 \strokec13 tot\cf8 \strokec8 ):\cf11 \strokec11 \
  \cf13 \strokec13 mySet\cf11 \strokec11  \cf8 \strokec8 =\cf11 \strokec11  \cf14 \strokec14 set\cf8 \strokec8 ()\cf11 \strokec11 \
  \cf13 \strokec13 s\cf11 \strokec11  \cf8 \strokec8 =\cf11 \strokec11  \cf10 \strokec10 0\cf11 \strokec11 \
  \cf15 \strokec15 for\cf11 \strokec11  \cf13 \strokec13 x\cf11 \strokec11  \cf13 \strokec13 in\cf11 \strokec11  \cf13 \strokec13 seq\cf8 \strokec8 :\cf11 \strokec11 \
    \cf13 \strokec13 mySet\cf8 \strokec8 .\cf14 \strokec14 add\cf8 \strokec8 (\cf13 \strokec13 s\cf8 \strokec8 )\cf11 \strokec11 \
    \cf13 \strokec13 s\cf11 \strokec11  \cf8 \strokec8 +=\cf11 \strokec11  \cf13 \strokec13 x\cf11 \strokec11 \
    \cf15 \strokec15 if\cf11 \strokec11  \cf8 \strokec8 (\cf13 \strokec13 s\cf11 \strokec11  \cf8 \strokec8 -\cf11 \strokec11  \cf13 \strokec13 tot\cf8 \strokec8 )\cf11 \strokec11  \cf13 \strokec13 in\cf11 \strokec11  \cf13 \strokec13 mySet\cf8 \strokec8 :\cf11 \strokec11 \
      \cf15 \strokec15 return\cf11 \strokec11  \cf13 \strokec13 True\cf11 \strokec11 \
  \cf15 \strokec15 return\cf11 \strokec11  \cf13 \strokec13 False\cf11 \strokec11 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf7 \cb1 \strokec7 Another linear solution is to grow a subtotal by adding numbers in the front until the it is bigger than the total, then subtracting from the back until it's smaller than the total. If at any point in the middle it is equal to the total, then return true. If the end is reached, return false. This works only for positive integers.\
This solution is constant in space, which is a good hint to use when trying to have a candidate find it. The explanation is quite easy, but the handling of zeroes is quite tricky, and can send a simple implementation in an infinite loop):\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls3\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 The order of the conditions is important if total can be zero\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 if we allow start to be equal to end, we need a special case when total = 0 and start = end to not have false positives\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 if we don't, then we sometimes need to add a number in the front even though subtotal is more than total, in order not to get stuck in an infinite loop.\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf7 Here is a solution in python where start is not equal to end:\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf13 \cb9 \strokec13 def\cf11 \strokec11  \cf14 \strokec14 containsTotal\cf8 \strokec8 (\cf13 \strokec13 seq\cf8 \strokec8 ,\cf11 \strokec11  \cf13 \strokec13 total\cf8 \strokec8 ):\cf11 \strokec11 \
  \cf13 \strokec13 start\cf11 \strokec11  \cf8 \strokec8 =\cf11 \strokec11  \cf13 \strokec13 end\cf11 \strokec11  \cf8 \strokec8 =\cf11 \strokec11  \cf10 \strokec10 0\cf11 \strokec11 \
  \cf13 \strokec13 subtotal\cf11 \strokec11  \cf8 \strokec8 =\cf11 \strokec11  \cf10 \strokec10 0\cf11 \strokec11 \
\
  \cf15 \strokec15 while\cf11 \strokec11  \cf13 \strokec13 end\cf11 \strokec11  \cf8 \strokec8 <\cf11 \strokec11  \cf14 \strokec14 len\cf8 \strokec8 (\cf13 \strokec13 seq\cf8 \strokec8 ):\cf11 \strokec11 \
    \cf13 \strokec13 subtotal\cf11 \strokec11  \cf8 \strokec8 +=\cf11 \strokec11  \cf13 \strokec13 seq\cf8 \strokec8 [\cf13 \strokec13 end\cf8 \strokec8 ]\cf11 \strokec11 \
    \cf13 \strokec13 end\cf11 \strokec11  \cf8 \strokec8 +=\cf11 \strokec11  \cf10 \strokec10 1\cf11 \strokec11 \
\
    \cf15 \strokec15 while\cf11 \strokec11  \cf13 \strokec13 subtotal\cf11 \strokec11  \cf8 \strokec8 >\cf11 \strokec11  \cf13 \strokec13 total\cf11 \strokec11  \cf15 \strokec15 and\cf11 \strokec11  \cf13 \strokec13 start\cf11 \strokec11  \cf8 \strokec8 <\cf11 \strokec11  \cf13 \strokec13 end\cf11 \strokec11  \cf8 \strokec8 -\cf11 \strokec11  \cf10 \strokec10 1\cf8 \strokec8 :\cf11 \strokec11 \
      \cf13 \strokec13 subtotal\cf11 \strokec11  \cf8 \strokec8 -=\cf11 \strokec11  \cf13 \strokec13 seq\cf8 \strokec8 [\cf13 \strokec13 start\cf8 \strokec8 ]\cf11 \strokec11 \
      \cf13 \strokec13 start\cf11 \strokec11  \cf8 \strokec8 +=\cf11 \strokec11  \cf10 \strokec10 1\cf11 \strokec11 \
\
    \cf15 \strokec15 if\cf11 \strokec11  \cf13 \strokec13 subtotal\cf11 \strokec11  \cf8 \strokec8 ==\cf11 \strokec11  \cf13 \strokec13 total\cf8 \strokec8 :\cf11 \strokec11 \
      \cf15 \strokec15 return\cf11 \strokec11  \cf13 \strokec13 True\cf11 \strokec11 \
\
  \cf15 \strokec15 return\cf11 \strokec11  \cf13 \strokec13 False\cf11 \strokec11 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf7 \cb1 \strokec7 Here is a solution in ruby that avoids nested loops:\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf13 \cb9 \strokec13 def\cf11 \strokec11  \cf14 \strokec14 contains_total\cf8 \strokec8 (\cf13 \strokec13 seq\cf8 \strokec8 ,\cf11 \strokec11  \cf13 \strokec13 total\cf8 \strokec8 )\cf11 \strokec11 \
  \cf13 \strokec13 sum\cf11 \strokec11  \cf8 \strokec8 =\cf11 \strokec11  \cf13 \strokec13 s\cf11 \strokec11  \cf8 \strokec8 =\cf11 \strokec11  \cf13 \strokec13 e\cf11 \strokec11  \cf8 \strokec8 =\cf11 \strokec11  \cf10 \strokec10 0\cf11 \strokec11 \
  \cf13 \strokec13 loop\cf11 \strokec11  \cf15 \strokec15 do\cf11 \strokec11  \
    \cf15 \strokec15 if\cf11 \strokec11  \cf13 \strokec13 sum\cf11 \strokec11  \cf8 \strokec8 <\cf11 \strokec11  \cf13 \strokec13 total\cf11 \strokec11 \
      \cf15 \strokec15 return\cf11 \strokec11  \cf13 \strokec13 false\cf11 \strokec11  \cf15 \strokec15 if\cf11 \strokec11  \cf13 \strokec13 e\cf11 \strokec11  \cf8 \strokec8 ==\cf11 \strokec11  \cf13 \strokec13 seq\cf8 \strokec8 .\cf13 \strokec13 size\cf11 \strokec11 \
      \cf13 \strokec13 sum\cf11 \strokec11  \cf8 \strokec8 +=\cf11 \strokec11  \cf13 \strokec13 seq\cf8 \strokec8 [\cf13 \strokec13 e\cf8 \strokec8 ]\cf11 \strokec11 \
      \cf13 \strokec13 e\cf11 \strokec11  \cf8 \strokec8 +=\cf11 \strokec11  \cf10 \strokec10 1\cf11 \strokec11 \
    \cf13 \strokec13 elsif\cf11 \strokec11  \cf13 \strokec13 sum\cf11 \strokec11  \cf8 \strokec8 >\cf11 \strokec11  \cf13 \strokec13 total\cf11 \strokec11 \
      \cf15 \strokec15 return\cf11 \strokec11  \cf13 \strokec13 false\cf11 \strokec11  \cf15 \strokec15 if\cf11 \strokec11  \cf13 \strokec13 s\cf11 \strokec11  \cf8 \strokec8 ==\cf11 \strokec11  \cf13 \strokec13 e\cf11 \strokec11 \
      \cf13 \strokec13 sum\cf11 \strokec11  \cf8 \strokec8 -=\cf11 \strokec11  \cf13 \strokec13 seq\cf8 \strokec8 [\cf13 \strokec13 s\cf8 \strokec8 ]\cf11 \strokec11 \
      \cf13 \strokec13 s\cf11 \strokec11  \cf8 \strokec8 +=\cf11 \strokec11  \cf10 \strokec10 1\cf11 \strokec11 \
    \cf15 \strokec15 else\cf11 \strokec11 \
      \cf15 \strokec15 return\cf11 \strokec11  \cf13 \strokec13 true\cf11 \strokec11 \
    \cf13 \strokec13 end\cf11 \strokec11 \
  \cf13 \strokec13 end\cf11 \strokec11 \
\cf13 \strokec13 end\cf11 \strokec11 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf7 \cb1 \strokec7 Here is a solution in javascript where we check whether start is not equal to end before we return:\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf15 \cb9 \strokec15 var\cf11 \strokec11  \cf13 \strokec13 containsTotal\cf11 \strokec11  \cf8 \strokec8 =\cf11 \strokec11  \cf15 \strokec15 function\cf8 \strokec8 (\cf13 \strokec13 seq\cf8 \strokec8 ,\cf11 \strokec11  \cf13 \strokec13 total\cf8 \strokec8 )\cf11 \strokec11  \cf8 \strokec8 \{\cf11 \strokec11 \
  \cf15 \strokec15 var\cf11 \strokec11  \cf13 \strokec13 start\cf11 \strokec11  \cf8 \strokec8 =\cf11 \strokec11  \cf10 \strokec10 0\cf8 \strokec8 ,\cf11 \strokec11  \cf13 \strokec13 end\cf11 \strokec11  \cf8 \strokec8 =\cf11 \strokec11  \cf10 \strokec10 0\cf8 \strokec8 ;\cf11 \strokec11 \
  \cf15 \strokec15 var\cf11 \strokec11  \cf13 \strokec13 subtotal\cf11 \strokec11  \cf8 \strokec8 =\cf11 \strokec11  \cf10 \strokec10 0\cf8 \strokec8 ;\cf11 \strokec11 \
\
  \cf15 \strokec15 while\cf11 \strokec11  \cf8 \strokec8 (\cf13 \strokec13 true\cf8 \strokec8 )\cf11 \strokec11  \cf8 \strokec8 \{\cf11 \strokec11 \
    \cf15 \strokec15 if\cf11 \strokec11  \cf8 \strokec8 (\cf13 \strokec13 subtotal\cf11 \strokec11  \cf8 \strokec8 ===\cf11 \strokec11  \cf13 \strokec13 total\cf11 \strokec11  \cf8 \strokec8 &&\cf11 \strokec11  \cf13 \strokec13 end\cf11 \strokec11  \cf8 \strokec8 >\cf11 \strokec11  \cf13 \strokec13 start\cf8 \strokec8 )\cf11 \strokec11  \cf8 \strokec8 \{\cf11 \strokec11 \
      \cf15 \strokec15 return\cf11 \strokec11  \cf13 \strokec13 true\cf8 \strokec8 ;\cf11 \strokec11 \
    \cf8 \strokec8 \}\cf11 \strokec11  \cf15 \strokec15 else\cf11 \strokec11  \cf15 \strokec15 if\cf11 \strokec11  \cf8 \strokec8 (\cf13 \strokec13 subtotal\cf11 \strokec11  \cf8 \strokec8 <\cf11 \strokec11  \cf13 \strokec13 total\cf11 \strokec11  \cf8 \strokec8 ||\cf11 \strokec11  \cf13 \strokec13 end\cf11 \strokec11  \cf8 \strokec8 ===\cf11 \strokec11  \cf13 \strokec13 start\cf8 \strokec8 )\cf11 \strokec11  \cf8 \strokec8 \{\cf11 \strokec11 \
      \cf15 \strokec15 if\cf11 \strokec11  \cf8 \strokec8 (\cf13 \strokec13 end\cf11 \strokec11  \cf8 \strokec8 >=\cf11 \strokec11  \cf13 \strokec13 seq\cf8 \strokec8 .\cf13 \strokec13 length\cf8 \strokec8 )\cf11 \strokec11  \cf15 \strokec15 return\cf11 \strokec11  \cf13 \strokec13 false\cf8 \strokec8 ;\cf11 \strokec11 \
      \cf13 \strokec13 subtotal\cf11 \strokec11  \cf8 \strokec8 +=\cf11 \strokec11  \cf13 \strokec13 seq\cf8 \strokec8 [\cf13 \strokec13 end\cf8 \strokec8 ];\cf11 \strokec11 \
      \cf13 \strokec13 end\cf11 \strokec11  \cf8 \strokec8 ++;\cf11 \strokec11 \
    \cf8 \strokec8 \}\cf11 \strokec11  \cf15 \strokec15 else\cf11 \strokec11  \cf12 \strokec12 /* if (subtotal > total) */\cf11 \strokec11  \cf8 \strokec8 \{\cf11 \strokec11 \
      \cf13 \strokec13 subtotal\cf11 \strokec11  \cf8 \strokec8 -=\cf11 \strokec11  \cf13 \strokec13 seq\cf8 \strokec8 [\cf13 \strokec13 start\cf8 \strokec8 ];\cf11 \strokec11 \
      \cf13 \strokec13 start\cf11 \strokec11  \cf8 \strokec8 ++;\cf11 \strokec11 \
    \cf8 \strokec8 \}\cf11 \strokec11 \
  \cf8 \strokec8 \}\cf11 \strokec11 \
\pard\pardeftab720\sl280\partightenfactor0
\cf8 \strokec8 \};\cf11 \strokec11 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf7 \cb1 \strokec7 There's a nice (?) solution using recursion, too:\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf13 \cb9 \strokec13 def\cf11 \strokec11  \cf14 \strokec14 containsTotal\cf8 \strokec8 (\cf13 \strokec13 seq\cf8 \strokec8 ,\cf11 \strokec11  \cf13 \strokec13 total\cf8 \strokec8 ):\cf11 \strokec11 \
  \cf13 \strokec13 def\cf11 \strokec11  \cf14 \strokec14 go\cf8 \strokec8 (\cf13 \strokec13 t\cf8 \strokec8 ,\cf11 \strokec11  \cf13 \strokec13 i\cf8 \strokec8 ,\cf11 \strokec11  \cf13 \strokec13 j\cf8 \strokec8 ):\cf11 \strokec11 \
    \cf15 \strokec15 if\cf11 \strokec11  \cf13 \strokec13 i\cf11 \strokec11  \cf8 \strokec8 ==\cf11 \strokec11  \cf13 \strokec13 j\cf11 \strokec11  \cf15 \strokec15 or\cf11 \strokec11  \cf13 \strokec13 t\cf11 \strokec11  \cf8 \strokec8 <\cf11 \strokec11  \cf13 \strokec13 total\cf8 \strokec8 :\cf11 \strokec11 \
      \cf15 \strokec15 return\cf11 \strokec11  \cf13 \strokec13 j\cf11 \strokec11  \cf8 \strokec8 <\cf11 \strokec11  \cf14 \strokec14 len\cf8 \strokec8 (\cf13 \strokec13 seq\cf8 \strokec8 )\cf11 \strokec11  \cf15 \strokec15 and\cf11 \strokec11  \cf14 \strokec14 go\cf8 \strokec8 (\cf13 \strokec13 t\cf8 \strokec8 +\cf13 \strokec13 seq\cf8 \strokec8 [\cf13 \strokec13 j\cf8 \strokec8 ],\cf11 \strokec11  \cf13 \strokec13 i\cf8 \strokec8 ,\cf11 \strokec11  \cf13 \strokec13 j\cf8 \strokec8 +\cf10 \strokec10 1\cf8 \strokec8 )\cf11 \strokec11 \
    \cf13 \strokec13 elif\cf11 \strokec11  \cf13 \strokec13 t\cf11 \strokec11  \cf8 \strokec8 >\cf11 \strokec11  \cf13 \strokec13 total\cf8 \strokec8 :\cf11 \strokec11 \
      \cf15 \strokec15 return\cf11 \strokec11  \cf14 \strokec14 go\cf8 \strokec8 (\cf13 \strokec13 t\cf8 \strokec8 -\cf13 \strokec13 seq\cf8 \strokec8 [\cf13 \strokec13 i\cf8 \strokec8 ],\cf11 \strokec11  \cf13 \strokec13 i\cf8 \strokec8 +\cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11  \cf13 \strokec13 j\cf8 \strokec8 )\cf11 \strokec11 \
    \cf15 \strokec15 else\cf8 \strokec8 :\cf11 \strokec11 \
      \cf15 \strokec15 return\cf11 \strokec11  \cf13 \strokec13 True\cf11 \strokec11 \
\
  \cf15 \strokec15 return\cf11 \strokec11  \cf14 \strokec14 go\cf8 \strokec8 (\cf10 \strokec10 0\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 0\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 0\cf8 \strokec8 )\cf11 \strokec11 \
\pard\pardeftab720\sl375\sa160\partightenfactor0

\f4\b\fs30 \cf7 \cb1 \strokec7 Testcases\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1573054929691708#testcases"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 Because of the zero trickiness, and also because we are doing quite a lot of indices work, I think it's important to ask for solid test cases.\
Here are the basics the candidate should give:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls4\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 general case with sequences including first and/or last number\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 general failure case\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 empty sequence\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 tricky zeroes\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf7 Make sure that the candidate checks for everything. In my experience, there is always something wrong at first in the linear implementation.\
Here is the full list of testcases I used to test these algorithms (python):\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf15 \cb9 \strokec15 if\cf11 \strokec11  \cf13 \strokec13 __name__\cf11 \strokec11  \cf8 \strokec8 ==\cf11 \strokec11  \cf16 \strokec16 '__main__'\cf8 \strokec8 :\cf11 \strokec11 \
  \cf13 \strokec13 testcases\cf11 \strokec11  \cf8 \strokec8 =\cf11 \strokec11  \cf8 \strokec8 [\cf11 \strokec11 \
    \cf12 \strokec12 # empty sequences\cf11 \strokec11 \
    \cf8 \strokec8 \{\cf11 \strokec11 \
      \cf16 \strokec16 'array'\cf8 \strokec8 :\cf11 \strokec11  \cf8 \strokec8 [],\cf11 \strokec11 \
      \cf16 \strokec16 'target'\cf8 \strokec8 :\cf11 \strokec11  \cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11 \
      \cf16 \strokec16 'expected_result'\cf8 \strokec8 :\cf11 \strokec11  \cf13 \strokec13 False\cf11 \strokec11 \
    \cf8 \strokec8 \},\cf11 \strokec11 \
    \cf8 \strokec8 \{\cf11 \strokec11 \
      \cf16 \strokec16 'array'\cf8 \strokec8 :\cf11 \strokec11  \cf8 \strokec8 [],\cf11 \strokec11 \
      \cf16 \strokec16 'target'\cf8 \strokec8 :\cf11 \strokec11  \cf10 \strokec10 0\cf8 \strokec8 ,\cf11 \strokec11 \
      \cf16 \strokec16 'expected_result'\cf8 \strokec8 :\cf11 \strokec11  \cf13 \strokec13 False\cf11 \strokec11 \
    \cf8 \strokec8 \},\cf11 \strokec11 \
    \cf12 \strokec12 # one element sequences\cf11 \strokec11 \
    \cf8 \strokec8 \{\cf11 \strokec11 \
      \cf16 \strokec16 'array'\cf8 \strokec8 :\cf11 \strokec11  \cf8 \strokec8 [\cf10 \strokec10 1\cf8 \strokec8 ],\cf11 \strokec11 \
      \cf16 \strokec16 'target'\cf8 \strokec8 :\cf11 \strokec11  \cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11 \
      \cf16 \strokec16 'expected_result'\cf8 \strokec8 :\cf11 \strokec11  \cf13 \strokec13 True\cf11 \strokec11 \
    \cf8 \strokec8 \},\cf11 \strokec11 \
    \cf8 \strokec8 \{\cf11 \strokec11 \
      \cf16 \strokec16 'array'\cf8 \strokec8 :\cf11 \strokec11  \cf8 \strokec8 [\cf10 \strokec10 0\cf8 \strokec8 ],\cf11 \strokec11 \
      \cf16 \strokec16 'target'\cf8 \strokec8 :\cf11 \strokec11  \cf10 \strokec10 0\cf8 \strokec8 ,\cf11 \strokec11 \
      \cf16 \strokec16 'expected_result'\cf8 \strokec8 :\cf11 \strokec11  \cf13 \strokec13 True\cf11 \strokec11 \
    \cf8 \strokec8 \},\cf11 \strokec11 \
    \cf12 \strokec12 # general True cases with beginning, middle and end\cf11 \strokec11 \
    \cf8 \strokec8 \{\cf11 \strokec11 \
      \cf16 \strokec16 'array'\cf8 \strokec8 :\cf11 \strokec11  \cf8 \strokec8 [\cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 3\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 5\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 23\cf8 \strokec8 ],\cf11 \strokec11 \
      \cf16 \strokec16 'target'\cf8 \strokec8 :\cf11 \strokec11  \cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11 \
      \cf16 \strokec16 'expected_result'\cf8 \strokec8 :\cf11 \strokec11  \cf13 \strokec13 True\cf11 \strokec11 \
    \cf8 \strokec8 \},\cf11 \strokec11 \
    \cf8 \strokec8 \{\cf11 \strokec11 \
      \cf16 \strokec16 'array'\cf8 \strokec8 :\cf11 \strokec11  \cf8 \strokec8 [\cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 3\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 5\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 23\cf8 \strokec8 ],\cf11 \strokec11 \
      \cf16 \strokec16 'target'\cf8 \strokec8 :\cf11 \strokec11  \cf10 \strokec10 3\cf8 \strokec8 ,\cf11 \strokec11 \
      \cf16 \strokec16 'expected_result'\cf8 \strokec8 :\cf11 \strokec11  \cf13 \strokec13 True\cf11 \strokec11 \
    \cf8 \strokec8 \},\cf11 \strokec11 \
    \cf8 \strokec8 \{\cf11 \strokec11 \
      \cf16 \strokec16 'array'\cf8 \strokec8 :\cf11 \strokec11  \cf8 \strokec8 [\cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 3\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 5\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 23\cf8 \strokec8 ],\cf11 \strokec11 \
      \cf16 \strokec16 'target'\cf8 \strokec8 :\cf11 \strokec11  \cf10 \strokec10 8\cf8 \strokec8 ,\cf11 \strokec11 \
      \cf16 \strokec16 'expected_result'\cf8 \strokec8 :\cf11 \strokec11  \cf13 \strokec13 True\cf11 \strokec11 \
    \cf8 \strokec8 \},\cf11 \strokec11 \
    \cf8 \strokec8 \{\cf11 \strokec11 \
      \cf16 \strokec16 'array'\cf8 \strokec8 :\cf11 \strokec11  \cf8 \strokec8 [\cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 3\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 5\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 23\cf8 \strokec8 ],\cf11 \strokec11 \
      \cf16 \strokec16 'target'\cf8 \strokec8 :\cf11 \strokec11  \cf10 \strokec10 23\cf8 \strokec8 ,\cf11 \strokec11 \
      \cf16 \strokec16 'expected_result'\cf8 \strokec8 :\cf11 \strokec11  \cf13 \strokec13 True\cf11 \strokec11 \
    \cf8 \strokec8 \},\cf11 \strokec11 \
    \cf8 \strokec8 \{\cf11 \strokec11 \
      \cf16 \strokec16 'array'\cf8 \strokec8 :\cf11 \strokec11  \cf8 \strokec8 [\cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 3\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 5\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 23\cf8 \strokec8 ],\cf11 \strokec11 \
      \cf16 \strokec16 'target'\cf8 \strokec8 :\cf11 \strokec11  \cf10 \strokec10 28\cf8 \strokec8 ,\cf11 \strokec11 \
      \cf16 \strokec16 'expected_result'\cf8 \strokec8 :\cf11 \strokec11  \cf13 \strokec13 True\cf11 \strokec11 \
    \cf8 \strokec8 \},\cf11 \strokec11 \
    \cf8 \strokec8 \{\cf11 \strokec11 \
      \cf16 \strokec16 'array'\cf8 \strokec8 :\cf11 \strokec11  \cf8 \strokec8 [\cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 3\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 5\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 23\cf8 \strokec8 ],\cf11 \strokec11 \
      \cf16 \strokec16 'target'\cf8 \strokec8 :\cf11 \strokec11  \cf10 \strokec10 4\cf8 \strokec8 ,\cf11 \strokec11 \
      \cf16 \strokec16 'expected_result'\cf8 \strokec8 :\cf11 \strokec11  \cf13 \strokec13 True\cf11 \strokec11 \
    \cf8 \strokec8 \},\cf11 \strokec11 \
    \cf8 \strokec8 \{\cf11 \strokec11 \
      \cf16 \strokec16 'array'\cf8 \strokec8 :\cf11 \strokec11  \cf8 \strokec8 [\cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 3\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 5\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 23\cf8 \strokec8 ],\cf11 \strokec11 \
      \cf16 \strokec16 'target'\cf8 \strokec8 :\cf11 \strokec11  \cf10 \strokec10 32\cf8 \strokec8 ,\cf11 \strokec11 \
      \cf16 \strokec16 'expected_result'\cf8 \strokec8 :\cf11 \strokec11  \cf13 \strokec13 True\cf11 \strokec11 \
    \cf8 \strokec8 \},\cf11 \strokec11 \
    \cf12 \strokec12 # general False cases\cf11 \strokec11 \
    \cf8 \strokec8 \{\cf11 \strokec11 \
      \cf16 \strokec16 'array'\cf8 \strokec8 :\cf11 \strokec11  \cf8 \strokec8 [\cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 3\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 5\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 23\cf8 \strokec8 ],\cf11 \strokec11 \
      \cf16 \strokec16 'target'\cf8 \strokec8 :\cf11 \strokec11  \cf10 \strokec10 70\cf8 \strokec8 ,\cf11 \strokec11 \
      \cf16 \strokec16 'expected_result'\cf8 \strokec8 :\cf11 \strokec11  \cf13 \strokec13 False\cf11 \strokec11 \
    \cf8 \strokec8 \},\cf11 \strokec11 \
    \cf8 \strokec8 \{\cf11 \strokec11 \
      \cf16 \strokec16 'array'\cf8 \strokec8 :\cf11 \strokec11  \cf8 \strokec8 [\cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 3\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 5\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 23\cf8 \strokec8 ],\cf11 \strokec11 \
      \cf16 \strokec16 'target'\cf8 \strokec8 :\cf11 \strokec11  \cf10 \strokec10 7\cf8 \strokec8 ,\cf11 \strokec11 \
      \cf16 \strokec16 'expected_result'\cf8 \strokec8 :\cf11 \strokec11  \cf13 \strokec13 False\cf11 \strokec11 \
    \cf8 \strokec8 \},\cf11 \strokec11 \
    \cf12 \strokec12 # tricky zero cases\cf11 \strokec11 \
    \cf8 \strokec8 \{\cf11 \strokec11 \
      \cf16 \strokec16 'array'\cf8 \strokec8 :\cf11 \strokec11  \cf8 \strokec8 [\cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 3\cf8 \strokec8 ],\cf11 \strokec11 \
      \cf16 \strokec16 'target'\cf8 \strokec8 :\cf11 \strokec11  \cf10 \strokec10 0\cf8 \strokec8 ,\cf11 \strokec11 \
      \cf16 \strokec16 'expected_result'\cf8 \strokec8 :\cf11 \strokec11  \cf13 \strokec13 False\cf11 \strokec11 \
    \cf8 \strokec8 \},\cf11 \strokec11 \
    \cf8 \strokec8 \{\cf11 \strokec11 \
      \cf16 \strokec16 'array'\cf8 \strokec8 :\cf11 \strokec11  \cf8 \strokec8 [\cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 3\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 0\cf8 \strokec8 ],\cf11 \strokec11 \
      \cf16 \strokec16 'target'\cf8 \strokec8 :\cf11 \strokec11  \cf10 \strokec10 0\cf8 \strokec8 ,\cf11 \strokec11 \
      \cf16 \strokec16 'expected_result'\cf8 \strokec8 :\cf11 \strokec11  \cf13 \strokec13 True\cf11 \strokec11 \
    \cf8 \strokec8 \},\cf11 \strokec11 \
    \cf8 \strokec8 \{\cf11 \strokec11 \
      \cf16 \strokec16 'array'\cf8 \strokec8 :\cf11 \strokec11  \cf8 \strokec8 [\cf10 \strokec10 0\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 3\cf8 \strokec8 ],\cf11 \strokec11 \
      \cf16 \strokec16 'target'\cf8 \strokec8 :\cf11 \strokec11  \cf10 \strokec10 0\cf8 \strokec8 ,\cf11 \strokec11 \
      \cf16 \strokec16 'expected_result'\cf8 \strokec8 :\cf11 \strokec11  \cf13 \strokec13 True\cf11 \strokec11 \
    \cf8 \strokec8 \},\cf11 \strokec11 \
    \cf8 \strokec8 \{\cf11 \strokec11 \
      \cf16 \strokec16 'array'\cf8 \strokec8 :\cf11 \strokec11  \cf8 \strokec8 [\cf10 \strokec10 1\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 0\cf8 \strokec8 ,\cf11 \strokec11  \cf10 \strokec10 3\cf8 \strokec8 ],\cf11 \strokec11 \
      \cf16 \strokec16 'target'\cf8 \strokec8 :\cf11 \strokec11  \cf10 \strokec10 0\cf8 \strokec8 ,\cf11 \strokec11 \
      \cf16 \strokec16 'expected_result'\cf8 \strokec8 :\cf11 \strokec11  \cf13 \strokec13 True\cf11 \strokec11 \
    \cf8 \strokec8 \},\cf11 \strokec11 \
  \cf8 \strokec8 ]\cf11 \strokec11 \
\
  \cf15 \strokec15 for\cf11 \strokec11  \cf13 \strokec13 test\cf11 \strokec11  \cf13 \strokec13 in\cf11 \strokec11  \cf13 \strokec13 testcases\cf8 \strokec8 :\cf11 \strokec11 \
    \cf15 \strokec15 if\cf11 \strokec11  \cf14 \strokec14 containsTotal\cf8 \strokec8 (\cf13 \strokec13 test\cf8 \strokec8 [\cf16 \strokec16 'array'\cf8 \strokec8 ],\cf11 \strokec11  \cf13 \strokec13 test\cf8 \strokec8 [\cf16 \strokec16 'target'\cf8 \strokec8 ])\cf11 \strokec11  \cf8 \strokec8 !=\cf11 \strokec11  \cf13 \strokec13 test\cf8 \strokec8 [\cf16 \strokec16 'expected_result'\cf8 \strokec8 ]:\cf11 \strokec11 \
      \cf14 \strokec14 print\cf8 \strokec8 (\cf16 \strokec16 "Failed:\cf11 \strokec11 \
\pard\pardeftab720\sl280\partightenfactor0
\cf16 \strokec16         containsTotal (\{0\}, \{1\})\cf11 \strokec11 \
\cf16 \strokec16         returned \{2\}\cf11 \strokec11 \
\cf16 \strokec16         expected \{3\}\cf11 \strokec11 \
\cf16 \strokec16         "\cf8 \strokec8 .\cf11 \strokec11  \cf14 \strokec14 format\cf8 \strokec8 (\cf11 \strokec11 \
          \cf13 \strokec13 test\cf8 \strokec8 [\cf16 \strokec16 'target'\cf8 \strokec8 ],\cf11 \strokec11 \
          \cf13 \strokec13 test\cf8 \strokec8 [\cf16 \strokec16 'array'\cf8 \strokec8 ],\cf11 \strokec11 \
          \cf15 \strokec15 not\cf11 \strokec11  \cf13 \strokec13 test\cf8 \strokec8 [\cf16 \strokec16 'expected_result'\cf8 \strokec8 ],\cf11 \strokec11 \
          \cf13 \strokec13 test\cf8 \strokec8 [\cf16 \strokec16 'expected_result'\cf8 \strokec8 ])\cf11 \strokec11 \
      \cf8 \strokec8 )\cf11 \strokec11 \
    \cf15 \strokec15 else\cf8 \strokec8 :\cf11 \strokec11 \
      \cf14 \strokec14 print\cf8 \strokec8 (\cf16 \strokec16 'Passed'\cf8 \strokec8 )\cf11 \strokec11 \
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 \cb1 \strokec7 Follow ups\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1573054929691708#follow-ups"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls5\ilvl0
\f3\b0\fs24 \cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Would this work with zeroes (if not already included)\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Would this work if there were negative integers? (brute force, O(n^2) and set based solutions should work)\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 What is the max (or min) length of a valid contiguous sequence? Modifying the set approach using a map instead can solve this two variations.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 How would you implement this on a 2D matrix (sum of a rectangle)? This is almost longer than the first question but has an interesting sub problem of getting rectangle sums in constant time after creating a helper cumulative matrix, which is explored further in\'a0{\field{\*\fldinst{HYPERLINK "https://our.intern.facebook.com/intern/wiki/Engineering/Interviewing/Ninja/Count_Ones_In_2D_Subgrid"}}{\fldrslt \cf6 \strokec6 this question}}.\
}