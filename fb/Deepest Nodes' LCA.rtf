{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\fswiss\fcharset0 Helvetica;\f4\fswiss\fcharset0 Helvetica-Bold;\f5\fnil\fcharset0 Monaco;
}
{\colortbl;\red255\green255\blue255;\red21\green23\blue25;\red255\green255\blue255;\red52\green56\blue63;
\red78\green84\blue93;\red41\green67\blue135;\red22\green25\blue31;\red83\green83\blue83;\red252\green244\blue202;
\red0\green0\blue0;\red0\green0\blue82;\red152\green18\blue15;\red76\green12\blue1;\red152\green46\blue3;
\red6\green50\blue15;}
{\*\expandedcolortbl;;\cssrgb\c10980\c11765\c12941;\cssrgb\c100000\c100000\c100000;\cssrgb\c26667\c28627\c31373;
\cssrgb\c37647\c40392\c43922;\cssrgb\c21176\c34510\c60000;\cssrgb\c11373\c12941\c16078;\cssrgb\c40000\c40000\c40000;\cssrgb\c99216\c96078\c83137;
\cssrgb\c0\c0\c0;\cssrgb\c0\c3922\c39608;\cssrgb\c66667\c13333\c6667;\cssrgb\c37647\c7059\c0;\cssrgb\c66667\c25098\c0;
\cssrgb\c0\c25098\c7059;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid202\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Deepest Nodes' LCA\
\pard\pardeftab720\sl520\qc\partightenfactor0

\f1\i\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl520\qc\partightenfactor0
\cf4 \strokec4 \
\pard\pardeftab720\sl520\qc\partightenfactor0

\f0\i0 \cf4 More Items\
\pard\pardeftab720\sl320\partightenfactor0

\f1\b0 \cf5 \strokec5 Owner:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/profile/?id=592650843"}}{\fldrslt \cf6 \strokec6 Nicholas Ormrod}}\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Medium\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Ninja\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 General\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \strokec2 Description\
\pard\pardeftab720\sl280\partightenfactor0

\f3\b0\fs24 \cf7 \strokec7 Given a tree, find the smallest subtree that contains all of the tree's deepest nodes. (ie, find the LCA of the deepest nodes)\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \strokec2 Question Statement\
\pard\pardeftab720\sl540\sa160\partightenfactor0

\f4\fs36 \cf7 \strokec7 Overview\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?page_mode=view&question_id=1463546713712082#overview"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 Given a tree, find the smallest subtree that contains all of the tree's deepest nodes.\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf8 \cb9 \strokec8 # Given the following tree:\cf10 \strokec10 \
        \cf11 \strokec11 a\cf10 \strokec10 \
      \cf12 \strokec12 /\cf10 \strokec10  \cf12 \strokec12 |\cf10 \strokec10  \cf11 \strokec11 \\\cf10 \strokec10 \
    \cf11 \strokec11 b\cf10 \strokec10    \cf11 \strokec11 c\cf10 \strokec10    \cf11 \strokec11 d\cf10 \strokec10 \
   \cf12 \strokec12 /\cf10 \strokec10  \cf11 \strokec11 \\\cf10 \strokec10       \cf12 \strokec12 |\cf10 \strokec10 \
  \cf11 \strokec11 e\cf10 \strokec10    \cf11 \strokec11 f\cf10 \strokec10      \cf11 \strokec11 g\cf10 \strokec10 \
 \cf12 \strokec12 /\cf10 \strokec10    \cf12 \strokec12 /\cf10 \strokec10  \cf11 \strokec11 \\\cf10 \strokec10 \
\pard\pardeftab720\sl280\partightenfactor0
\cf11 \strokec11 h\cf10 \strokec10    \cf11 \strokec11 i\cf10 \strokec10    \cf11 \strokec11 j\cf10 \strokec10 \
\
\cf11 \strokec11 depth\cf10 \strokec10  \cf11 \strokec11 of\cf10 \strokec10  \cf11 \strokec11 tree\cf12 \strokec12 :\cf10 \strokec10  \cf13 \strokec13 4\cf10 \strokec10 \
\cf11 \strokec11 deepest\cf10 \strokec10  \cf11 \strokec11 nodes\cf12 \strokec12 :\cf10 \strokec10  \cf12 \strokec12 [\cf11 \strokec11 h\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 i\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 j\cf12 \strokec12 ]\cf10 \strokec10 \
\cf11 \strokec11 lowest\cf10 \strokec10  \cf11 \strokec11 common\cf10 \strokec10  \cf11 \strokec11 ancestor\cf10 \strokec10  \cf11 \strokec11 of\cf10 \strokec10  \cf12 \strokec12 [\cf11 \strokec11 h\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 i\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 j\cf12 \strokec12 ]:\cf10 \strokec10  \cf11 \strokec11 b\cf10 \strokec10 \
\pard\pardeftab720\sl280\partightenfactor0
\cf14 \strokec14 return\cf12 \strokec12 :\cf10 \strokec10  \cf11 \strokec11 b\cf10 \strokec10 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf7 \cb1 \strokec7 TRY SOLVING THIS QUESTION ON A WHITEBOARD BEFORE READING FURTHER\
Time: 20 min, +-10\
Difficulty: Medium. Good candidates should get some solution. Asking in person is much easier than over the phone.\
Subquestions: if a candidate is getting stuck, there are several subquestions that they can solve, like getDepth(root), countNodesAtLevel(root, level), and leastCommonAncestor(n1, n2)\
\pard\pardeftab720\sl540\sa160\partightenfactor0

\f4\b\fs36 \cf7 Areas of signal\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?page_mode=view&question_id=1463546713712082#areas-of-signal"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0
\f3\b0\fs24 \cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Problem solving: This is an original question that, to my knowledge, has yet to make it to the internet. There are several solutions.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Code: If the candidate manages their code well, they will have structurally few bugs and control flow issues. Candidates who don't manage their code well will introduce bugs and corner cases.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Knowledge: Good solutions for this problem involve more coding and/or analysis prowess than average.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 Specific things to look for\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?page_mode=view&question_id=1463546713712082#specific-things-to-look"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls2\ilvl0
\f3\b0\fs24 \cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 do they assume that the tree is binary\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 do they have O(n) memory overhead when tracking the max-depth'd children; do they recognize this\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 do they use global variables\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 can they do a good walkthrough of their code\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 are their helper functions reusable\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 How to ask the question\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?page_mode=view&question_id=1463546713712082#how-to-ask-the-question"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls3\ilvl0
\f3\b0\fs24 \cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 write an example on the board\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 get them to identify:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl280\partightenfactor0
\ls3\ilvl1\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 the height of your example tree\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 the deepest nodes in your example tree\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 the smallest subtree containing the deepest nodes in your example tree\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls3\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 get them to write a function that solves this problem in general\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Asking for "the least common ancestor of the deepest nodes'" is ambiguous, because it sounds like there are only two nodes which are the deepest\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Seed the interviewee with the idea 'height of the tree' - it's important\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Say "smallest subtree containing" instead of "least common ancestor", because it uses less jargon and LCA is not a good approach\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	7.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Either (a) explicitly state that the tree is binary, or (b) have a ternary node in your example\
\pard\pardeftab720\sl540\sa160\partightenfactor0

\f4\b\fs36 \cf7 Possible solutions\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?page_mode=view&question_id=1463546713712082#possible-solutions"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 I've seen lots of solutions, but they mostly boil down to one of the following:\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 Recursive solution\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?page_mode=view&question_id=1463546713712082#recursive-solution"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 Pure recursive, can be optimized by memoizing getDepth.\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf8 \cb9 \strokec8 # time: O(n^2)\cf10 \strokec10 \
\cf8 \strokec8 # time in a balanced tree: O(nlogn)\cf10 \strokec10 \
\cf8 \strokec8 # space: O(depth)\cf10 \strokec10 \
\pard\pardeftab720\sl280\partightenfactor0
\cf11 \strokec11 def\cf10 \strokec10  \cf15 \strokec15 dlca\cf12 \strokec12 (\cf11 \strokec11 root\cf12 \strokec12 ):\cf10 \strokec10 \
    \cf11 \strokec11 def\cf10 \strokec10  \cf15 \strokec15 getDepth\cf12 \strokec12 (\cf11 \strokec11 root\cf12 \strokec12 ):\cf10 \strokec10 \
        \cf14 \strokec14 if\cf10 \strokec10  \cf14 \strokec14 not\cf10 \strokec10  \cf11 \strokec11 root\cf12 \strokec12 .\cf11 \strokec11 children\cf12 \strokec12 :\cf10 \strokec10 \
            \cf14 \strokec14 return\cf10 \strokec10  \cf13 \strokec13 1\cf10 \strokec10 \
        \cf14 \strokec14 return\cf10 \strokec10  \cf15 \strokec15 max\cf12 \strokec12 (\cf15 \strokec15 map\cf12 \strokec12 (\cf11 \strokec11 lambda\cf10 \strokec10  \cf11 \strokec11 c\cf12 \strokec12 :\cf10 \strokec10  \cf15 \strokec15 getDepth\cf12 \strokec12 (\cf11 \strokec11 c\cf12 \strokec12 ),\cf10 \strokec10  \cf11 \strokec11 root\cf12 \strokec12 .\cf11 \strokec11 children\cf12 \strokec12 ))\cf10 \strokec10  \cf12 \strokec12 +\cf10 \strokec10  \cf13 \strokec13 1\cf10 \strokec10 \
    \
    \cf11 \strokec11 maxd\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf13 \strokec13 0\cf10 \strokec10 \
    \cf11 \strokec11 deepest\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 None\cf10 \strokec10 \
    \cf11 \strokec11 maxv\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf13 \strokec13 0\cf10 \strokec10 \
    \cf14 \strokec14 for\cf10 \strokec10  \cf11 \strokec11 child\cf10 \strokec10  \cf11 \strokec11 in\cf10 \strokec10  \cf11 \strokec11 root\cf12 \strokec12 .\cf11 \strokec11 children\cf12 \strokec12 :\cf10 \strokec10 \
        \cf11 \strokec11 d\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf15 \strokec15 getDepth\cf12 \strokec12 (\cf11 \strokec11 child\cf12 \strokec12 )\cf10 \strokec10 \
        \cf14 \strokec14 if\cf10 \strokec10  \cf11 \strokec11 d\cf10 \strokec10  \cf12 \strokec12 >\cf10 \strokec10  \cf11 \strokec11 maxd\cf12 \strokec12 :\cf10 \strokec10 \
            \cf11 \strokec11 maxd\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 d\cf10 \strokec10 \
            \cf11 \strokec11 deepest\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 child\cf10 \strokec10 \
            \cf11 \strokec11 maxv\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf13 \strokec13 1\cf10 \strokec10 \
        \cf11 \strokec11 elif\cf10 \strokec10  \cf11 \strokec11 d\cf10 \strokec10  \cf12 \strokec12 ==\cf10 \strokec10  \cf11 \strokec11 maxd\cf12 \strokec12 :\cf10 \strokec10 \
            \cf11 \strokec11 maxv\cf10 \strokec10  \cf12 \strokec12 +=\cf10 \strokec10  \cf13 \strokec13 1\cf10 \strokec10 \
    \cf14 \strokec14 if\cf10 \strokec10  \cf11 \strokec11 maxv\cf10 \strokec10  \cf12 \strokec12 !=\cf10 \strokec10  \cf13 \strokec13 1\cf12 \strokec12 :\cf10 \strokec10 \
        \cf14 \strokec14 return\cf10 \strokec10  \cf11 \strokec11 root\cf10 \strokec10 \
    \cf14 \strokec14 return\cf10 \strokec10  \cf15 \strokec15 dlca\cf12 \strokec12 (\cf11 \strokec11 deepest\cf12 \strokec12 )\cf10 \strokec10 \
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 \cb1 \strokec7 LCA solution\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?page_mode=view&question_id=1463546713712082#lca-solution"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 This is a hard approach. There are a few variations, like making a dict to store the parent pointers to easily perform LCA. Most people who go down this path don't finish.\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf8 \cb9 \strokec8 # time: O(n^2)\cf10 \strokec10 \
\cf8 \strokec8 # space: O(n^2)\cf10 \strokec10 \
\pard\pardeftab720\sl280\partightenfactor0
\cf11 \strokec11 def\cf10 \strokec10  \cf15 \strokec15 dlca\cf12 \strokec12 (\cf11 \strokec11 root\cf12 \strokec12 ):\cf10 \strokec10 \
    \cf11 \strokec11 def\cf10 \strokec10  \cf15 \strokec15 getDepth\cf12 \strokec12 (\cf11 \strokec11 root\cf12 \strokec12 ):\cf10 \strokec10 \
        \cf14 \strokec14 if\cf10 \strokec10  \cf14 \strokec14 not\cf10 \strokec10  \cf11 \strokec11 root\cf12 \strokec12 .\cf11 \strokec11 children\cf12 \strokec12 :\cf10 \strokec10 \
            \cf14 \strokec14 return\cf10 \strokec10  \cf13 \strokec13 1\cf10 \strokec10 \
        \cf14 \strokec14 return\cf10 \strokec10  \cf15 \strokec15 max\cf12 \strokec12 (\cf15 \strokec15 map\cf12 \strokec12 (\cf11 \strokec11 lambda\cf10 \strokec10  \cf11 \strokec11 c\cf12 \strokec12 :\cf10 \strokec10  \cf15 \strokec15 getDepth\cf12 \strokec12 (\cf11 \strokec11 c\cf12 \strokec12 ),\cf10 \strokec10  \cf11 \strokec11 root\cf12 \strokec12 .\cf11 \strokec11 children\cf12 \strokec12 ))\cf10 \strokec10  \cf12 \strokec12 +\cf10 \strokec10  \cf13 \strokec13 1\cf10 \strokec10 \
\
    \cf11 \strokec11 def\cf10 \strokec10  \cf15 \strokec15 getNodesAtLevel\cf12 \strokec12 (\cf11 \strokec11 root\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 level\cf12 \strokec12 ):\cf10 \strokec10 \
        \cf14 \strokec14 if\cf10 \strokec10  \cf11 \strokec11 level\cf10 \strokec10  \cf12 \strokec12 ==\cf10 \strokec10  \cf13 \strokec13 1\cf12 \strokec12 :\cf10 \strokec10 \
            \cf14 \strokec14 return\cf10 \strokec10  \cf12 \strokec12 [\cf11 \strokec11 root\cf12 \strokec12 ]\cf10 \strokec10 \
        \cf14 \strokec14 return\cf10 \strokec10  \cf15 \strokec15 reduce\cf12 \strokec12 (\cf11 \strokec11 lambda\cf10 \strokec10  \cf11 \strokec11 c1\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 c2\cf12 \strokec12 :\cf10 \strokec10  \cf11 \strokec11 c1\cf10 \strokec10  \cf12 \strokec12 +\cf10 \strokec10  \cf11 \strokec11 c2\cf12 \strokec12 ,\cf10 \strokec10 \
                      \cf15 \strokec15 map\cf12 \strokec12 (\cf11 \strokec11 lambda\cf10 \strokec10  \cf11 \strokec11 c\cf12 \strokec12 :\cf10 \strokec10  \cf15 \strokec15 getNodesAtLevel\cf12 \strokec12 (\cf11 \strokec11 c\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 level\cf10 \strokec10  \cf12 \strokec12 -\cf10 \strokec10  \cf13 \strokec13 1\cf12 \strokec12 ),\cf10 \strokec10  \cf11 \strokec11 root\cf12 \strokec12 .\cf11 \strokec11 children\cf12 \strokec12 ),\cf10 \strokec10 \
                      \cf12 \strokec12 [])\cf10 \strokec10 \
\
    \cf11 \strokec11 def\cf10 \strokec10  \cf15 \strokec15 nodesToPaths\cf12 \strokec12 (\cf11 \strokec11 root\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 nodes\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 path\cf12 \strokec12 =[]):\cf10 \strokec10 \
        \cf11 \strokec11 newpath\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 path\cf10 \strokec10  \cf12 \strokec12 +\cf10 \strokec10  \cf12 \strokec12 [\cf11 \strokec11 root\cf12 \strokec12 ]\cf10 \strokec10 \
        \cf11 \strokec11 ret\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf12 \strokec12 []\cf10 \strokec10 \
        \cf14 \strokec14 if\cf10 \strokec10  \cf11 \strokec11 root\cf10 \strokec10  \cf11 \strokec11 in\cf10 \strokec10  \cf11 \strokec11 nodes\cf12 \strokec12 :\cf10 \strokec10 \
            \cf11 \strokec11 ret\cf12 \strokec12 .\cf15 \strokec15 append\cf12 \strokec12 (\cf11 \strokec11 newpath\cf12 \strokec12 )\cf10 \strokec10 \
        \cf14 \strokec14 return\cf10 \strokec10  \cf15 \strokec15 reduce\cf12 \strokec12 (\cf11 \strokec11 lambda\cf10 \strokec10  \cf11 \strokec11 c1\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 c2\cf12 \strokec12 :\cf10 \strokec10  \cf11 \strokec11 c1\cf10 \strokec10  \cf12 \strokec12 +\cf10 \strokec10  \cf11 \strokec11 c2\cf12 \strokec12 ,\cf10 \strokec10 \
                      \cf15 \strokec15 map\cf12 \strokec12 (\cf11 \strokec11 lambda\cf10 \strokec10  \cf11 \strokec11 c\cf12 \strokec12 :\cf10 \strokec10  \cf15 \strokec15 nodesToPaths\cf12 \strokec12 (\cf11 \strokec11 c\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 nodes\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 newpath\cf12 \strokec12 ),\cf10 \strokec10  \cf11 \strokec11 root\cf12 \strokec12 .\cf11 \strokec11 children\cf12 \strokec12 ),\cf10 \strokec10 \
                      \cf11 \strokec11 ret\cf12 \strokec12 )\cf10 \strokec10 \
\
    \cf11 \strokec11 def\cf10 \strokec10  \cf15 \strokec15 commonPrefix\cf12 \strokec12 (\cf11 \strokec11 path1\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 path2\cf12 \strokec12 ):\cf10 \strokec10 \
        \cf11 \strokec11 pos\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf15 \strokec15 min\cf12 \strokec12 (\cf15 \strokec15 len\cf12 \strokec12 (\cf11 \strokec11 path1\cf12 \strokec12 ),\cf10 \strokec10  \cf15 \strokec15 len\cf12 \strokec12 (\cf11 \strokec11 path2\cf12 \strokec12 ))\cf10 \strokec10  \cf12 \strokec12 -\cf10 \strokec10  \cf13 \strokec13 1\cf10 \strokec10 \
        \cf14 \strokec14 while\cf10 \strokec10  \cf11 \strokec11 pos\cf10 \strokec10  \cf12 \strokec12 >=\cf10 \strokec10  \cf13 \strokec13 0\cf10 \strokec10  \cf14 \strokec14 and\cf10 \strokec10  \cf11 \strokec11 path1\cf12 \strokec12 [\cf11 \strokec11 pos\cf12 \strokec12 ]\cf10 \strokec10  \cf12 \strokec12 !=\cf10 \strokec10  \cf11 \strokec11 path2\cf12 \strokec12 [\cf11 \strokec11 pos\cf12 \strokec12 ]:\cf10 \strokec10 \
            \cf11 \strokec11 pos\cf10 \strokec10  \cf12 \strokec12 -=\cf10 \strokec10  \cf13 \strokec13 1\cf10 \strokec10 \
        \cf14 \strokec14 return\cf10 \strokec10  \cf11 \strokec11 path1\cf12 \strokec12 [:\cf11 \strokec11 pos\cf12 \strokec12 +\cf13 \strokec13 1\cf12 \strokec12 ]\cf10 \strokec10 \
\
    \cf11 \strokec11 d\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf15 \strokec15 getDepth\cf12 \strokec12 (\cf11 \strokec11 root\cf12 \strokec12 )\cf10 \strokec10 \
    \cf11 \strokec11 deepest_nodes\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf15 \strokec15 getNodesAtLevel\cf12 \strokec12 (\cf11 \strokec11 root\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 d\cf12 \strokec12 )\cf10 \strokec10 \
    \cf11 \strokec11 paths_to_deepest_nodes\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf15 \strokec15 nodesToPaths\cf12 \strokec12 (\cf11 \strokec11 root\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 deepest_nodes\cf12 \strokec12 )\cf10 \strokec10 \
    \cf11 \strokec11 common_path\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf15 \strokec15 reduce\cf12 \strokec12 (\cf11 \strokec11 lambda\cf10 \strokec10  \cf11 \strokec11 p1\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 p2\cf12 \strokec12 :\cf10 \strokec10  \cf15 \strokec15 commonPrefix\cf12 \strokec12 (\cf11 \strokec11 p1\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 p2\cf12 \strokec12 ),\cf10 \strokec10  \cf11 \strokec11 paths_to_deepest_nodes\cf12 \strokec12 )\cf10 \strokec10 \
    \cf14 \strokec14 return\cf10 \strokec10  \cf11 \strokec11 common_path\cf12 \strokec12 [-\cf13 \strokec13 1\cf12 \strokec12 ]\cf10 \strokec10 \
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 \cb1 \strokec7 Optimal solution\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?page_mode=view&question_id=1463546713712082#optimal-solution"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 Generative-recursive multi-return single pass.\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf8 \cb9 \strokec8 # time: O(n)\cf10 \strokec10 \
\cf8 \strokec8 # space: O(depth)\cf10 \strokec10 \
\pard\pardeftab720\sl280\partightenfactor0
\cf11 \strokec11 def\cf10 \strokec10  \cf15 \strokec15 dlca\cf12 \strokec12 (\cf11 \strokec11 root\cf12 \strokec12 ):\cf10 \strokec10 \
    \cf11 \strokec11 def\cf10 \strokec10  \cf15 \strokec15 dlca_helper\cf12 \strokec12 (\cf11 \strokec11 root\cf12 \strokec12 ):\cf10 \strokec10 \
        \cf11 \strokec11 ans\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 root\cf10 \strokec10 \
        \cf11 \strokec11 maxd\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf13 \strokec13 0\cf10 \strokec10   \cf8 \strokec8 # max depth of a subtree\cf10 \strokec10 \
        \cf14 \strokec14 for\cf10 \strokec10  \cf11 \strokec11 child\cf10 \strokec10  \cf11 \strokec11 in\cf10 \strokec10  \cf11 \strokec11 root\cf12 \strokec12 .\cf11 \strokec11 children\cf12 \strokec12 :\cf10 \strokec10 \
            \cf12 \strokec12 (\cf11 \strokec11 a\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 d\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf15 \strokec15 dlca_helper\cf12 \strokec12 (\cf11 \strokec11 child\cf12 \strokec12 )\cf10 \strokec10 \
            \cf14 \strokec14 if\cf10 \strokec10  \cf11 \strokec11 d\cf10 \strokec10  \cf12 \strokec12 >\cf10 \strokec10  \cf11 \strokec11 maxd\cf12 \strokec12 :\cf10 \strokec10 \
                \cf11 \strokec11 ans\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 a\cf10 \strokec10 \
                \cf11 \strokec11 maxd\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 d\cf10 \strokec10 \
            \cf11 \strokec11 elif\cf10 \strokec10  \cf11 \strokec11 d\cf10 \strokec10  \cf12 \strokec12 ==\cf10 \strokec10  \cf11 \strokec11 maxd\cf12 \strokec12 :\cf10 \strokec10 \
                \cf11 \strokec11 ans\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 root\cf10 \strokec10 \
        \cf14 \strokec14 return\cf10 \strokec10  \cf11 \strokec11 ans\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 maxd\cf10 \strokec10  \cf12 \strokec12 +\cf10 \strokec10  \cf13 \strokec13 1\cf10 \strokec10 \
    \cf14 \strokec14 return\cf10 \strokec10  \cf15 \strokec15 dlca_helper\cf12 \strokec12 (\cf11 \strokec11 root\cf12 \strokec12 )[\cf13 \strokec13 0\cf12 \strokec12 ]\cf10 \strokec10 \
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 \cb1 \strokec7 How to salvage the question\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?page_mode=view&question_id=1463546713712082#how-to-salvage-the-quest"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 Sometimes, interviewees get into a rut with this question. Dig them out before too much interview time is wasted.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls4\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Trying to do an LCA-based approach => tell them to implement LCA as a helper function, and solve the rest of the problem independently\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Keeping track of a list of nodes => hint that they can count the number of deepest nodes, instead of tracking which specific nodes are the deepest\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Having trouble thinking of any optimization => tell them to ignore optimizations, and just get a working solution\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Having trouble deciding which optimization to do => pick one of their optimizations for them, and have them implement it\
}