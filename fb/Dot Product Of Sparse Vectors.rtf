{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\fswiss\fcharset0 Helvetica;\f4\fswiss\fcharset0 Helvetica-Bold;\f5\fnil\fcharset0 Monaco;
}
{\colortbl;\red255\green255\blue255;\red21\green23\blue25;\red255\green255\blue255;\red52\green56\blue63;
\red78\green84\blue93;\red41\green67\blue135;\red22\green25\blue31;\red152\green46\blue3;\red252\green244\blue202;
\red0\green0\blue0;\red0\green0\blue82;\red152\green18\blue15;\red6\green50\blue15;\red76\green12\blue1;
}
{\*\expandedcolortbl;;\cssrgb\c10980\c11765\c12941;\cssrgb\c100000\c100000\c100000;\cssrgb\c26667\c28627\c31373;
\cssrgb\c37647\c40392\c43922;\cssrgb\c21176\c34510\c60000;\cssrgb\c11373\c12941\c16078;\cssrgb\c66667\c25098\c0;\cssrgb\c99216\c96078\c83137;
\cssrgb\c0\c0\c0;\cssrgb\c0\c3922\c39608;\cssrgb\c66667\c13333\c6667;\cssrgb\c0\c25098\c7059;\cssrgb\c37647\c7059\c0;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Dot Product Of Sparse Vectors\
\pard\pardeftab720\sl520\qc\partightenfactor0

\f1\i\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl520\qc\partightenfactor0
\cf4 \strokec4 \
\pard\pardeftab720\sl520\qc\partightenfactor0

\f0\i0 \cf4 More Items\
\pard\pardeftab720\sl320\partightenfactor0

\f1\b0 \cf5 \strokec5 Owner:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/profile/?id=100006702965444"}}{\fldrslt \cf6 \strokec6 Thomas Witt}}\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Medium\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Ninja\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 General\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \strokec2 Description\
\pard\pardeftab720\sl280\partightenfactor0

\f3\b0\fs24 \cf7 \strokec7 What is a good storage strategy for sparse vectors such that we get fast dot product?\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \strokec2 Question Statement\
\pard\pardeftab720\sl280\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://our.intern.facebook.com/intern/hacktv/view/212687765795870/"}}{\fldrslt 
\f3\b0\fs24 \cf6 \strokec6 Ninja Brown Bag Recording}}
\f3\b0\fs24 \cf7 \strokec7 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.dropbox.com/s/qbk2vx5pxhn1ejq/DotProductOfSparseVectors.pdf?dl=0"}}{\fldrslt \cf6 \strokec6 Dot Product of Sparse Vectors Deck}}\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 Intro\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1066047343465904#intro"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 This is a question that takes the candidate through each of design, implementation, and algorithm analysis.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 Question\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1066047343465904#question"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i\b0\fs24 \cf7 Let's recall from math the definition of dot product. (This is not part of the interview, but it's good to have the candidate say it if they know it: given two vectors a and b, the dot product is a
\fs20 \sub 1
\fs24 \nosupersub b
\fs20 \sub 1
\fs24 \nosupersub \'a0+ a
\fs20 \sub 2
\fs24 \nosupersub b
\fs20 \sub 2
\fs24 \nosupersub \'a0+ ... + a
\fs20 \sub n
\fs24 \nosupersub b
\fs20 \sub n
\fs24 \nosupersub ) This is a simple algorithm, but what makes it interesting is application to sparse vectors. A sparse vector is a vector with most elements equal to zero - imagine a vector with millions of elements (or even infinite, as is the case for e.g. the Fourier Transform), but only ten thousand or so are nonzero. Now, a machine learning application loads many such vectors in memory (from a file or a database) and computes many such dot products.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\i0 \cf7 The question is twofold. First, what is a good storage strategy for sparse vectors such that we get fast dot product? We are looking for something compact that optimizes for dot product but not any other operation (e.g. we don't care for insertion or removal). Second, implement the dot product function.</i>\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 Canonical Answer\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1066047343465904#canonical-answer"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 The best storage is an array of pairs. Each pair consists of index and value. Pairs are stored ordered by index. The dot product proceeds as follows (an algorithm reminiscent of the merge part of merge sort).\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf8 \cb9 \strokec8 class\cf10 \strokec10  \cf11 \strokec11 Element\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
  \cf11 \strokec11 int\cf10 \strokec10  \cf11 \strokec11 index\cf12 \strokec12 ;\cf10 \strokec10 \
  \cf11 \strokec11 double\cf10 \strokec10  \cf11 \strokec11 value\cf12 \strokec12 ;\cf10 \strokec10 \
\
  \cf8 \strokec8 static\cf10 \strokec10  \cf11 \strokec11 double\cf10 \strokec10  \cf13 \strokec13 dotProduct\cf12 \strokec12 (\cf11 \strokec11 Element\cf12 \strokec12 []\cf10 \strokec10  \cf11 \strokec11 a\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 Element\cf12 \strokec12 []\cf10 \strokec10  \cf11 \strokec11 b\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
    \cf11 \strokec11 int\cf10 \strokec10  \cf11 \strokec11 i\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf14 \strokec14 0\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 j\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf14 \strokec14 0\cf12 \strokec12 ;\cf10 \strokec10 \
    \cf11 \strokec11 double\cf10 \strokec10  \cf11 \strokec11 result\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf14 \strokec14 0\cf12 \strokec12 ;\cf10 \strokec10 \
    \cf8 \strokec8 while\cf10 \strokec10  \cf12 \strokec12 (\cf11 \strokec11 i\cf10 \strokec10  \cf12 \strokec12 <\cf10 \strokec10  \cf11 \strokec11 a\cf12 \strokec12 .\cf11 \strokec11 length\cf10 \strokec10  \cf12 \strokec12 &&\cf10 \strokec10  \cf11 \strokec11 j\cf10 \strokec10  \cf12 \strokec12 <\cf10 \strokec10  \cf11 \strokec11 b\cf12 \strokec12 .\cf11 \strokec11 length\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
      \cf8 \strokec8 if\cf10 \strokec10  \cf12 \strokec12 (\cf11 \strokec11 a\cf12 \strokec12 [\cf11 \strokec11 i\cf12 \strokec12 ].\cf11 \strokec11 index\cf10 \strokec10  \cf12 \strokec12 <\cf10 \strokec10  \cf11 \strokec11 b\cf12 \strokec12 [\cf11 \strokec11 j\cf12 \strokec12 ].\cf11 \strokec11 index\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
        \cf12 \strokec12 ++\cf11 \strokec11 i\cf12 \strokec12 ;\cf10 \strokec10 \
      \cf12 \strokec12 \}\cf10 \strokec10  \cf8 \strokec8 else\cf10 \strokec10  \cf8 \strokec8 if\cf10 \strokec10  \cf12 \strokec12 (\cf11 \strokec11 a\cf12 \strokec12 [\cf11 \strokec11 i\cf12 \strokec12 ].\cf11 \strokec11 index\cf10 \strokec10  \cf12 \strokec12 >\cf10 \strokec10  \cf11 \strokec11 b\cf12 \strokec12 [\cf11 \strokec11 j\cf12 \strokec12 ].\cf11 \strokec11 index\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
        \cf12 \strokec12 ++\cf11 \strokec11 j\cf12 \strokec12 ;\cf10 \strokec10 \
      \cf12 \strokec12 \}\cf10 \strokec10  \cf8 \strokec8 else\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
        \cf11 \strokec11 result\cf10 \strokec10  \cf12 \strokec12 +=\cf10 \strokec10  \cf11 \strokec11 a\cf12 \strokec12 [\cf11 \strokec11 i\cf12 \strokec12 ++].\cf11 \strokec11 value\cf10 \strokec10  \cf12 \strokec12 *\cf10 \strokec10  \cf11 \strokec11 b\cf12 \strokec12 [\cf11 \strokec11 j\cf12 \strokec12 ++].\cf11 \strokec11 value\cf12 \strokec12 ;\cf10 \strokec10 \
      \cf12 \strokec12 \}\cf10 \strokec10 \
    \cf12 \strokec12 \}\cf10 \strokec10 \
    \cf8 \strokec8 return\cf10 \strokec10  \cf11 \strokec11 result\cf12 \strokec12 ;\cf10 \strokec10 \
  \cf12 \strokec12 \}\cf10 \strokec10 \
\pard\pardeftab720\sl280\partightenfactor0
\cf12 \strokec12 \}\cf10 \strokec10 \
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf7 \cb1 \strokec7 Discussion\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1066047343465904#discussion"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 A solid candidate will figure the right solution and implement it correctly.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Some propose poor designs. A hashtable is typical. Although technically working, a hashtable is much more heavyweight than a simple array of pairs and allocating many of those doesn't scale well. A singly-linked store also works but has 33% overhead for no good reason. If candidate proposes one of these solutions, discuss until the right solution comes about.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls2\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 There are many variations in the implementation. Some e.g. use nested while statements - pay attention to bounds handling.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls3\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Discuss a micro-optimization: the loop checks i < a.length && j < b.length, but inside the loop sometimes only one is changed. So the tests are sometimes redundant. How to refactor code so as to eliminate redundant testing? The optimized solution looks like below. Candidate should be able to at least describe what to do. This question is good for assessing communication skills and flexibility.\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf8 \cb9 \strokec8 static\cf10 \strokec10  \cf11 \strokec11 double\cf10 \strokec10  \cf13 \strokec13 dotProduct\cf12 \strokec12 (\cf11 \strokec11 Element\cf12 \strokec12 []\cf10 \strokec10  \cf11 \strokec11 a\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 Element\cf12 \strokec12 []\cf10 \strokec10  \cf11 \strokec11 b\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
  \cf8 \strokec8 if\cf10 \strokec10  \cf12 \strokec12 (\cf11 \strokec11 a\cf12 \strokec12 .\cf11 \strokec11 length\cf10 \strokec10  \cf12 \strokec12 ==\cf10 \strokec10  \cf14 \strokec14 0\cf10 \strokec10  \cf12 \strokec12 ||\cf10 \strokec10  \cf11 \strokec11 b\cf12 \strokec12 .\cf11 \strokec11 length\cf10 \strokec10  \cf12 \strokec12 ==\cf10 \strokec10  \cf14 \strokec14 0\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
    \cf8 \strokec8 return\cf10 \strokec10  \cf14 \strokec14 0\cf12 \strokec12 ;\cf10 \strokec10 \
  \cf12 \strokec12 \}\cf10 \strokec10 \
  \cf11 \strokec11 int\cf10 \strokec10  \cf11 \strokec11 i\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf14 \strokec14 0\cf12 \strokec12 ,\cf10 \strokec10  \cf11 \strokec11 j\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf14 \strokec14 0\cf12 \strokec12 ;\cf10 \strokec10 \
  \cf11 \strokec11 double\cf10 \strokec10  \cf11 \strokec11 result\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf14 \strokec14 0\cf12 \strokec12 ;\cf10 \strokec10 \
  \cf8 \strokec8 while\cf10 \strokec10  \cf12 \strokec12 (\cf11 \strokec11 true\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
    \cf8 \strokec8 if\cf10 \strokec10  \cf12 \strokec12 (\cf11 \strokec11 a\cf12 \strokec12 [\cf11 \strokec11 i\cf12 \strokec12 ].\cf11 \strokec11 index\cf10 \strokec10  \cf12 \strokec12 <\cf10 \strokec10  \cf11 \strokec11 b\cf12 \strokec12 [\cf11 \strokec11 j\cf12 \strokec12 ].\cf11 \strokec11 index\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
      \cf8 \strokec8 if\cf10 \strokec10  \cf12 \strokec12 (++\cf11 \strokec11 i\cf10 \strokec10  \cf12 \strokec12 ==\cf10 \strokec10  \cf11 \strokec11 a\cf12 \strokec12 .\cf11 \strokec11 length\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
        \cf8 \strokec8 break\cf12 \strokec12 ;\cf10 \strokec10 \
      \cf12 \strokec12 \}\cf10 \strokec10 \
    \cf12 \strokec12 \}\cf10 \strokec10  \cf8 \strokec8 else\cf10 \strokec10  \cf8 \strokec8 if\cf10 \strokec10  \cf12 \strokec12 (\cf11 \strokec11 a\cf12 \strokec12 [\cf11 \strokec11 i\cf12 \strokec12 ].\cf11 \strokec11 index\cf10 \strokec10  \cf12 \strokec12 >\cf10 \strokec10  \cf11 \strokec11 b\cf12 \strokec12 [\cf11 \strokec11 j\cf12 \strokec12 ].\cf11 \strokec11 index\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
      \cf8 \strokec8 if\cf10 \strokec10  \cf12 \strokec12 (++\cf11 \strokec11 j\cf10 \strokec10  \cf12 \strokec12 ==\cf10 \strokec10  \cf11 \strokec11 b\cf12 \strokec12 .\cf11 \strokec11 length\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
        \cf8 \strokec8 break\cf12 \strokec12 ;\cf10 \strokec10 \
      \cf12 \strokec12 \}\cf10 \strokec10 \
    \cf12 \strokec12 \}\cf10 \strokec10  \cf8 \strokec8 else\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
      \cf11 \strokec11 result\cf10 \strokec10  \cf12 \strokec12 +=\cf10 \strokec10  \cf11 \strokec11 a\cf12 \strokec12 [\cf11 \strokec11 i\cf12 \strokec12 ].\cf11 \strokec11 value\cf10 \strokec10  \cf12 \strokec12 *\cf10 \strokec10  \cf11 \strokec11 b\cf12 \strokec12 [\cf11 \strokec11 j\cf12 \strokec12 ].\cf11 \strokec11 value\cf12 \strokec12 ;\cf10 \strokec10 \
      \cf8 \strokec8 if\cf10 \strokec10  \cf12 \strokec12 (++\cf11 \strokec11 i\cf10 \strokec10  \cf12 \strokec12 ==\cf10 \strokec10  \cf11 \strokec11 a\cf12 \strokec12 .\cf11 \strokec11 length\cf10 \strokec10  \cf12 \strokec12 ||\cf10 \strokec10  \cf12 \strokec12 ++\cf11 \strokec11 j\cf10 \strokec10  \cf12 \strokec12 ==\cf10 \strokec10  \cf11 \strokec11 b\cf12 \strokec12 .\cf11 \strokec11 length\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
        \cf8 \strokec8 break\cf12 \strokec12 ;\cf10 \strokec10 \
      \cf12 \strokec12 \}\cf10 \strokec10 \
    \cf12 \strokec12 \}\cf10 \strokec10 \
  \cf12 \strokec12 \}\cf10 \strokec10 \
  \cf8 \strokec8 return\cf10 \strokec10  \cf11 \strokec11 result\cf12 \strokec12 ;\cf10 \strokec10 \
\pard\pardeftab720\sl280\partightenfactor0
\cf12 \strokec12 \}\cf10 \strokec10 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls4\ilvl0
\f3\fs24 \cf7 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Discuss worst-case complexity. What is the complexity? Correct answer: O(n1 + n2) or O(max(n1, n2)). If candidate says otherwise, work together to reach the right solution with e.g. examples.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls5\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Let's say we use the code in production for a while and we figure that very often one of the two vectors is much shorter than the other. What can we do to improve complexity for these situations? The expected answer: an algorithm that iterates linearly the shorter vector and does binary search in the longer one. Complexity is O(min(n1, n2) log(max(n1, n2))). Usually candidates don't have the time to actually implement the binary search part, but they should be able to describe the idea and assess complexity.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls6\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Binary search with optimization: do you really need to do a binary search over the entire larger array every time you iterate through the shorter array? Good candidates should figure that after each binary search they can eliminate the entire portion to the left at the found position. This is because the shorter vector is also sorted so there's no chance lower indexes will ever match. Question for candidate: does this improve the worst case complexity? Correct answer: it shouldn't, because if e.g. the largest index in the shorter array is smaller than the smallest index in the larger array, binary search will return virtually no information. Good candidates should be able to produce this or a similar example to justify their response.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls7\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Advanced: binary search has terrible cache behavior - jumps all over the place. How can we make the algorithm cache friendlier without sacrificing log behavior? Answer: start from the left edge and use an exponentially-increasing gait (1, 2, 4, 8, ...). This keeps complexity the same but is more cache friendly. Most candidates don't answer this, but it's worth discussing it a bit with the advanced ones.\
}