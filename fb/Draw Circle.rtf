{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fmodern\fcharset0 Courier;
\f3\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red22\green25\blue31;\red255\green255\blue255;\red42\green44\blue51;
\red249\green249\blue249;\red143\green144\blue150;\red147\green0\blue147;\red133\green85\blue4;\red41\green67\blue135;
\red208\green208\blue208;}
{\*\expandedcolortbl;;\cssrgb\c11373\c12941\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c21961\c22745\c25882;
\cssrgb\c98039\c98039\c98039;\cssrgb\c62745\c63137\c65490;\cssrgb\c65098\c14902\c64314;\cssrgb\c59608\c40784\c392;\cssrgb\c21176\c34510\c60000;
\cssrgb\c85098\c85098\c85098;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl860\partightenfactor0

\f0\b\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Draw Circle\
\pard\pardeftab720\sl480\sa100\partightenfactor0

\fs30 \cf2 \strokec2 WRITE DRAWCIRCLE() GIVEN PLOT(X, Y)\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0 \cf2 \strokec2 \
\cb3 For an intermediate level C++ programmer with some years of experience, giving a binary-tree printing question is somewhat humiliating. As interviewers, we really have to make sure the questions we give are challenging enough so they feel they are fairly being assessed. So here's a harder multi-part question.\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b\fs36 \cf2 \cb3 Notes\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 The below solution is buggy and will not produce a correct looking circle. For example, if the radius is 10,000, you would see really crappy looking circle. Also, the use of trig functions is unnecessary. A better solution is to loop X from 0 -> R/sqrt(2) to pick Y and draw your 1/8 of the circle. The use of SQRT inside the for loop can be optimized away, as mentioned in (3). This solution is kept below, as an example of a buggy solution\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b\fs36 \cf2 \cb3 Original solution\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 1. Say I have a screen and each dot has (x, y) as its coordinates, and we have just one function called plot(x, y) that will draw a dot right at (x, y). Write me a function that draws the outline of a circle:\
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf4 \cb5 \strokec4 void drawCircle(x, y, r) \{\
 
\f3\i \cf6 \strokec6 // ???
\f2\i0 \cf4 \strokec4 \
\}\
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb3 \strokec2 where (x, y) is center's coordinates and r is radius.\cb1 \
\cb3 To help people with no graphic background, this is also given: for any dot on a circle, if we draw a line from the dot to the center and its angle with x-axis is "t", its coordinate is calculated this way:\
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf4 \cb5 \strokec4 x = r * cos(t);\
y = r * sin(t);\
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb3 \strokec2 Ahh, we should expect someone quickly come up with an answer like this,\
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf4 \cb5 \strokec4 void drawCircle(x, y, r) \{\
 \cf7 \strokec7 for\cf4 \strokec4  (int t = \cf8 \strokec8 0\cf4 \strokec4 ; t < \cf8 \strokec8 360\cf4 \strokec4 ; t++) \{\
   plot(x + r * cos(t),y + r * sin(t));\
 \}\
\}\
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb3 \strokec2 Anticipated question: what is the requirement for quality of the circle? If I do 0 to 360 degree rotation, is it too coarse? Plus if get asked.\cb1 \
\cb3 2. Optimize the program we just wrote.\cb1 \
\cb3 This is the final answer:\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf4 \cb5 \strokec4 void drawCircle(x, y, r) \{\
\pard\pardeftab720\sl480\partightenfactor0

\f3\i \cf6 \strokec6 //  PS This circle will look pretty bad
\f2\i0 \cf4 \strokec4 \
  \cf7 \strokec7 static\cf4 \strokec4  bool inited = \cf7 \strokec7 false\cf4 \strokec4 ; \
  \cf7 \strokec7 static\cf4 \strokec4  double sin_value[\cf8 \strokec8 45\cf4 \strokec4 ];\
  \cf7 \strokec7 static\cf4 \strokec4  double cos_value[\cf8 \strokec8 45\cf4 \strokec4 ];\
  \cf7 \strokec7 if\cf4 \strokec4  (!inited) \{\
    \cf7 \strokec7 for\cf4 \strokec4  (int i = \cf8 \strokec8 0\cf4 \strokec4 ; i < \cf8 \strokec8 45\cf4 \strokec4 ; i++) \{\
      sin_value[i] = sin(i);\
      cos_value[i] = cos(i);\
    \}\
    inited = \cf7 \strokec7 true\cf4 \strokec4 ;\
  \}\
\
  \cf7 \strokec7 for\cf4 \strokec4  (int i = \cf8 \strokec8 0\cf4 \strokec4 ; i < \cf8 \strokec8 45\cf4 \strokec4 ; i++) \{\
    double rx = r * cos_value[i];\
    double ry = r * sin_value[i];\
    plot(x + rx, y + ry);\
    plot(x + rx, y - ry);\
    plot(x - rx, y + ry);\
    plot(x - rx, y - ry);\
    plot(x + ry, y + rx);\
    plot(x + ry, y - rx);\
    plot(x - ry, y + rx);\
    plot(x - ry, y - rx);\
  \}\
 \}\
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb3 \strokec2 So, what we are testing is how to identify bottleneck of a simple program. We expect an answer on re-calculation of sin() and cos(). We expect different level of optimizations:\cb1 \
\cb3 3) The veteran graphics programmer should know that you can actually code this without trig functions and without SQRT inside your loop. It's sometimes referred to as bresenham's algorithm. For more info, if you're given that option, goto here:\cb1 \
\pard\pardeftab720\sl480\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://l.facebook.com/l.php?u=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMidpoint_circle_algorithm&h=AT1pxu9B4k-17FrNbn7VS-cTuMAN7358Zxu98f0TKrgqbFWn_Xe58AZeJNpxPiFQsBFaffQgzAXb3vbeaHebu_PiafcscF-ZF7P8EXNLnkWrAFjOd9zNJuVoDifx7cnD4wPHmPHQqp2dWcfRX-5IFrnL"}}{\fldrslt \cf9 \cb3 \strokec9 http://en.wikipedia.org/wiki/Midpoint_circle_algorithm}}\
\pard\pardeftab720\sl480\partightenfactor0
\cf2 \cb3 4) For someone who would be doing graphics as part of their work, (a) awareness of the pixel grid would be a good observation. E.g: Are coordinate assumed to be in the center of the pixel?, and (b) should the perimeter of the circle be 4-connected or 8-connected?\cb1 \
\cb3 5) Someone with a good sense of geometry, (but not necessarily knowledge of the bresenham scheme) should be able to identify that the step size should be proportional to the radius: i.e: with a radius of 2 pixels, a step size of 1 degree is wasteful, but with a radius of 1000 pixels, a step size of 1 degree would be insufficient.\cb1 \
\pard\pardeftab720\sl480\sa150\partightenfactor0
\cf10 \cb10 \strokec10 \
\pard\pardeftab720\sl480\partightenfactor0
\cf2 \cb3 \strokec2 1. Observing symmetric points on a circle, so each loop we draw more dots with just one calculation of sin() and cos(). Most people will come up with 4-fold symmetric optimization. Give 8-fold answer a plus.\cb1 \
\cb3 2. Very importantly, expect optimization of storing pre-calculated sin() cos() in a static array. This is definitely something we want to see from an experienced C++ programmer that has done optimization work before.\cb1 \
}