{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red22\green25\blue31;\red255\green255\blue255;\red41\green67\blue135;
\red126\green129\blue138;\red0\green0\blue0;\red42\green44\blue51;\red249\green249\blue249;\red242\green245\blue249;
\red147\green0\blue147;\red50\green94\blue238;\red133\green85\blue4;}
{\*\expandedcolortbl;;\cssrgb\c11373\c12941\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c21176\c34510\c60000;
\cssrgb\c56471\c58039\c61176;\cssrgb\c0\c0\c0;\cssrgb\c21961\c22745\c25882;\cssrgb\c98039\c98039\c98039;\cssrgb\c96078\c96863\c98039;
\cssrgb\c65098\c14902\c64314;\cssrgb\c25098\c47059\c94902;\cssrgb\c59608\c40784\c392;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl860\partightenfactor0

\f0\b\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Dutch National Flag\
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 Owner:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/profile/?id=1077184107"}}{\fldrslt \cf4 \strokec4 Adam Simpkins}}\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f0\b \cf2 \cb3 \strokec2 Ninja Brown Bag Recording:
\f1\b0 \cf2 \strokec2 \'a0{\field{\*\fldinst{HYPERLINK "https://vod.thefacebook.com/#!/video/10768/Dutch+National+Flag"}}{\fldrslt \cf4 \strokec4 https://vod.thefacebook.com/#!/video/10768/Dutch+National+Flag}}\'a0\cb1 \

\f0\b \cf2 \cb3 \strokec2 PowerPoint:
\f1\b0 \cf2 \strokec2 \'a0{\field{\*\fldinst{HYPERLINK "https://www.dropbox.com/s/94d23rv1ydicfva/Ninja%20BB%20Dutch%20National%20Flrag.pptx?dl=0"}}{\fldrslt \cf4 \strokec4 https://www.dropbox.com/s/94d23rv1ydicfva/Ninja%20BB%20Dutch%20National%20Flrag.pptx?dl=0}}\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 Cautionary note\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 DNF is not yet banned but it is pretty controversial. If you're a new interviewer, consider starting with something else.\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/profile/?id=530929372"}}{\fldrslt \cf4 \strokec4 Keith Adams}}\'a0{\field{\*\fldinst{HYPERLINK "https://www.facebook.com/groups/einterviewers/permalink/862035037201557/"}}{\fldrslt \cf4 \strokec4 wrote}}:\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\i \cf5 \cb3 \strokec5 We seem to love this question. I've seen it come up in my RS's several times. I have never seen what I think of as a good interview conducted on the basis of this question, though. Interviewers I respect use it, and I'd like to understand what I'm missing about it. If there is, in fact, nothing I'm missing about it, I'd like to move us away from asking it.\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\i0\b\fs42 \cf2 \cb3 \strokec2 Info\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 This is a fairly universal ninja question. It can be solved a number of different ways, and provides a good opportunity to examine a candidate's basic programming skills.\cb1 \
\cb3 I find that this question can usually take the full interview, working through multiple different approaches to the problem. (It's rare that candidates immediately see one of the more efficient solutions, so you can work through a simpler solution, then one or two of the more efficient ones.)\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 Question Delivery\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 This is a fairly straightforward question to explain:\cb1 \
\pard\pardeftab720\sl480\partightenfactor0
\cf6 \cb3 \strokec6 Let's say we have a predefined function that takes an integer and classifies it as "low", "medium", or "high":\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf7 \cb8 \strokec7 getCategory(int n) --> L, M, H\
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf6 \cb3 \strokec6 Write a function that takes the array of integers, and sorts them by category (so the lows, are at the front, the mediums in the middle, and the highs are at the end).\cb1 \
\cb3 It doesn't really matter what the getCategory() function does. For instance, it might return L for everything less than 10, H for 20 and above, and M for everything in between.\cb1 \
\pard\pardeftab720\sl480\partightenfactor0
\cf2 \cb3 \strokec2 Make sure the candidate clearly understands the question at this point. If there is any confusion, feel free to provide an example.\cb1 \
\pard\pardeftab720\sl480\partightenfactor0
\cf6 \strokec6 \
\pard\pardeftab720\sl480\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\sl480\partightenfactor0
\cf2 \cb9 \strokec2 \'a0
\f0\b Notice!
\f1\b0 \'a0You may like to consider naming your categories\'a0
\f2 \cb8 '''R''', '''G''', '''B'''
\f1 \cb9 \'a0or something like that, to prevent confusions between numerical values of input numbers vs. their category.\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 \strokec2 Solutions\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 There are a variety of ways to solve this problem. Some are more efficient than others, but in general you should primarily be assessing the candidate's coding ability. Whether or not they can see a clever solution or not should matter much less than how well they perform when implementing a solution, and how well they are able to understand and explain their code.\cb1 \
\cb3 In general I find that most candidates pick one of the simpler solutions first. Occasionally some candidates will gravitate towards the one-pass in-place solution first. However, I generally encourage them to implement a simpler solution first, unless they are able to grasp the algorithm right away. You won't get much signal out of the interview if the candidate spends most of the time trying to figure out the algorith, and doesn't have time to write any code.\cb1 \
\cb3 NOTE:\'a0{\field{\*\fldinst{HYPERLINK "https://l.facebook.com/l.php?u=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSorting_algorithm%23Stability&h=AT2OlsG67hrqr58hW4fsCkboSre1rBSQ4gVCjCHPZdYK1NaLZA-eqXl4no1GQG5xVb0MVAX15CFG3z4qeg3A2c4yR9Jq7T0kFfKTNLT0kUEdaN_JcBInouUgLRl_p7mcQaFch2wimMH8PRCnK59mngOr"}}{\fldrslt 
\f0\b \cf4 \strokec4 Stability}}\'a0of the solution is a good question to ask after each implementation. Some of these solutions are stable, and some are not. (Extra point if the candidate points this out by themself.)\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b\fs36 \cf2 \cb3 (A) Standard Library Sorting Functions\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 This can easily be solved using built-in sorting functions provided by most language libraries. For example, a solution in python:\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf10 \cb8 \strokec10 array\cf7 \strokec7 .sort(key=get_category)\
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb3 \strokec2 Some candidates may even assume you are asking them to implement a generic sorting algorithm. If a candidate starts trying to implement quicksort or something similar I tell them that they are free to use any standard library functions they want, such as quicksort. Generally they should be able to explain how to do this.\cb1 \
\cb3 If a candidate picks this solution, I ask them to explain the trade-offs of this approach. Using a generic sorting algorithm is less efficient than a custom solution, but is very easy to implement. If you needed to solve this in real-life for a one-off prototype that didn't need to perform well, just using a generic sorting function might be an appropriate choice.\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b\fs36 \cf2 \cb3 (B) 3 Buckets\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 One commonly seen approach is to sort the elements into 3 new arrays, one each for low, medium, and high, and then join the arrays back together.\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf10 \cb8 \strokec10 def\cf7 \strokec7  \cf11 \strokec11 buckets\cf7 \strokec7 (array):\
    buckets = \{LOW: [], MED: [], HIGH: []\}\
    \cf10 \strokec10 for\cf7 \strokec7  n \cf10 \strokec10 in\cf7 \strokec7  array:\
        buckets[get_category(n)].append(n)\
    \cf10 \strokec10 return\cf7 \strokec7  buckets[LOW] + buckets[MED] + buckets[HIGH]\
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b\fs36 \cf2 \cb3 (C) Counting Pass, New Output Array\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 Iterate through the array, counting how many lows, mediums, and highs are present. Then use a separate pass to copy the elements into the appropriate location into a new output array.\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf10 \cb8 \strokec10 def\cf7 \strokec7  \cf11 \strokec11 counting_pass\cf7 \strokec7 (array):\
    counts = \{LOW: \cf12 \strokec12 0\cf7 \strokec7 , MED: \cf12 \strokec12 0\cf7 \strokec7 , HIGH: \cf12 \strokec12 0\cf7 \strokec7 \}\
    \cf10 \strokec10 for\cf7 \strokec7  n \cf10 \strokec10 in\cf7 \strokec7  array:\
        counts[get_category(n)] += \cf12 \strokec12 1\cf7 \strokec7 \
\
    indices = \{LOW: \cf12 \strokec12 0\cf7 \strokec7 , MED: counts[LOW], HIGH: counts[LOW] + counts[MED]\}\
    ret = [\cf12 \strokec12 0\cf7 \strokec7 ] * len(array)\
    \cf10 \strokec10 for\cf7 \strokec7  n \cf10 \strokec10 in\cf7 \strokec7  array:\
        c = get_category(n)\
        ret[indices[c]] = n\
        indices[c] += \cf12 \strokec12 1\cf7 \strokec7 \
    \cf10 \strokec10 return\cf7 \strokec7  ret\
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b\fs36 \cf2 \cb3 (D) Counting Pass, In Place\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 Iterate through the array, counting how many lows, mediums, and highs are present. Then use a separate pass to re-order the array elements into the correct locations in-place.\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf10 \cb8 \strokec10 def\cf7 \strokec7  \cf11 \strokec11 counting_pass_in_place\cf7 \strokec7 (array):\
    counts = \{LOW: \cf12 \strokec12 0\cf7 \strokec7 , MED: \cf12 \strokec12 0\cf7 \strokec7 , HIGH: \cf12 \strokec12 0\cf7 \strokec7 \}\
    \cf10 \strokec10 for\cf7 \strokec7  n \cf10 \strokec10 in\cf7 \strokec7  array:\
        counts[get_category(n)] += \cf12 \strokec12 1\cf7 \strokec7 \
\
    indices = \{LOW: \cf12 \strokec12 0\cf7 \strokec7 , MED: counts[LOW], HIGH: counts[LOW] + counts[MED]\}\
    end = \{LOW: counts[LOW], MED: counts[LOW] + counts[MED]\}\
    \cf10 \strokec10 for\cf7 \strokec7  cat \cf10 \strokec10 in\cf7 \strokec7  (LOW, MED):\
        \cf10 \strokec10 while\cf7 \strokec7  indices[cat] < end[cat]:\
            idx = indices[cat]\
            c = get_category(array[idx])\
            (array[indices[c]], array[idx]) = (array[idx], array[indices[c]])\
            indices[c] += \cf12 \strokec12 1\cf7 \strokec7 \
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 \strokec2 COMMON MISTAKES\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0 \cf2 \cb3 \strokec2 This is one of the more complicated solutions. Many candidates don't notice that they need to process the low category first, then skip over mediums that have already been put in the correct place before processing the remaining medium elements.\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b\fs36 \cf2 \cb3 (E) 2 Pass Partitioning\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 Perform one pass through the array partitioning the lows from (mediums and highs). Then use a second pass to partition the mediums from the highs.\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf10 \cb8 \strokec10 def\cf7 \strokec7  \cf11 \strokec11 two_pass_partitioning\cf7 \strokec7 (array):\
    \cf10 \strokec10 def\cf7 \strokec7  \cf11 \strokec11 partition\cf7 \strokec7 (arr, cat, start):\
        s = start\
        e = len(arr)\
        \cf10 \strokec10 while\cf7 \strokec7  s < e:\
            \cf10 \strokec10 if\cf7 \strokec7  get_category(arr[s]) == cat:\
                s += \cf12 \strokec12 1\cf7 \strokec7 \
            \cf10 \strokec10 else\cf7 \strokec7 :\
                e -= \cf12 \strokec12 1\cf7 \strokec7 \
                (arr[s], arr[e]) = (arr[e], arr[s])\
        \cf10 \strokec10 return\cf7 \strokec7  s\
\
    idx = partition(array, LOW, \cf12 \strokec12 0\cf7 \strokec7 )\
    partition(array, MED, idx)\
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b\fs36 \cf2 \cb3 (F) One Pass In Place (Option A)\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 Iterate through the array in one pass, swapping lows toward the front of the array, and highs toward the end.\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf10 \cb8 \strokec10 def\cf7 \strokec7  \cf11 \strokec11 one_pass\cf7 \strokec7 (array):\
    l_idx = \cf12 \strokec12 0\cf7 \strokec7 \
    h_idx = len(array)\
    idx = \cf12 \strokec12 0\cf7 \strokec7 \
    \cf10 \strokec10 while\cf7 \strokec7  idx < h_idx:\
        c = get_category(array[idx])\
        \cf10 \strokec10 if\cf7 \strokec7  c == LOW:\
            (array[l_idx], array[idx]) = (array[idx], array[l_idx])\
            l_idx += \cf12 \strokec12 1\cf7 \strokec7 \
            idx += \cf12 \strokec12 1\cf7 \strokec7 \
        \cf10 \strokec10 elif\cf7 \strokec7  c == MED:\
            idx += \cf12 \strokec12 1\cf7 \strokec7 \
        \cf10 \strokec10 elif\cf7 \strokec7  c == HIGH:\
            h_idx -= \cf12 \strokec12 1\cf7 \strokec7 \
            (array[h_idx], array[idx]) = (array[idx], array[h_idx])\
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 \strokec2 COMMON MISTAKES\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0 \cf2 \cb3 \strokec2 The iterator shouldn't be advanced when swapping a high element to the end of the array, since the element it was swapped with has not been examined yet.\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b\fs36 \cf2 \cb3 (G) One Pass In Place (Option B)\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 Iterate through the array in one pass, keeping everything to the left of the iterator sorted by category.\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf10 \cb8 \strokec10 def\cf7 \strokec7  \cf11 \strokec11 one_pass_variant\cf7 \strokec7 (array):\
    l_idx = \cf12 \strokec12 0\cf7 \strokec7 \
    m_idx = \cf12 \strokec12 0\cf7 \strokec7 \
    idx = \cf12 \strokec12 0\cf7 \strokec7 \
    \
    \cf10 \strokec10 for\cf7 \strokec7  idx, n \cf10 \strokec10 in\cf7 \strokec7  enumerate(array):\
        c = get_category(n)\
        \cf10 \strokec10 if\cf7 \strokec7  c == LOW:\
            (array[m_idx], array[idx]) = (array[idx], array[m_idx])\
            (array[l_idx], array[m_idx]) = (array[m_idx], array[l_idx])\
            m_idx += \cf12 \strokec12 1\cf7 \strokec7 \
            l_idx += \cf12 \strokec12 1\cf7 \strokec7 \
        \cf10 \strokec10 elif\cf7 \strokec7  c == MED:\
            (array[m_idx], array[idx]) = (array[idx], array[m_idx])\
            m_idx += \cf12 \strokec12 1\cf7 \strokec7 \
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 Variations\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\fs30 \cf2 \cb3 \strokec2 2 CATEGORIES\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0 \cf2 \cb3 \strokec2 If a candidate is struggling to see any solution, you can simplify the problem, and ask how the candidate would solve it if there were only two categories. Most candidates will be able to figure out how to partition the array at this point.\cb1 \
\cb3 It's usually a bad sign if you have to simplify the problem this way. I only resort to this if the candidate is really struggling to make any progress.\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 \strokec2 K CATEGORIES\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0 \cf2 \cb3 \strokec2 If the candidate finishes one of the in-place solutions, you can ask them how they would generalize it to support an arbitrary number of categories, rather than just 3.\cb1 \
\cb3 It is relatively straightforward to extend most solutions to support K categories, but you can see how easily the candidate is able to translate their code to support this.\cb1 \
\cb3 For solution F, one option is to keep the lower K/2 categories sorted at the front of the array, and the upper K/2 categories at the end of the array. This minimizes the number of swaps that need to be performed.\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 Advice\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\fs30 \cf2 \cb3 \strokec2 WRITE CODE EVEN FOR THE SIMPLE SOLUTIONS\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0 \cf2 \cb3 \strokec2 If the candidate explains one of the simpler solutions first, go ahead and have them code it on the board, rather than skipping directly to a harder solution.\cb1 \
\cb3 I've been surprised by the number of candidates that can explain the 3-buckets solution, but then have problems actually trying to implement it. I've found that it's worthwhile to take the time to write code for this. If the candidate is very good then it only takes a few extra minutes. Either way, I find that you get good signal out of this.\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 \strokec2 DON'T STRUGGLE FOR TOO LONG TRYING TO SEE AN EFFICIENT SOLUTION\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0 \cf2 \cb3 \strokec2 Many candidates will guess that this should be possible to do in place with a single pass. However, if they aren't able to immediately see how to do this, encourage them to implement a simpler solution first.\cb1 \
\cb3 Most of the signal you get from this question is watching the candidate code. You won't end up with very good signal if the candidate spends the entire interview trying to see a 1-pass solution, and does't have much time to write code.\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 \strokec2 DON'T JUST LOOK FOR THE ONE-PASS SOLUTION\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0 \cf2 \cb3 \strokec2 Interviewers drawn to asking this question often ask it because they find Edsger Dijsktra's one-pass solution (Solution F above) aesthetically pleasing. While it is arguably pretty, it isn't any more performant than the other in-place solutions. It is also arguably harder to generalize to more than 3 classes.\cb1 \
\cb3 Trying to drive a candidate towards Dijkstra's solution can waste a lot of time without generating commensurate signal. See the discussion at\'a0{\field{\*\fldinst{HYPERLINK "https://fb.facebook.com/groups/einterviewers/permalink/862035037201557"}}{\fldrslt \cf4 \strokec4 https://fb.facebook.com/groups/einterviewers/permalink/862035037201557/.}}\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 Signal\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 See the\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/wiki/Engineering/Interviewing/Ninja/Ninja_Interview_Generic_Signals/"}}{\fldrslt \cf4 \strokec4 Engineering/Interviewing/Ninja/Ninja_Interview_Generic_Signals}}\'a0page for generic tips about ninja interviewing signal.\cb1 \
\cb3 For this problem in particular it's easy for candidates to have off-by-one errors or boundary condition bugs.\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 \strokec2 PLANNING\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls1\ilvl0
\f1\b0 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Do they get stuck because of lack of planning?\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If they get stuck, can they take a step back and fix it?\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 THINKING\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls2\ilvl0
\f1\b0 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Do they think precisely about boundary conditions?\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Do they understand the algorithm invariants? (I don't expect candidates to necessarily think formally about the invariants, particularly candidates that have been out of school for a while, but this is nice to see.)\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 CORRECTNESS\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls3\ilvl0
\f1\b0 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Can they walk through an example correctly?\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Can they spot their own bugs?\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 \strokec2 History\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 This problem was originally proposed by W. H. J. Feijen and popularized by Dijkstra.\cb1 \
\cb3 It's called the\'a0{\field{\*\fldinst{HYPERLINK "https://l.facebook.com/l.php?u=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FDutch_national_flag_problem&h=AT06RCaSZqNpr73Xw7wE9WnfsBb_w_o8bsT0nhd7r93o-ysge2rbHbhnEE1mEGb0v_CbbujggIT9ZXdsz2ZtOkzVpgGeOrs-ZSntOmSEe0L7Ca-3kJo3XqrGAyAAW_7-ie0mV45qVVVxSg4CLEqWE645"}}{\fldrslt \cf4 \strokec4 "Dutch National Flag Problem"}}\'a0because the flag of the Netherlands is three colored stripes (red, white, blue) and they imagined an array of similarly colored balls. (Granted, there are lots of flags that fit this description... but both of the aforementioned gentlemen are Dutch.)\cb1 \
\cb3 It has a\'a0{\field{\*\fldinst{HYPERLINK "https://l.facebook.com/l.php?u=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FDutch_national_flag_problem&h=AT35inPsur3ZlUCKXgoe4swF1c-MePp4KlCoYxOfLZVjB3E7nXuMSDiqrArVxKPq02kCisV4mDOA2Xl1jvCLA-air4Dw1ZrbJuier9GP1Ej0ob6bYiAxF2uf3YnKRHmjrTNiUViZ3jz94q_W77lSCSHwc-QTgIn2R86PqA"}}{\fldrslt \cf4 \strokec4 wikipedia entry}}. Nonetheless, I personally have found relatively few candidates who are aware of this problem beforehand.\cb1 \
}