{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fmodern\fcharset0 Courier;
\f3\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red22\green25\blue31;\red255\green255\blue255;\red42\green44\blue51;
\red249\green249\blue249;\red133\green85\blue4;\red147\green0\blue147;\red143\green144\blue150;}
{\*\expandedcolortbl;;\cssrgb\c11373\c12941\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c21961\c22745\c25882;
\cssrgb\c98039\c98039\c98039;\cssrgb\c59608\c40784\c392;\cssrgb\c65098\c14902\c64314;\cssrgb\c62745\c63137\c65490;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl860\partightenfactor0

\f0\b\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Endianness\
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 Write a function in C that distinguishes the\'a0
\f0\b \cf2 \strokec2 endianness
\f1\b0 \cf2 \strokec2 \'a0of the architecture. It should return true in one case and false in the other.\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 Working solutions\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2\b0\fs30 \cf4 \cb5 \strokec4 int endian() \{\
  uint32 x = \cf6 \strokec6 1\cf4 \strokec4 ;\
  char *p = (char*)&x;\
  \cf7 \strokec7 return\cf4 \strokec4  *p;\
\}\
\pard\pardeftab720\sl480\partightenfactor0

\f3\i \cf8 \strokec8 // One candidate gave this answer, it turns out it's actually one cycle faster than the above solution on gcc 6.3 on x86_64 
\f2\i0 \cf4 \strokec4 \

\f3\i \cf8 \strokec8 #include <string.h>
\f2\i0 \cf4 \strokec4 \
int little_endian() \{\
  int value = \cf6 \strokec6 1\cf4 \strokec4 ;\
  char byte;\
  memcpy(&byte, &value, \cf6 \strokec6 1\cf4 \strokec4 );  \
  \cf7 \strokec7 return\cf4 \strokec4  byte;\
\}\
int endian() \{\
  union \{\
    uint32 x;\
    char a[\cf6 \strokec6 4\cf4 \strokec4 ];\
  \} u;\
\
  u.x = \cf6 \strokec6 1\cf4 \strokec4 ;\
  \cf7 \strokec7 return\cf4 \strokec4  u.a[\cf6 \strokec6 0\cf4 \strokec4 ];\
\}\

\f3\i \cf8 \strokec8 /* \cf7 \cb5 \strokec7 TODO:\cf8 \cb5 \strokec8  Fix this proposed solution. Something's wrong here!\
int endian() \{\
  uint32 x;\
  char *p = (char*)&x;\
  *p = 1;\
  return x;\
\}\
*/
\f2\i0 \cf4 \strokec4 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 \strokec2 Non-working solutions\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2\b0\fs30 \cf4 \cb5 \strokec4 int endian() \{\
  int x = \cf6 \strokec6 1\cf4 \strokec4 ;\
  \cf7 \strokec7 return\cf4 \strokec4  (x >> \cf6 \strokec6 1\cf4 \strokec4 );\
\}\
\
int endian() \{\
  int x = \cf6 \strokec6 1\cf4 \strokec4 ;\
  \cf7 \strokec7 return\cf4 \strokec4  (x & \cf6 \strokec6 0x00000001\cf4 \strokec4 );\
\}\
}