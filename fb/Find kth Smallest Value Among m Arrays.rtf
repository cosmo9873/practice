{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\fswiss\fcharset0 Helvetica;\f4\fmodern\fcharset0 Courier;\f5\fswiss\fcharset0 Helvetica-Bold;
\f6\fnil\fcharset0 Monaco;\f7\fmodern\fcharset0 Courier-Bold;}
{\colortbl;\red255\green255\blue255;\red21\green23\blue25;\red255\green255\blue255;\red52\green56\blue63;
\red78\green84\blue93;\red41\green67\blue135;\red22\green25\blue31;\red38\green38\blue38;\red228\green230\blue234;
\red152\green18\blue15;\red252\green244\blue202;\red76\green12\blue1;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c10980\c11765\c12941;\cssrgb\c100000\c100000\c100000;\cssrgb\c26667\c28627\c31373;
\cssrgb\c37647\c40392\c43922;\cssrgb\c21176\c34510\c60000;\cssrgb\c11373\c12941\c16078;\cssrgb\c20000\c20000\c20000;\cssrgb\c91373\c92157\c93333;
\cssrgb\c66667\c13333\c6667;\cssrgb\c99216\c96078\c83137;\cssrgb\c37647\c7059\c0;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Find kth Smallest Value Among m Arrays\
\pard\pardeftab720\sl520\qc\partightenfactor0

\f1\i\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl520\qc\partightenfactor0
\cf4 \strokec4 \
\pard\pardeftab720\sl520\qc\partightenfactor0

\f0\i0 \cf4 More Items\
\pard\pardeftab720\sl320\partightenfactor0

\f1\b0 \cf5 \strokec5 Owner:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/profile/?id=562340329"}}{\fldrslt \cf6 \strokec6 John Kurlak}}\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Hard\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Ninja\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Algorithm\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \strokec2 Description\
\pard\pardeftab720\sl280\partightenfactor0

\f3\b0\fs24 \cf7 \strokec7 You have\'a0
\f4 \cf8 \cb9 \strokec8 m
\f3 \cf7 \cb1 \strokec7 \'a0arrays of sorted integers. The sum of the array lengths is\'a0
\f4 \cf8 \cb9 \strokec8 n
\f3 \cf7 \cb1 \strokec7 . Find the\'a0
\f4 \cf8 \cb9 \strokec8 k
\f3 \cf7 \cb1 \strokec7 th smallest value of all the values.\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \strokec2 Question Statement\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\fs33 \cf7 \strokec7 Sample Input\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=172042379861765#sample-input"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\partightenfactor0

\f6\b0\fs20 \cf10 \cb11 \strokec10 [\cf12 \strokec12 1\cf10 \strokec10 ,\cf13 \strokec13  \cf12 \strokec12 3\cf10 \strokec10 ,\cf13 \strokec13  \cf12 \strokec12 5\cf10 \strokec10 ,\cf13 \strokec13  \cf12 \strokec12 7\cf10 \strokec10 ]\cf13 \strokec13 \
\cf10 \strokec10 [\cf12 \strokec12 2\cf10 \strokec10 ,\cf13 \strokec13  \cf12 \strokec12 4\cf10 \strokec10 ,\cf13 \strokec13  \cf12 \strokec12 6\cf10 \strokec10 ]\cf13 \strokec13 \
\cf10 \strokec10 [\cf12 \strokec12 8\cf10 \strokec10 ,\cf13 \strokec13  \cf12 \strokec12 9\cf10 \strokec10 ]\cf13 \strokec13 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf7 \cb1 \strokec7 (
\f4 \cf8 \cb9 \strokec8 m = 3
\f3 \cf7 \cb1 \strokec7 ,\'a0
\f4 \cf8 \cb9 \strokec8 n = 9
\f3 \cf7 \cb1 \strokec7 ,\'a0
\f4 \cf8 \cb9 \strokec8 k = 5
\f3 \cf7 \cb1 \strokec7 )\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 Sample Output\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=172042379861765#sample-output"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\partightenfactor0

\f6\b0\fs20 \cf12 \cb11 \strokec12 5\cf13 \strokec13 \
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 \cb1 \strokec7 What to Look For\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=172042379861765#what-to-look-for"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 There are a lot of different solutions for this problem. I would expect most candidates to be able to come up with the sort everything solution. From that, I might hint that if k=1 or k=2,\'a0
\f4 \cf8 \cb9 \strokec8 O(n lg n)
\f3 \cf7 \cb1 \strokec7 \'a0is probably slower than we need (e.g., we can just scan for the largest element). The candidate might then realize that with\'a0
\f4 \cf8 \cb9 \strokec8 k
\f3 \cf7 \cb1 \strokec7 scans, we can find the\'a0
\f4 \cf8 \cb9 \strokec8 k
\f3 \cf7 \cb1 \strokec7 th smallest element. The candidate might then discuss that we do either the\'a0
\f4 \cf8 \cb9 \strokec8 O(n lg n)
\f3 \cf7 \cb1 \strokec7 \'a0or the\'a0
\f4 \cf8 \cb9 \strokec8 O(nk)
\f3 \cf7 \cb1 \strokec7 \'a0algorithm depending on whether\'a0
\f4 \cf8 \cb9 \strokec8 k < lg n
\f3 \cf7 \cb1 \strokec7 . This is a good start. I'd ask the candidate if it's possible to come up with some sort of hybrid solution that doesn't require switching between two different algorithms. This is when I'd look for the heap-based solution. I'd expect good candidates to be able to come up with the heap-based solution. Anything worse is probably negative signal.\
I'd probably have the candidate code the heap-based solution. I'd let them assume a heap implementation already exists (e.g., PriorityQueue in Java).\
If the candidate finishes early, I'd then push for more problem-solving signal. I'd ask them what they'd do if heaps didn't exist (and see if they could realize that balanced Binary Search Trees would also work). I'd maybe ask them what they'd do if the only extra data structure they could use was an array (and see if they could come up with the array merging solution).\
I think a candidate that is able to code the heap-based solution quickly and correctly is probably a good candidate.\
For exceptional candidates, I might expect the quickselect solution, but I don't expect most candidates to come up with this.\
Other solutions are documented here for the purpose of exploring the problem-space and preparing interviewers for different approaches. I don't necessarily expect these solutions from candidates since they are algorithm and coding intense. If a candidate starts down one of these paths, I won't stop them. Once they come up with a fancy algorithm that works, I might have them code a simpler algorithm like the heap-based algorithm so they don't have to fill the entire whiteboard.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 Sort everything solution,\'a0
\f7 \cf8 \cb9 \strokec8 O(n lg n)
\f5 \cf7 \cb1 \strokec7 \'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=172042379861765#sort-everything-solution"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 Put all the values into a single array, sort that array, and return the\'a0
\f4 \cf8 \cb9 \strokec8 k
\f3 \cf7 \cb1 \strokec7 th smallest value of that array.\
Some candidates might also mention "linear" sorting methods like counting sort, bucket sort, or radix sort. These really aren't linear unless the range of integers is restricted. We can assume that the integer range is unbounded.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 Naive merge solution,\'a0
\f7 \cf8 \cb9 \strokec8 O(nm)
\f5 \cf7 \cb1 \strokec7 \'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=172042379861765#naive-merge-solution-o-n"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 Have a pointer at the first value of each array. Iterate over the pointers and find the pointer that points to the smallest value. Increment that pointer. The value we just passed is the smallest value. Repeatedly find the smallest value until we find the\'a0
\f4 \cf8 \cb9 \strokec8 k
\f3 \cf7 \cb1 \strokec7 th smallest value.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 Improved merge solution with heap,\'a0
\f7 \cf8 \cb9 \strokec8 O(n lg m)
\f5 \cf7 \cb1 \strokec7 \'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=172042379861765#improved-merge-solution"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 This is the same as the "Naive merge solution", but instead of iterating over all of the pointers to find the pointer that points to the smallest value, we use a min heap. The heap has a value for each array, and that value is a tuple comprised of the array index (range\'a0
\f4 \cf8 \cb9 \strokec8 0
\f3 \cf7 \cb1 \strokec7 \'a0to\'a0
\f4 \cf8 \cb9 \strokec8 m-1
\f3 \cf7 \cb1 \strokec7 ) and the pointer position within that array (range\'a0
\f4 \cf8 \cb9 \strokec8 0
\f3 \cf7 \cb1 \strokec7 \'a0to\'a0
\f4 \cf8 \cb9 \strokec8 n-1
\f3 \cf7 \cb1 \strokec7 ). The comparator for the heap uses the array values for comparison.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 Improved merge solution with divide and conquer,\'a0
\f7 \cf8 \cb9 \strokec8 O(n lg m)
\f5 \cf7 \cb1 \strokec7 \'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=172042379861765#improved-merge-solution-1"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 Order the arrays by length, from smallest to largest. Then perform a divide-and-conquer merge of the arrays, subject to the following conditions:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 If m = 1, output the single array.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 If m = 2, perform a sorted, pairwise merge of the two arrays.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 If m > 2, recursively merge the left m/2 arrays and recursively merge the right m/2 arrays, and then perform a sorted, pairwise merge of the two resulting arrays.\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf7 At the end, you're left with a sorted array of all the array values. Return the\'a0
\f4 \cf8 \cb9 \strokec8 k
\f3 \cf7 \cb1 \strokec7 th smallest value of that array.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 Quickselect solution,\'a0
\f7 \cf8 \cb9 \strokec8 O(n)
\f5 \cf7 \cb1 \strokec7 \'a0expected\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=172042379861765#quickselect-solution-o-n"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 You can put all of the values into a single array and then perform\'a0{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Quickselect"}}{\fldrslt \cf6 \strokec6 quickselect}}. This takes\'a0
\f4 \cf8 \cb9 \strokec8 O(n)
\f3 \cf7 \cb1 \strokec7 \'a0time on average but can degrade to\'a0
\f4 \cf8 \cb9 \strokec8 O(n^2)
\f3 \cf7 \cb1 \strokec7 \'a0in the worst case.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 Median-of-medians solution,\'a0
\f7 \cf8 \cb9 \strokec8 O(n)
\f5 \cf7 \cb1 \strokec7 \'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=172042379861765#median-of-medians-soluti"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 This improves quickselect, making it run in\'a0
\f4 \cf8 \cb9 \strokec8 O(n)
\f3 \cf7 \cb1 \strokec7 \'a0time in the worst case. Please don't let interviewees code this, but bonus points if they are aware of it.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 Quickselect with binary search solution,\'a0
\f7 \cf8 \cb9 \strokec8 O(m^2 lg^2 n)
\f5 \cf7 \cb1 \strokec7 \'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=172042379861765#quickselect-with-binary"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls2\ilvl0
\f3\b0\fs24 \cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 We can count the number of values <=\'a0
\f4 \cf8 \cb9 \strokec8 x
\f3 \cf7 \cb1 \strokec7 \'a0in a single array with an\'a0
\f4 \cf8 \cb9 \strokec8 O(lg n)
\f3 \cf7 \cb1 \strokec7 \'a0binary search.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Therefore, we can find the number of values <=\'a0
\f4 \cf8 \cb9 \strokec8 x
\f3 \cf7 \cb1 \strokec7 \'a0in all arrays in\'a0
\f4 \cf8 \cb9 \strokec8 O(m lg n)
\f3 \cf7 \cb1 \strokec7 \'a0time.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 We can then check if the\'a0
\f4 \cf8 \cb9 \strokec8 k
\f3 \cf7 \cb1 \strokec7 th smallest value is present in a given array by binary searching that array for a value,\'a0
\f4 \cf8 \cb9 \strokec8 x
\f3 \cf7 \cb1 \strokec7 , that has\'a0
\f4 \cf8 \cb9 \strokec8 k
\f3 \cf7 \cb1 \strokec7 \'a0numbers <= to it across all arrays in\'a0
\f4 \cf8 \cb9 \strokec8 O(m lg^2 n)
\f3 \cf7 \cb1 \strokec7 \'a0time.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Therefore, we can find the\'a0
\f4 \cf8 \cb9 \strokec8 k
\f3 \cf7 \cb1 \strokec7 th smallest value by individually checking each array to see if it contains the\'a0
\f4 \cf8 \cb9 \strokec8 k
\f3 \cf7 \cb1 \strokec7 th smallest value in\'a0
\f4 \cf8 \cb9 \strokec8 O(m^2 lg^2 n)
\f3 \cf7 \cb1 \strokec7 \'a0time.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f5\b\fs33 \cf7 Quickselect with binary search solution 2,\'a0
\f7 \cf8 \cb9 \strokec8 O(m lg^2 n)
\f5 \cf7 \cb1 \strokec7 \'a0expected\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=172042379861765#quickselect-with-binary-1"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls3\ilvl0
\f3\b0\fs24 \cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Maintain a working slice for each array (two pointers per array--start index and end index)--originally each slice contains the entire array.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Also maintain a count of all the elements across the working slices (initially let\'a0
\f4 \cf8 \cb9 \strokec8 count = n
\f3 \cf7 \cb1 \strokec7 ).\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Pick a random number in the range\'a0
\f4 \cf8 \cb9 \strokec8 [0, count - 1]
\f3 \cf7 \cb1 \strokec7 .\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Iterate over the arrays to find the element at that index within the working slices in\'a0
\f4 \cf8 \cb9 \strokec8 O(m)
\f3 \cf7 \cb1 \strokec7 \'a0time (call this the partition element).\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Now do a binary search in each array's working slice for the rightmost element <= the partition element in\'a0
\f4 \cf8 \cb9 \strokec8 O(m lg n)
\f3 \cf7 \cb1 \strokec7 \'a0time.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 For each array, count the number of elements from the left side of the slice to the rightmost element <= the partition element in\'a0
\f4 \cf8 \cb9 \strokec8 O(m)
\f3 \cf7 \cb1 \strokec7 \'a0time. Sum those counts together and call that\'a0
\f4 \cf8 \cb9 \strokec8 newCount
\f3 \cf7 \cb1 \strokec7 .\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	7.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Compare\'a0
\f4 \cf8 \cb9 \strokec8 newCount
\f3 \cf7 \cb1 \strokec7 \'a0to\'a0
\f4 \cf8 \cb9 \strokec8 k
\f3 \cf7 \cb1 \strokec7 .\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	8.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 If\'a0
\f4 \cf8 \cb9 \strokec8 newCount == k
\f3 \cf7 \cb1 \strokec7 , then the partition element is the\'a0
\f4 \cf8 \cb9 \strokec8 k
\f3 \cf7 \cb1 \strokec7 th smallest value.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	9.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 If\'a0
\f4 \cf8 \cb9 \strokec8 newCount > k
\f3 \cf7 \cb1 \strokec7 , then shrink the size of the slice with the partition element so that the partition element is no longer included and update\'a0
\f4 \cf8 \cb9 \strokec8 count
\f3 \cf7 \cb1 \strokec7 accordingly; do the same for each of the other slices and update\'a0
\f4 \cf8 \cb9 \strokec8 count
\f3 \cf7 \cb1 \strokec7 \'a0accordingly; pick another partition element from the updated slices and repeat.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	10.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 If\'a0
\f4 \cf8 \cb9 \strokec8 newCount < k
\f3 \cf7 \cb1 \strokec7 , then shrink the size of the slice with the partition element so that the partition element and anything smaller than it is no longer included and update\'a0
\f4 \cf8 \cb9 \strokec8 count
\f3 \cf7 \cb1 \strokec7 \'a0accordingly; do the same for each of the other slices and update\'a0
\f4 \cf8 \cb9 \strokec8 count
\f3 \cf7 \cb1 \strokec7 \'a0accordingly; pick another partition element from the updated slices and repeat with\'a0
\f4 \cf8 \cb9 \strokec8 k = k - newCount
\f3 \cf7 \cb1 \strokec7 .\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	11.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 The expectation is that partitioning divides the size of the working slices in ~2 on average, so we should expect to partition the values\'a0
\f4 \cf8 \cb9 \strokec8 O(lg n)
\f3 \cf7 \cb1 \strokec7 \'a0times. Since choosing a random partition takes\'a0
\f4 \cf8 \cb9 \strokec8 O(m)
\f3 \cf7 \cb1 \strokec7 \'a0time, and partitioning the slices about that value takes\'a0
\f4 \cf8 \cb9 \strokec8 O(m lg n)
\f3 \cf7 \cb1 \strokec7 \'a0time, the overall algorithm takes\'a0
\f4 \cf8 \cb9 \strokec8 O(lg n * (m + m lg n))
\f3 \cf7 \cb1 \strokec7 , which is\'a0
\f4 \cf8 \cb9 \strokec8 O(m lg^2 n)
\f3 \cf7 \cb1 \strokec7 .\
}