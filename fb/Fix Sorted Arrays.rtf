{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\fswiss\fcharset0 Helvetica;\f4\fswiss\fcharset0 Helvetica-Bold;\f5\fnil\fcharset0 Monaco;
}
{\colortbl;\red255\green255\blue255;\red21\green23\blue25;\red255\green255\blue255;\red52\green56\blue63;
\red78\green84\blue93;\red41\green67\blue135;\red22\green25\blue31;\red152\green46\blue3;\red252\green244\blue202;
\red0\green0\blue0;\red0\green0\blue82;\red152\green18\blue15;\red6\green50\blue15;\red83\green83\blue83;
\red76\green12\blue1;}
{\*\expandedcolortbl;;\cssrgb\c10980\c11765\c12941;\cssrgb\c100000\c100000\c100000;\cssrgb\c26667\c28627\c31373;
\cssrgb\c37647\c40392\c43922;\cssrgb\c21176\c34510\c60000;\cssrgb\c11373\c12941\c16078;\cssrgb\c66667\c25098\c0;\cssrgb\c99216\c96078\c83137;
\cssrgb\c0\c0\c0;\cssrgb\c0\c3922\c39608;\cssrgb\c66667\c13333\c6667;\cssrgb\c0\c25098\c7059;\cssrgb\c40000\c40000\c40000;
\cssrgb\c37647\c7059\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Fix Sorted Arrays\
\pard\pardeftab720\sl520\qc\partightenfactor0

\f1\i\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl520\qc\partightenfactor0
\cf4 \strokec4 \
\pard\pardeftab720\sl520\qc\partightenfactor0

\f0\i0 \cf4 More Items\
\pard\pardeftab720\sl320\partightenfactor0

\f1\b0 \cf5 \strokec5 Owner:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/profile/?id=537974821"}}{\fldrslt \cf6 \strokec6 Raj Sundaram}}\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Medium\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Ninja\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Algorithm\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \strokec2 Description\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 \strokec7 You have an array of N integers. There are M contiguous segments that are sorted within the array, but the whole array is not sorted. N >> M. How to produce a sorted version of this array?\
\pard\pardeftab720\sl280\partightenfactor0
\cf7 [1,3,5,2,4,6,10,20,30,11,12,23]\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \strokec2 Question Statement\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\fs24 \cf7 \strokec7 Typical approaches:
\f3\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 just sort the damn thing: O(N lg N)\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 break into M pieces and merge: O(NM) or O(N lg M)\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 bitmap/frequency counting O(N) (But with exponential memory usage)\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b \cf7 Sample Solution (JS):
\f3\b0 \
Just sort the damn thing.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls2\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Time: O(n lg n)\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf8 \cb9 \strokec8 function\cf10 \strokec10  \cf11 \strokec11 fixSortedArrays\cf12 \strokec12 (\cf11 \strokec11 arr\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
  \cf8 \strokec8 return\cf10 \strokec10  \cf11 \strokec11 arr\cf12 \strokec12 .\cf13 \strokec13 sort\cf12 \strokec12 ();\cf10 \strokec10 \
\pard\pardeftab720\sl280\partightenfactor0
\cf12 \strokec12 \}\cf10 \strokec10 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b\fs24 \cf7 \cb1 \strokec7 Sample Solution (JS):
\f3\b0 \
Break the array into m segments and merge them.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls3\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Time: O(n * m)\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Extra Space: O(n)\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf8 \cb9 \strokec8 function\cf10 \strokec10  \cf11 \strokec11 fixSortedArrays\cf12 \strokec12 (\cf11 \strokec11 arr\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
  \cf14 \strokec14 // Create segments\cf10 \strokec10 \
  \cf14 \strokec14 // Time O(n), space O(n)\cf10 \strokec10 \
  \cf11 \strokec11 let\cf10 \strokec10  \cf11 \strokec11 arrs\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf12 \strokec12 [];\cf10 \strokec10 \
  \cf8 \strokec8 for\cf10 \strokec10  \cf12 \strokec12 (\cf11 \strokec11 let\cf10 \strokec10  \cf11 \strokec11 idx\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf15 \strokec15 0\cf12 \strokec12 ;\cf10 \strokec10  \cf11 \strokec11 idx\cf10 \strokec10  \cf12 \strokec12 <\cf10 \strokec10  \cf11 \strokec11 arr\cf12 \strokec12 .\cf11 \strokec11 length\cf12 \strokec12 ;\cf10 \strokec10  \cf11 \strokec11 idx\cf12 \strokec12 ++)\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
    \cf11 \strokec11 let\cf10 \strokec10  \cf11 \strokec11 val\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 arr\cf12 \strokec12 [\cf11 \strokec11 idx\cf12 \strokec12 ];\cf10 \strokec10 \
    \cf8 \strokec8 if\cf10 \strokec10  \cf12 \strokec12 (\cf11 \strokec11 idx\cf10 \strokec10  \cf12 \strokec12 ===\cf10 \strokec10  \cf15 \strokec15 0\cf10 \strokec10  \cf12 \strokec12 ||\cf10 \strokec10  \cf11 \strokec11 val\cf10 \strokec10  \cf12 \strokec12 <=\cf10 \strokec10  \cf11 \strokec11 arr\cf12 \strokec12 [\cf11 \strokec11 idx\cf10 \strokec10  \cf12 \strokec12 -\cf10 \strokec10  \cf15 \strokec15 1\cf12 \strokec12 ])\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
      \cf11 \strokec11 arrs\cf12 \strokec12 .\cf13 \strokec13 push\cf12 \strokec12 ([\cf11 \strokec11 val\cf12 \strokec12 ]);\cf10 \strokec10 \
    \cf12 \strokec12 \}\cf10 \strokec10  \cf8 \strokec8 else\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
      \cf11 \strokec11 arrs\cf12 \strokec12 [\cf11 \strokec11 arrs\cf12 \strokec12 .\cf11 \strokec11 length\cf10 \strokec10  \cf12 \strokec12 -\cf10 \strokec10  \cf15 \strokec15 1\cf12 \strokec12 ].\cf13 \strokec13 push\cf12 \strokec12 (\cf11 \strokec11 val\cf12 \strokec12 );\cf10 \strokec10 \
    \cf12 \strokec12 \}\cf10 \strokec10 \
  \cf12 \strokec12 \}\cf10 \strokec10 \
\
  \cf14 \strokec14 // Merge segments\cf10 \strokec10 \
  \cf14 \strokec14 // Time O(m * n), space O(n)\cf10 \strokec10 \
  \cf11 \strokec11 let\cf10 \strokec10  \cf11 \strokec11 out\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf12 \strokec12 [];\cf10 \strokec10 \
  \cf11 \strokec11 let\cf10 \strokec10  \cf11 \strokec11 indices\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 arrs\cf12 \strokec12 .\cf13 \strokec13 map\cf12 \strokec12 (\cf11 \strokec11 _\cf10 \strokec10  \cf12 \strokec12 =>\cf10 \strokec10  \cf15 \strokec15 0\cf12 \strokec12 );\cf10 \strokec10 \
  \cf8 \strokec8 while\cf10 \strokec10  \cf12 \strokec12 (\cf11 \strokec11 out\cf12 \strokec12 .\cf11 \strokec11 length\cf10 \strokec10  \cf12 \strokec12 <\cf10 \strokec10  \cf11 \strokec11 arr\cf12 \strokec12 .\cf11 \strokec11 length\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
    \cf11 \strokec11 let\cf10 \strokec10  \cf11 \strokec11 smallest\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 null\cf12 \strokec12 ;\cf10 \strokec10 \
    \cf8 \strokec8 for\cf10 \strokec10  \cf12 \strokec12 (\cf11 \strokec11 let\cf10 \strokec10  \cf11 \strokec11 idx\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf15 \strokec15 0\cf12 \strokec12 ;\cf10 \strokec10  \cf11 \strokec11 idx\cf10 \strokec10  \cf12 \strokec12 <\cf10 \strokec10  \cf11 \strokec11 indices\cf12 \strokec12 .\cf11 \strokec11 length\cf12 \strokec12 ;\cf10 \strokec10  \cf11 \strokec11 idx\cf12 \strokec12 ++)\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
      \cf8 \strokec8 if\cf10 \strokec10  \cf12 \strokec12 (\cf11 \strokec11 indices\cf12 \strokec12 [\cf11 \strokec11 idx\cf12 \strokec12 ]\cf10 \strokec10  \cf12 \strokec12 >=\cf10 \strokec10  \cf11 \strokec11 arrs\cf12 \strokec12 [\cf11 \strokec11 idx\cf12 \strokec12 ].\cf11 \strokec11 length\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
        \cf8 \strokec8 continue\cf12 \strokec12 ;\cf10 \strokec10 \
      \cf12 \strokec12 \}\cf10 \strokec10 \
      \cf8 \strokec8 if\cf10 \strokec10  \cf12 \strokec12 (\cf10 \strokec10 \
        \cf11 \strokec11 smallest\cf10 \strokec10  \cf12 \strokec12 ===\cf10 \strokec10  \cf11 \strokec11 null\cf10 \strokec10  \cf12 \strokec12 ||\cf10 \strokec10 \
        \cf11 \strokec11 arrs\cf12 \strokec12 [\cf11 \strokec11 idx\cf12 \strokec12 ][\cf11 \strokec11 indices\cf12 \strokec12 [\cf11 \strokec11 idx\cf12 \strokec12 ]]\cf10 \strokec10  \cf12 \strokec12 <\cf10 \strokec10  \cf11 \strokec11 arrs\cf12 \strokec12 [\cf11 \strokec11 smallest\cf12 \strokec12 ][\cf11 \strokec11 indices\cf12 \strokec12 [\cf11 \strokec11 smallest\cf12 \strokec12 ]]\cf10 \strokec10 \
      \cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
        \cf11 \strokec11 smallest\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 idx\cf12 \strokec12 ;\cf10 \strokec10 \
      \cf12 \strokec12 \}\cf10 \strokec10 \
    \cf12 \strokec12 \}\cf10 \strokec10 \
\
    \cf11 \strokec11 out\cf12 \strokec12 .\cf13 \strokec13 push\cf12 \strokec12 (\cf11 \strokec11 arrs\cf12 \strokec12 [\cf11 \strokec11 smallest\cf12 \strokec12 ][\cf11 \strokec11 indices\cf12 \strokec12 [\cf11 \strokec11 smallest\cf12 \strokec12 ]]);\cf10 \strokec10 \
    \cf11 \strokec11 indices\cf12 \strokec12 [\cf11 \strokec11 smallest\cf12 \strokec12 ]++;\cf10 \strokec10 \
  \cf12 \strokec12 \}\cf10 \strokec10 \
\
  \cf8 \strokec8 return\cf10 \strokec10  \cf11 \strokec11 out\cf12 \strokec12 ;\cf10 \strokec10 \
\pard\pardeftab720\sl280\partightenfactor0
\cf12 \strokec12 \}\cf10 \strokec10 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b\fs24 \cf7 \cb1 \strokec7 Sample Solution (JS):
\f3\b0 \
Just track the indices of the contiguous segments to use less space than the previous solution.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls4\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Time: O(n * m)\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Extra Space: O(m)\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf8 \cb9 \strokec8 function\cf10 \strokec10  \cf11 \strokec11 fixSortedArrays\cf12 \strokec12 (\cf11 \strokec11 arr\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
  \cf14 \strokec14 // Find segments\cf10 \strokec10 \
  \cf14 \strokec14 // Time O(n), space O(m)\cf10 \strokec10 \
  \cf11 \strokec11 let\cf10 \strokec10  \cf11 \strokec11 indices\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf12 \strokec12 [];\cf10 \strokec10 \
  \cf8 \strokec8 for\cf10 \strokec10  \cf12 \strokec12 (\cf11 \strokec11 let\cf10 \strokec10  \cf11 \strokec11 idx\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf15 \strokec15 0\cf12 \strokec12 ;\cf10 \strokec10  \cf11 \strokec11 idx\cf10 \strokec10  \cf12 \strokec12 <\cf10 \strokec10  \cf11 \strokec11 arr\cf12 \strokec12 .\cf11 \strokec11 length\cf12 \strokec12 ;\cf10 \strokec10  \cf11 \strokec11 idx\cf12 \strokec12 ++)\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
    \cf8 \strokec8 if\cf10 \strokec10  \cf12 \strokec12 (\cf11 \strokec11 idx\cf10 \strokec10  \cf12 \strokec12 ===\cf10 \strokec10  \cf15 \strokec15 0\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
      \cf11 \strokec11 indices\cf12 \strokec12 .\cf13 \strokec13 push\cf12 \strokec12 (\cf11 \strokec11 idx\cf12 \strokec12 );\cf10 \strokec10 \
    \cf12 \strokec12 \}\cf10 \strokec10  \cf8 \strokec8 else\cf10 \strokec10  \cf8 \strokec8 if\cf10 \strokec10  \cf12 \strokec12 (\cf11 \strokec11 arr\cf12 \strokec12 [\cf11 \strokec11 idx\cf10 \strokec10  \cf12 \strokec12 -\cf10 \strokec10  \cf15 \strokec15 1\cf12 \strokec12 ]\cf10 \strokec10  \cf12 \strokec12 >\cf10 \strokec10  \cf11 \strokec11 arr\cf12 \strokec12 [\cf11 \strokec11 idx\cf12 \strokec12 ])\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
      \cf11 \strokec11 indices\cf12 \strokec12 .\cf13 \strokec13 push\cf12 \strokec12 (\cf11 \strokec11 idx\cf12 \strokec12 );\cf10 \strokec10 \
    \cf12 \strokec12 \}\cf10 \strokec10 \
  \cf12 \strokec12 \}\cf10 \strokec10 \
\
  \cf14 \strokec14 // Find segment boundaries\cf10 \strokec10 \
  \cf14 \strokec14 // Time O(m), space O(m)\cf10 \strokec10 \
  \cf11 \strokec11 let\cf10 \strokec10  \cf11 \strokec11 bounds\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf12 \strokec12 [];\cf10 \strokec10 \
  \cf8 \strokec8 for\cf10 \strokec10  \cf12 \strokec12 (\cf11 \strokec11 let\cf10 \strokec10  \cf11 \strokec11 idx\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf15 \strokec15 0\cf12 \strokec12 ;\cf10 \strokec10  \cf11 \strokec11 idx\cf10 \strokec10  \cf12 \strokec12 <\cf10 \strokec10  \cf11 \strokec11 indices\cf12 \strokec12 .\cf11 \strokec11 length\cf12 \strokec12 ;\cf10 \strokec10  \cf11 \strokec11 idx\cf12 \strokec12 ++)\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
    \cf8 \strokec8 if\cf10 \strokec10  \cf12 \strokec12 (\cf11 \strokec11 idx\cf10 \strokec10  \cf12 \strokec12 <\cf10 \strokec10  \cf11 \strokec11 indices\cf12 \strokec12 .\cf11 \strokec11 length\cf10 \strokec10  \cf12 \strokec12 -\cf10 \strokec10  \cf15 \strokec15 1\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
      \cf11 \strokec11 bounds\cf12 \strokec12 .\cf13 \strokec13 push\cf12 \strokec12 (\cf11 \strokec11 indices\cf12 \strokec12 [\cf11 \strokec11 idx\cf10 \strokec10  \cf12 \strokec12 +\cf10 \strokec10  \cf15 \strokec15 1\cf12 \strokec12 ]);\cf10 \strokec10 \
    \cf12 \strokec12 \}\cf10 \strokec10  \cf8 \strokec8 else\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
      \cf11 \strokec11 bounds\cf12 \strokec12 .\cf13 \strokec13 push\cf12 \strokec12 (\cf11 \strokec11 arr\cf12 \strokec12 .\cf11 \strokec11 length\cf12 \strokec12 );\cf10 \strokec10 \
    \cf12 \strokec12 \}\cf10 \strokec10 \
  \cf12 \strokec12 \}\cf10 \strokec10 \
\
  \cf14 \strokec14 // Merge segments\cf10 \strokec10 \
  \cf14 \strokec14 // Time O(m * n), space O(n)\cf10 \strokec10 \
  \cf11 \strokec11 let\cf10 \strokec10  \cf11 \strokec11 out\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf12 \strokec12 [];\cf10 \strokec10 \
  \cf8 \strokec8 while\cf10 \strokec10  \cf12 \strokec12 (\cf11 \strokec11 out\cf12 \strokec12 .\cf11 \strokec11 length\cf10 \strokec10  \cf12 \strokec12 <\cf10 \strokec10  \cf11 \strokec11 arr\cf12 \strokec12 .\cf11 \strokec11 length\cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
    \cf11 \strokec11 let\cf10 \strokec10  \cf11 \strokec11 smallest\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 null\cf12 \strokec12 ;\cf10 \strokec10 \
    \cf8 \strokec8 for\cf10 \strokec10  \cf12 \strokec12 (\cf11 \strokec11 let\cf10 \strokec10  \cf11 \strokec11 idx\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf15 \strokec15 0\cf12 \strokec12 ;\cf10 \strokec10  \cf11 \strokec11 idx\cf10 \strokec10  \cf12 \strokec12 <\cf10 \strokec10  \cf11 \strokec11 indices\cf12 \strokec12 .\cf11 \strokec11 length\cf12 \strokec12 ;\cf10 \strokec10  \cf11 \strokec11 idx\cf12 \strokec12 ++)\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
      \cf8 \strokec8 if\cf10 \strokec10  \cf12 \strokec12 (\cf10 \strokec10 \
        \cf11 \strokec11 indices\cf12 \strokec12 [\cf11 \strokec11 idx\cf12 \strokec12 ]\cf10 \strokec10  \cf12 \strokec12 <\cf10 \strokec10  \cf11 \strokec11 bounds\cf12 \strokec12 [\cf11 \strokec11 idx\cf12 \strokec12 ]\cf10 \strokec10  \cf12 \strokec12 &&\cf10 \strokec10 \
        \cf12 \strokec12 (\cf11 \strokec11 smallest\cf10 \strokec10  \cf12 \strokec12 ===\cf10 \strokec10  \cf11 \strokec11 null\cf10 \strokec10  \cf12 \strokec12 ||\cf10 \strokec10  \cf11 \strokec11 arr\cf12 \strokec12 [\cf11 \strokec11 indices\cf12 \strokec12 [\cf11 \strokec11 idx\cf12 \strokec12 ]]\cf10 \strokec10  \cf12 \strokec12 <\cf10 \strokec10  \cf11 \strokec11 arr\cf12 \strokec12 [\cf11 \strokec11 indices\cf12 \strokec12 [\cf11 \strokec11 smallest\cf12 \strokec12 ]])\cf10 \strokec10 \
      \cf12 \strokec12 )\cf10 \strokec10  \cf12 \strokec12 \{\cf10 \strokec10 \
        \cf11 \strokec11 smallest\cf10 \strokec10  \cf12 \strokec12 =\cf10 \strokec10  \cf11 \strokec11 idx\cf12 \strokec12 ;\cf10 \strokec10 \
      \cf12 \strokec12 \}\cf10 \strokec10 \
    \cf12 \strokec12 \}\cf10 \strokec10 \
\
    \cf11 \strokec11 out\cf12 \strokec12 .\cf13 \strokec13 push\cf12 \strokec12 (\cf11 \strokec11 arr\cf12 \strokec12 [\cf11 \strokec11 indices\cf12 \strokec12 [\cf11 \strokec11 smallest\cf12 \strokec12 ]]);\cf10 \strokec10 \
    \cf11 \strokec11 indices\cf12 \strokec12 [\cf11 \strokec11 smallest\cf12 \strokec12 ]++;\cf10 \strokec10 \
  \cf12 \strokec12 \}\cf10 \strokec10 \
\
  \cf8 \strokec8 return\cf10 \strokec10  \cf11 \strokec11 out\cf12 \strokec12 ;\cf10 \strokec10 \
\pard\pardeftab720\sl280\partightenfactor0
\cf12 \strokec12 \}\cf10 \strokec10 \
\pard\pardeftab720\sl280\partightenfactor0

\f3\fs24 \cf7 \cb1 \strokec7 Solutions on FBFiddle:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/fiddle/loQ4/6/"}}{\fldrslt \cf6 \strokec6 https://our.internmc.facebook.com/intern/fiddle/loQ4/6/}}\
}