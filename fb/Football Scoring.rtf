{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\fswiss\fcharset0 Helvetica;\f4\fswiss\fcharset0 Helvetica-Bold;\f5\fnil\fcharset0 Monaco;
}
{\colortbl;\red255\green255\blue255;\red21\green23\blue25;\red255\green255\blue255;\red52\green56\blue63;
\red78\green84\blue93;\red41\green67\blue135;\red22\green25\blue31;\red54\green59\blue74;\red252\green244\blue202;
\red210\green229\blue240;\red0\green0\blue82;\red0\green0\blue0;\red152\green18\blue15;\red76\green12\blue1;
\red83\green83\blue83;\red6\green50\blue15;\red152\green46\blue3;\red12\green95\blue32;\red98\green83\blue14;
}
{\*\expandedcolortbl;;\cssrgb\c10980\c11765\c12941;\cssrgb\c100000\c100000\c100000;\cssrgb\c26667\c28627\c31373;
\cssrgb\c37647\c40392\c43922;\cssrgb\c21176\c34510\c60000;\cssrgb\c11373\c12941\c16078;\cssrgb\c27451\c29804\c36078;\cssrgb\c99216\c96078\c83137;
\cssrgb\c85490\c91765\c95294;\cssrgb\c0\c3922\c39608;\cssrgb\c0\c0\c0;\cssrgb\c66667\c13333\c6667;\cssrgb\c37647\c7059\c0;
\cssrgb\c40000\c40000\c40000;\cssrgb\c0\c25098\c7059;\cssrgb\c66667\c25098\c0;\cssrgb\c0\c43922\c16471;\cssrgb\c46275\c39608\c6275;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Football Scoring\
\pard\pardeftab720\sl520\qc\partightenfactor0

\f1\i\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl520\qc\partightenfactor0
\cf4 \strokec4 \
\pard\pardeftab720\sl520\qc\partightenfactor0

\f0\i0 \cf4 More Items\
\pard\pardeftab720\sl320\partightenfactor0

\f1\b0 \cf5 \strokec5 Owner:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/profile/?id=1000550"}}{\fldrslt \cf6 \strokec6 Eric Zamore}}\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Hard\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Ninja\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 General\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \strokec2 Description\
\pard\pardeftab720\sl280\partightenfactor0

\f3\b0\fs24 \cf7 \strokec7 In a game where you can score 2 points, 3 points or 7 points at a time, write a function that turns an arbitrary score into the list of possible ways the score could have been reached.\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \strokec2 Question Statement\
\pard\pardeftab720\sl280\partightenfactor0

\f4\fs24 \cf8 \cb9 \strokec8 WARNING:
\f3\b0 \cf7 \strokec7 \'a0Dynamic programming questions are very strongly discouraged. If you're a new interviewer, do not ask this question. If you're an experienced interviewer, please migrate to something else. See\'a0{\field{\*\fldinst{HYPERLINK "https://l.facebook.com/l.php?u=https%3A%2F%2Ffburl.com%2FEschewDP&h=AT3hVo5TQM7s4YkAhaarN7-Lmz_HKUnCeXBx2UkcVbOuSSy91Dlocb-e3od0HOlxTn-UsAMnsGB_I6RN4hdz7QB3KYtpdA-blA3Ug2aoAr5EXEtvgnhGpglKIl6x9zBsMKsd1Pv1ugCVUzVDm8gn3Ucy"}}{\fldrslt \cf6 \strokec6 https://fburl.com/EschewDP}}.\
\pard\pardeftab720\sl540\sa160\partightenfactor0

\f4\b\fs36 \cf7 \cb1 Question\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1171968639490660#question"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 In a game where you can score 2 points, 3 points or 7 points at a time, write a function that turns an arbitrary score into the list of possible ways the score could have been reached.\
(This question is conceptually quite similar to\'a0{\field{\*\fldinst{HYPERLINK "https://our.intern.facebook.com/intern/recruiting/interview/questions/?question_id=1541614912811615"}}{\fldrslt \cf6 \strokec6 CoinDenominations}}.)\
\pard\pardeftab720\sl280\partightenfactor0

\f4\b \cf8 \cb10 \strokec8 NOTE:
\f3\b0 \cf7 \strokec7 \'a0This question has traditionally been about American Football, where you score 2-point safeties, 3-point field goals and 7-point touchdowns, but it's better to make this question about an abstract or invented game to avoid having to ask the candidate if they know American football, which could result in a negative answer. The same question can be asked as a "Cash Dispensing" problem, given a amount that a ATM has to dispense and given a set of currency denominations, say 1, 2, 5, 10, 50, 100, return each way, this amount can be dispensed. Everyone would be familiar with a ATM seems to be a safer assumption.\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf7 \cb1 Example:\
Input: 10 Output:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 5x 2pts (5 safeties)\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 2x 2pts and 2x 3pts (2 safeties and 2 field goals)\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 1x 3pts and 1x 7pts (a field goal and a touchdown)\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf7 The output should be a list of score configurations. A "score configuration" should include the number of each type of score, though I generally let the candidate pick any reasonable representation.\
\pard\pardeftab720\sl540\sa160\partightenfactor0

\f4\b\fs36 \cf7 Basic Code Solution\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1171968639490660#basic-code-solution"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\partightenfactor0

\f5\b0\fs20 \cf11 \cb9 \strokec11 import\cf12 \strokec12  \cf11 \strokec11 copy\cf12 \strokec12 \
\
\cf11 \strokec11 POINT_VALUES\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf13 \strokec13 [\cf14 \strokec14 2\cf13 \strokec13 ,\cf12 \strokec12  \cf14 \strokec14 3\cf13 \strokec13 ,\cf12 \strokec12  \cf14 \strokec14 7\cf13 \strokec13 ]\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf15 \strokec15 # Returns a dict keyed by point value.  Each element of the dict is a list of configurations.\cf12 \strokec12 \
\cf15 \strokec15 # e.g., \{3: 1, 7: 1\} means "1 field goal and 1 touchdown"\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf11 \strokec11 def\cf12 \strokec12  \cf16 \strokec16 footballScores\cf13 \strokec13 (\cf11 \strokec11 score\cf13 \strokec13 ):\cf12 \strokec12 \
  \cf15 \strokec15 # initialize the table with the ways to score 0 points\cf12 \strokec12 \
  \cf11 \strokec11 T\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12  \cf14 \strokec14 0\cf13 \strokec13 :\cf12 \strokec12  \cf13 \strokec13 [\{\}]\cf12 \strokec12  \cf13 \strokec13 \}\cf12 \strokec12 \
  \cf17 \strokec17 for\cf12 \strokec12  \cf11 \strokec11 k\cf12 \strokec12  \cf11 \strokec11 in\cf12 \strokec12  \cf16 \strokec16 range\cf13 \strokec13 (\cf14 \strokec14 1\cf13 \strokec13 ,\cf12 \strokec12  \cf11 \strokec11 score\cf12 \strokec12  \cf13 \strokec13 +\cf12 \strokec12  \cf14 \strokec14 1\cf13 \strokec13 ):\cf12 \strokec12 \
      \cf11 \strokec11 T\cf13 \strokec13 [\cf11 \strokec11 k\cf13 \strokec13 ]\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf13 \strokec13 []\cf12 \strokec12 \
      \cf17 \strokec17 for\cf12 \strokec12  \cf11 \strokec11 value\cf12 \strokec12  \cf11 \strokec11 in\cf12 \strokec12  \cf11 \strokec11 POINT_VALUES\cf13 \strokec13 :\cf12 \strokec12 \
          \cf17 \strokec17 if\cf12 \strokec12  \cf11 \strokec11 k\cf12 \strokec12  \cf13 \strokec13 -\cf12 \strokec12  \cf11 \strokec11 value\cf12 \strokec12  \cf13 \strokec13 <\cf12 \strokec12  \cf14 \strokec14 0\cf12 \strokec12  \cf17 \strokec17 or\cf12 \strokec12  \cf11 \strokec11 k\cf12 \strokec12  \cf13 \strokec13 -\cf12 \strokec12  \cf11 \strokec11 value\cf12 \strokec12  \cf17 \strokec17 not\cf12 \strokec12  \cf11 \strokec11 in\cf12 \strokec12  \cf11 \strokec11 T\cf13 \strokec13 :\cf12 \strokec12 \
              \cf15 \strokec15 # if we can't fit this point value, skip it\cf12 \strokec12 \
              \cf17 \strokec17 continue\cf12 \strokec12 \
\
          \cf17 \strokec17 for\cf12 \strokec12  \cf11 \strokec11 score_config\cf12 \strokec12  \cf11 \strokec11 in\cf12 \strokec12  \cf11 \strokec11 T\cf13 \strokec13 [\cf11 \strokec11 k\cf12 \strokec12  \cf13 \strokec13 -\cf12 \strokec12  \cf11 \strokec11 value\cf13 \strokec13 ]:\cf12 \strokec12 \
              \cf15 \strokec15 # for each score config in the previous total, append this value to it\cf12 \strokec12 \
              \cf11 \strokec11 new_score_config\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf11 \strokec11 copy\cf13 \strokec13 .\cf16 \strokec16 copy\cf13 \strokec13 (\cf11 \strokec11 score_config\cf13 \strokec13 )\cf12 \strokec12 \
              \cf11 \strokec11 new_score_config\cf13 \strokec13 [\cf11 \strokec11 value\cf13 \strokec13 ]\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf11 \strokec11 new_score_config\cf13 \strokec13 .\cf16 \strokec16 get\cf13 \strokec13 (\cf11 \strokec11 value\cf13 \strokec13 ,\cf12 \strokec12  \cf14 \strokec14 0\cf13 \strokec13 )\cf12 \strokec12  \cf13 \strokec13 +\cf12 \strokec12  \cf14 \strokec14 1\cf12 \strokec12 \
\
              \cf17 \strokec17 if\cf12 \strokec12  \cf11 \strokec11 new_score_config\cf12 \strokec12  \cf17 \strokec17 not\cf12 \strokec12  \cf11 \strokec11 in\cf12 \strokec12  \cf11 \strokec11 T\cf13 \strokec13 [\cf11 \strokec11 k\cf13 \strokec13 ]:\cf12 \strokec12 \
                  \cf15 \strokec15 # if we haven't already seen this config, add it\cf12 \strokec12 \
                  \cf11 \strokec11 T\cf13 \strokec13 [\cf11 \strokec11 k\cf13 \strokec13 ].\cf16 \strokec16 append\cf13 \strokec13 (\cf11 \strokec11 new_score_config\cf13 \strokec13 )\cf12 \strokec12 \
\
  \cf17 \strokec17 return\cf12 \strokec12  \cf11 \strokec11 T\cf13 \strokec13 [\cf11 \strokec11 score\cf13 \strokec13 ]\cf12 \strokec12 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf7 \cb1 \strokec7 This is a dynamic programming solution in which the table is computed in increasing score value. I start by initializing the table with the ways to score 0 points (i.e., 0 of each point value). To compute score k: for each point value p, take all the configurations for score k - p, and add a new score configuration including point value p (if that configuration doesn't already exist for score k). Discard result if k - p < 0, or there are no ways to score k - p points.\
For example, to compute the answer for 21, consider the ways to score 19, 18, and 14, and add a safety, a field goal, and a touchdown (respectively) for each of those.\
\pard\pardeftab720\sl540\sa160\partightenfactor0

\f4\b\fs36 \cf7 But brute force is faster\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1171968639490660#but-brute-force-is-faste"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 Consider this code that calculates the number of ways to reach a given score. It runs in N/7 iterations!!!\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf11 \cb9 \strokec11 import\cf12 \strokec12  \cf11 \strokec11 sys\cf13 \strokec13 ,\cf11 \strokec11 math\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf15 \strokec15 #@author jlindamood\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf11 \strokec11 def\cf12 \strokec12  \cf16 \strokec16 footballScores\cf13 \strokec13 (\cf11 \strokec11 score\cf13 \strokec13 ):\cf12 \strokec12 \
  \cf11 \strokec11 sum\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf14 \strokec14 0\cf12 \strokec12 \
  \cf17 \strokec17 for\cf12 \strokec12  \cf11 \strokec11 t\cf12 \strokec12  \cf11 \strokec11 in\cf12 \strokec12  \cf16 \strokec16 range\cf13 \strokec13 (\cf14 \strokec14 0\cf13 \strokec13 ,\cf12 \strokec12  \cf11 \strokec11 score\cf13 \strokec13 /\cf14 \strokec14 7\cf13 \strokec13 +\cf14 \strokec14 1\cf13 \strokec13 ):\cf12 \strokec12 \
    \cf17 \strokec17 if\cf12 \strokec12  \cf11 \strokec11 t\cf13 \strokec13 *\cf14 \strokec14 7\cf13 \strokec13 >\cf11 \strokec11 score\cf13 \strokec13 :\cf12 \strokec12 \
      \cf17 \strokec17 break\cf13 \strokec13 ;\cf12 \strokec12 \
    \cf11 \strokec11 remainder\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf11 \strokec11 score\cf12 \strokec12  \cf13 \strokec13 -\cf12 \strokec12  \cf11 \strokec11 t\cf13 \strokec13 *\cf14 \strokec14 7\cf12 \strokec12 \
    \cf11 \strokec11 times\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf11 \strokec11 remainder\cf13 \strokec13 /\cf14 \strokec14 3\cf13 \strokec13 +\cf14 \strokec14 1\cf12 \strokec12 \
    \cf17 \strokec17 if\cf12 \strokec12  \cf11 \strokec11 remainder\cf13 \strokec13 %\cf14 \strokec14 2\cf13 \strokec13 ==\cf14 \strokec14 0\cf13 \strokec13 :\cf12 \strokec12 \
      \cf11 \strokec11 sum\cf13 \strokec13 +=\cf16 \strokec16 int\cf13 \strokec13 (\cf11 \strokec11 math\cf13 \strokec13 .\cf16 \strokec16 ceil\cf13 \strokec13 (\cf11 \strokec11 times\cf13 \strokec13 /\cf14 \strokec14 2.0\cf13 \strokec13 ))\cf12 \strokec12 \
    \cf17 \strokec17 else\cf13 \strokec13 :\cf12 \strokec12 \
      \cf11 \strokec11 sum\cf13 \strokec13 +=\cf11 \strokec11 times\cf13 \strokec13 /\cf14 \strokec14 2\cf12 \strokec12 \
  \cf17 \strokec17 return\cf12 \strokec12  \cf11 \strokec11 sum\cf12 \strokec12 \
\
\cf11 \strokec11 print\cf12 \strokec12  \cf16 \strokec16 footballScores\cf13 \strokec13 (\cf16 \strokec16 int\cf13 \strokec13 (\cf11 \strokec11 sys\cf13 \strokec13 .\cf11 \strokec11 argv\cf13 \strokec13 [\cf14 \strokec14 1\cf13 \strokec13 ]))\cf12 \strokec12 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf7 \cb1 \strokec7 Now, to turn that into returning all the ways, expand the loop to create an inner loop.\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf11 \cb9 \strokec11 import\cf12 \strokec12  \cf11 \strokec11 sys\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf15 \strokec15 # @author jlindamood\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf11 \strokec11 def\cf12 \strokec12  \cf16 \strokec16 footballScores\cf13 \strokec13 (\cf11 \strokec11 score\cf13 \strokec13 ):\cf12 \strokec12 \
  \cf11 \strokec11 sum\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf14 \strokec14 0\cf12 \strokec12 \
  \cf17 \strokec17 for\cf12 \strokec12  \cf11 \strokec11 t\cf12 \strokec12  \cf11 \strokec11 in\cf12 \strokec12  \cf16 \strokec16 range\cf13 \strokec13 (\cf14 \strokec14 0\cf13 \strokec13 ,\cf12 \strokec12  \cf11 \strokec11 score\cf13 \strokec13 /\cf14 \strokec14 7\cf13 \strokec13 +\cf14 \strokec14 1\cf13 \strokec13 ):\cf12 \strokec12 \
    \cf17 \strokec17 for\cf12 \strokec12  \cf11 \strokec11 f\cf12 \strokec12  \cf11 \strokec11 in\cf12 \strokec12  \cf16 \strokec16 range\cf13 \strokec13 (\cf14 \strokec14 0\cf13 \strokec13 ,\cf12 \strokec12  \cf11 \strokec11 score\cf13 \strokec13 /\cf14 \strokec14 3\cf13 \strokec13 +\cf14 \strokec14 1\cf13 \strokec13 ):\cf12 \strokec12 \
      \cf17 \strokec17 if\cf12 \strokec12  \cf11 \strokec11 t\cf13 \strokec13 *\cf14 \strokec14 7\cf13 \strokec13 +\cf11 \strokec11 f\cf13 \strokec13 *\cf14 \strokec14 3\cf12 \strokec12  \cf13 \strokec13 >\cf12 \strokec12  \cf11 \strokec11 score\cf13 \strokec13 :\cf12 \strokec12 \
        \cf17 \strokec17 break\cf13 \strokec13 ;\cf12 \strokec12 \
      \cf17 \strokec17 if\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 score\cf13 \strokec13 -(\cf11 \strokec11 t\cf13 \strokec13 *\cf14 \strokec14 7\cf13 \strokec13 +\cf11 \strokec11 f\cf13 \strokec13 *\cf14 \strokec14 3\cf13 \strokec13 ))%\cf14 \strokec14 2\cf13 \strokec13 ==\cf14 \strokec14 0\cf13 \strokec13 :\cf12 \strokec12 \
        \cf11 \strokec11 sum\cf13 \strokec13 +=\cf14 \strokec14 1\cf12 \strokec12 \
  \cf17 \strokec17 return\cf12 \strokec12  \cf11 \strokec11 sum\cf12 \strokec12 \
\
\cf11 \strokec11 print\cf12 \strokec12  \cf16 \strokec16 footballScores\cf13 \strokec13 (\cf16 \strokec16 int\cf13 \strokec13 (\cf11 \strokec11 sys\cf13 \strokec13 .\cf11 \strokec11 argv\cf13 \strokec13 [\cf14 \strokec14 1\cf13 \strokec13 ]))\cf12 \strokec12 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf7 \cb1 \strokec7 Unfortunantly, that's the brute force solution. Just change sum +=1 to create the possible set, and it's the solution to the above problem. This code runs in N*2 iterations where N is the size of the output set. Change the "if" a bit, and it can run in N iterations where N is the size of the output array. It's pretty hard to build an array of N elements faster than N iterations, making the 'brute force' solution much faster than whatever Dynamic Programming is trying to do.\
dwhitlow: Where score = N, this actually runs in O(N/7 * N/3) = O(N^2) iterations. Using an effective DP solution can actually solve this in N*k iterations, though.\
jlindamood: ^^^^ Important point: The description above expresses the big-oh in terms of the output, not in terms of the input. It seems unlikely that any solution, even a dynamic programming one, could build an array of N elements faster than O(N)\
\pard\pardeftab720\sl540\sa160\partightenfactor0

\f4\b\fs36 \cf7 Dynamic Programming "Bottom-up" Approach\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1171968639490660#dynamic-programming-bott"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf7 This solution is similar to the first in that it finds and memoizes the possible combination sets for values of i < score, then uses those to build the correct set for score. It removes intermediate results when they are no longer required to save memory, strips duplicate combinations, and it is generalized to handle a variable number of score types. This took me about 40 minutes to do, but if the candidate is a rock star, they could probably get a non-generalized version of this done during the interview (bonus display method to make it easier to display/verify the results):\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf12 \cb9 \strokec12 /**\
 * @author dwhitlow\
 * Usage examples:\
 * Set<ScoreCombo> results = findAllScoreCombinations(40, new int[] \{ 2, 7, 3 \});\
 * displayAllScoreCombinations(40, new int[] \{ 2, 3, 7 \});\
 */\
\pard\pardeftab720\sl280\partightenfactor0
\cf17 \strokec17 public\cf12 \strokec12  \cf17 \strokec17 class\cf12 \strokec12  \cf11 \strokec11 ScoreCombo\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
\
  \cf17 \strokec17 private\cf12 \strokec12  \cf11 \strokec11 int\cf13 \strokec13 []\cf12 \strokec12  \cf11 \strokec11 scoreCoefficients\cf13 \strokec13 ;\cf12 \strokec12 \
\
  \cf17 \strokec17 public\cf12 \strokec12  \cf16 \strokec16 ScoreCombo\cf13 \strokec13 (\cf11 \strokec11 int\cf12 \strokec12  \cf11 \strokec11 numTypes\cf13 \strokec13 )\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
    \cf11 \strokec11 scoreCoefficients\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf17 \strokec17 new\cf12 \strokec12  \cf18 \strokec18 int\cf13 \strokec13 [\cf11 \strokec11 numTypes\cf13 \strokec13 ];\cf12 \strokec12 \
  \cf13 \strokec13 \}\cf12 \strokec12 \
\
  \cf17 \strokec17 public\cf12 \strokec12  \cf16 \strokec16 ScoreCombo\cf13 \strokec13 (\cf11 \strokec11 ScoreCombo\cf12 \strokec12  \cf11 \strokec11 copy\cf13 \strokec13 )\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
    \cf11 \strokec11 scoreCoefficients\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf17 \strokec17 new\cf12 \strokec12  \cf18 \strokec18 int\cf13 \strokec13 [\cf11 \strokec11 copy\cf13 \strokec13 .\cf11 \strokec11 scoreCoefficients\cf13 \strokec13 .\cf11 \strokec11 length\cf13 \strokec13 ];\cf12 \strokec12 \
    \cf17 \strokec17 for\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 int\cf12 \strokec12  \cf11 \strokec11 i\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf14 \strokec14 0\cf13 \strokec13 ;\cf12 \strokec12  \cf11 \strokec11 i\cf12 \strokec12  \cf13 \strokec13 <\cf12 \strokec12  \cf11 \strokec11 scoreCoefficients\cf13 \strokec13 .\cf11 \strokec11 length\cf13 \strokec13 ;\cf12 \strokec12  \cf11 \strokec11 i\cf13 \strokec13 ++)\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
      \cf11 \strokec11 scoreCoefficients\cf13 \strokec13 [\cf11 \strokec11 i\cf13 \strokec13 ]\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf11 \strokec11 copy\cf13 \strokec13 .\cf11 \strokec11 scoreCoefficients\cf13 \strokec13 [\cf11 \strokec11 i\cf13 \strokec13 ];\cf12 \strokec12 \
    \cf13 \strokec13 \}\cf12 \strokec12 \
  \cf13 \strokec13 \}\cf12 \strokec12 \
\
  \cf13 \strokec13 @\cf11 \strokec11 Override\cf12 \strokec12 \
  \cf17 \strokec17 public\cf12 \strokec12  \cf11 \strokec11 boolean\cf12 \strokec12  \cf16 \strokec16 equals\cf13 \strokec13 (\cf11 \strokec11 Object\cf12 \strokec12  \cf11 \strokec11 o\cf13 \strokec13 )\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
    \cf17 \strokec17 if\cf12 \strokec12  \cf13 \strokec13 (!(\cf11 \strokec11 o\cf12 \strokec12  \cf17 \strokec17 instanceof\cf12 \strokec12  \cf18 \strokec18 ScoreCombo\cf13 \strokec13 ))\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
      \cf17 \strokec17 return\cf12 \strokec12  \cf11 \strokec11 false\cf13 \strokec13 ;\cf12 \strokec12 \
    \cf13 \strokec13 \}\cf12 \strokec12 \
\
    \cf11 \strokec11 ScoreCombo\cf12 \strokec12  \cf11 \strokec11 c\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 ScoreCombo\cf13 \strokec13 )\cf12 \strokec12  \cf11 \strokec11 o\cf13 \strokec13 ;\cf12 \strokec12 \
    \cf17 \strokec17 if\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 scoreCoefficients\cf13 \strokec13 .\cf11 \strokec11 length\cf12 \strokec12  \cf13 \strokec13 !=\cf12 \strokec12  \cf11 \strokec11 c\cf13 \strokec13 .\cf11 \strokec11 scoreCoefficients\cf13 \strokec13 .\cf11 \strokec11 length\cf13 \strokec13 )\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
      \cf17 \strokec17 return\cf12 \strokec12  \cf11 \strokec11 false\cf13 \strokec13 ;\cf12 \strokec12 \
    \cf13 \strokec13 \}\cf12 \strokec12 \
    \cf17 \strokec17 for\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 int\cf12 \strokec12  \cf11 \strokec11 i\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf14 \strokec14 0\cf13 \strokec13 ;\cf12 \strokec12  \cf11 \strokec11 i\cf12 \strokec12  \cf13 \strokec13 <\cf12 \strokec12  \cf11 \strokec11 scoreCoefficients\cf13 \strokec13 .\cf11 \strokec11 length\cf13 \strokec13 ;\cf12 \strokec12  \cf11 \strokec11 i\cf13 \strokec13 ++)\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
      \cf17 \strokec17 if\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 scoreCoefficients\cf13 \strokec13 [\cf11 \strokec11 i\cf13 \strokec13 ]\cf12 \strokec12  \cf13 \strokec13 !=\cf12 \strokec12  \cf11 \strokec11 c\cf13 \strokec13 .\cf11 \strokec11 scoreCoefficients\cf13 \strokec13 [\cf11 \strokec11 i\cf13 \strokec13 ])\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
        \cf17 \strokec17 return\cf12 \strokec12  \cf11 \strokec11 false\cf13 \strokec13 ;\cf12 \strokec12 \
      \cf13 \strokec13 \}\cf12 \strokec12 \
    \cf13 \strokec13 \}\cf12 \strokec12 \
    \cf17 \strokec17 return\cf12 \strokec12  \cf11 \strokec11 true\cf13 \strokec13 ;\cf12 \strokec12 \
  \cf13 \strokec13 \}\cf12 \strokec12 \
\
  \cf13 \strokec13 @\cf11 \strokec11 Override\cf12 \strokec12 \
  \cf17 \strokec17 public\cf12 \strokec12  \cf11 \strokec11 int\cf12 \strokec12  \cf16 \strokec16 hashCode\cf13 \strokec13 ()\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
    \cf11 \strokec11 int\cf12 \strokec12  \cf11 \strokec11 hashCode\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf14 \strokec14 0\cf13 \strokec13 ;\cf12 \strokec12 \
    \cf17 \strokec17 for\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 int\cf12 \strokec12  \cf11 \strokec11 i\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf14 \strokec14 0\cf13 \strokec13 ;\cf12 \strokec12  \cf11 \strokec11 i\cf12 \strokec12  \cf13 \strokec13 <\cf12 \strokec12  \cf11 \strokec11 scoreCoefficients\cf13 \strokec13 .\cf11 \strokec11 length\cf13 \strokec13 ;\cf12 \strokec12  \cf11 \strokec11 i\cf13 \strokec13 ++)\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
      \cf11 \strokec11 hashCode\cf12 \strokec12  \cf13 \strokec13 +=\cf12 \strokec12  \cf11 \strokec11 scoreCoefficients\cf13 \strokec13 [\cf11 \strokec11 i\cf13 \strokec13 ];\cf12 \strokec12 \
      \cf11 \strokec11 hashCode\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf11 \strokec11 hashCode\cf12 \strokec12  \cf13 \strokec13 <<\cf12 \strokec12  \cf14 \strokec14 1\cf13 \strokec13 ;\cf12 \strokec12 \
    \cf13 \strokec13 \}\cf12 \strokec12 \
    \cf17 \strokec17 return\cf12 \strokec12  \cf11 \strokec11 hashCode\cf13 \strokec13 ;\cf12 \strokec12 \
  \cf13 \strokec13 \}\cf12 \strokec12 \
\
  \cf17 \strokec17 public\cf12 \strokec12  \cf17 \strokec17 static\cf12 \strokec12  \cf11 \strokec11 Set\cf13 \strokec13 <\cf11 \strokec11 ScoreCombo\cf13 \strokec13 >\cf12 \strokec12  \cf16 \strokec16 findAllScoreCombinations\cf13 \strokec13 (\cf11 \strokec11 int\cf12 \strokec12  \cf11 \strokec11 n\cf13 \strokec13 ,\cf12 \strokec12  \cf11 \strokec11 int\cf13 \strokec13 []\cf12 \strokec12  \cf11 \strokec11 scoreTypes\cf13 \strokec13 )\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
    \cf11 \strokec11 int\cf12 \strokec12  \cf11 \strokec11 highestScore\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf14 \strokec14 0\cf13 \strokec13 ;\cf12 \strokec12 \
    \cf17 \strokec17 for\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 int\cf12 \strokec12  \cf11 \strokec11 i\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf14 \strokec14 0\cf13 \strokec13 ;\cf12 \strokec12  \cf11 \strokec11 i\cf12 \strokec12  \cf13 \strokec13 <\cf12 \strokec12  \cf11 \strokec11 scoreTypes\cf13 \strokec13 .\cf11 \strokec11 length\cf13 \strokec13 ;\cf12 \strokec12  \cf11 \strokec11 i\cf13 \strokec13 ++)\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
      \cf11 \strokec11 highestScore\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf11 \strokec11 Math\cf13 \strokec13 .\cf16 \strokec16 max\cf13 \strokec13 (\cf11 \strokec11 highestScore\cf13 \strokec13 ,\cf12 \strokec12  \cf11 \strokec11 scoreTypes\cf13 \strokec13 [\cf11 \strokec11 i\cf13 \strokec13 ]);\cf12 \strokec12 \
    \cf13 \strokec13 \}\cf12 \strokec12 \
\
    \cf11 \strokec11 Map\cf13 \strokec13 <\cf11 \strokec11 Integer\cf13 \strokec13 ,\cf12 \strokec12  \cf11 \strokec11 Set\cf13 \strokec13 <\cf11 \strokec11 ScoreCombo\cf13 \strokec13 >>\cf12 \strokec12  \cf11 \strokec11 memoizedResults\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf17 \strokec17 new\cf12 \strokec12  \cf18 \strokec18 HashMap\cf13 \strokec13 <\cf11 \strokec11 Integer\cf13 \strokec13 ,\cf12 \strokec12  \cf11 \strokec11 Set\cf13 \strokec13 <\cf11 \strokec11 ScoreCombo\cf13 \strokec13 >>();\cf12 \strokec12 \
    \cf11 \strokec11 memoizedResults\cf13 \strokec13 .\cf16 \strokec16 put\cf13 \strokec13 (\cf14 \strokec14 0\cf13 \strokec13 ,\cf12 \strokec12  \cf17 \strokec17 new\cf12 \strokec12  \cf18 \strokec18 HashSet\cf13 \strokec13 <\cf11 \strokec11 ScoreCombo\cf13 \strokec13 >());\cf12 \strokec12 \
\
    \cf17 \strokec17 for\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 int\cf12 \strokec12  \cf11 \strokec11 i\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf14 \strokec14 1\cf13 \strokec13 ;\cf12 \strokec12  \cf11 \strokec11 i\cf12 \strokec12  \cf13 \strokec13 <=\cf12 \strokec12  \cf11 \strokec11 n\cf13 \strokec13 ;\cf12 \strokec12  \cf11 \strokec11 i\cf13 \strokec13 ++)\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
      \cf15 \strokec15 // create score combination set for intermediate score i\cf12 \strokec12 \
      \cf11 \strokec11 Set\cf13 \strokec13 <\cf11 \strokec11 ScoreCombo\cf13 \strokec13 >\cf12 \strokec12  \cf11 \strokec11 comboSet\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf17 \strokec17 new\cf12 \strokec12  \cf18 \strokec18 HashSet\cf13 \strokec13 <\cf11 \strokec11 ScoreCombo\cf13 \strokec13 >();\cf12 \strokec12 \
      \cf17 \strokec17 for\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 int\cf12 \strokec12  \cf11 \strokec11 j\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf14 \strokec14 0\cf13 \strokec13 ;\cf12 \strokec12  \cf11 \strokec11 j\cf12 \strokec12  \cf13 \strokec13 <\cf12 \strokec12  \cf11 \strokec11 scoreTypes\cf13 \strokec13 .\cf11 \strokec11 length\cf13 \strokec13 ;\cf12 \strokec12  \cf11 \strokec11 j\cf13 \strokec13 ++)\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
        \cf15 \strokec15 // add a new score combo to the set\cf12 \strokec12 \
        \cf17 \strokec17 if\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 i\cf12 \strokec12  \cf13 \strokec13 ==\cf12 \strokec12  \cf11 \strokec11 scoreTypes\cf13 \strokec13 [\cf11 \strokec11 j\cf13 \strokec13 ])\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
          \cf11 \strokec11 ScoreCombo\cf12 \strokec12  \cf11 \strokec11 newCombo\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf17 \strokec17 new\cf12 \strokec12  \cf18 \strokec18 ScoreCombo\cf13 \strokec13 (\cf11 \strokec11 scoreTypes\cf13 \strokec13 .\cf11 \strokec11 length\cf13 \strokec13 );\cf12 \strokec12 \
          \cf11 \strokec11 newCombo\cf13 \strokec13 .\cf11 \strokec11 scoreCoefficients\cf13 \strokec13 [\cf11 \strokec11 j\cf13 \strokec13 ]++;\cf12 \strokec12 \
          \cf11 \strokec11 comboSet\cf13 \strokec13 .\cf16 \strokec16 add\cf13 \strokec13 (\cf11 \strokec11 newCombo\cf13 \strokec13 );\cf12 \strokec12 \
        \cf13 \strokec13 \}\cf12 \strokec12 \
\
        \cf15 \strokec15 // create a copy of the memoized results with the new result added\cf12 \strokec12 \
        \cf17 \strokec17 if\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 memoizedResults\cf13 \strokec13 .\cf16 \strokec16 containsKey\cf13 \strokec13 (\cf11 \strokec11 i\cf12 \strokec12  \cf13 \strokec13 -\cf12 \strokec12  \cf11 \strokec11 scoreTypes\cf13 \strokec13 [\cf11 \strokec11 j\cf13 \strokec13 ]))\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
          \cf17 \strokec17 for\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 ScoreCombo\cf12 \strokec12  \cf11 \strokec11 c\cf12 \strokec12  \cf13 \strokec13 :\cf12 \strokec12  \cf11 \strokec11 memoizedResults\cf13 \strokec13 .\cf16 \strokec16 get\cf13 \strokec13 (\cf11 \strokec11 i\cf12 \strokec12  \cf13 \strokec13 -\cf12 \strokec12  \cf11 \strokec11 scoreTypes\cf13 \strokec13 [\cf11 \strokec11 j\cf13 \strokec13 ]))\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
            \cf11 \strokec11 ScoreCombo\cf12 \strokec12  \cf11 \strokec11 newCombo\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf17 \strokec17 new\cf12 \strokec12  \cf18 \strokec18 ScoreCombo\cf13 \strokec13 (\cf11 \strokec11 c\cf13 \strokec13 );\cf12 \strokec12 \
            \cf11 \strokec11 newCombo\cf13 \strokec13 .\cf11 \strokec11 scoreCoefficients\cf13 \strokec13 [\cf11 \strokec11 j\cf13 \strokec13 ]++;\cf12 \strokec12 \
            \cf11 \strokec11 comboSet\cf13 \strokec13 .\cf16 \strokec16 add\cf13 \strokec13 (\cf11 \strokec11 newCombo\cf13 \strokec13 );\cf12 \strokec12 \
          \cf13 \strokec13 \}\cf12 \strokec12 \
        \cf13 \strokec13 \}\cf12 \strokec12 \
      \cf13 \strokec13 \}\cf12 \strokec12 \
      \cf17 \strokec17 if\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 comboSet\cf13 \strokec13 .\cf16 \strokec16 size\cf13 \strokec13 ()\cf12 \strokec12  \cf13 \strokec13 >\cf12 \strokec12  \cf14 \strokec14 0\cf13 \strokec13 )\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
        \cf11 \strokec11 memoizedResults\cf13 \strokec13 .\cf16 \strokec16 put\cf13 \strokec13 (\cf11 \strokec11 i\cf13 \strokec13 ,\cf12 \strokec12  \cf11 \strokec11 comboSet\cf13 \strokec13 );\cf12 \strokec12 \
      \cf13 \strokec13 \}\cf12 \strokec12 \
\
      \cf15 \strokec15 // remove unneeded results to save memory\cf12 \strokec12 \
      \cf11 \strokec11 memoizedResults\cf13 \strokec13 .\cf16 \strokec16 remove\cf13 \strokec13 (\cf11 \strokec11 i\cf12 \strokec12  \cf13 \strokec13 -\cf12 \strokec12  \cf11 \strokec11 highestScore\cf13 \strokec13 );\cf12 \strokec12 \
    \cf13 \strokec13 \}\cf12 \strokec12  \
\
    \cf17 \strokec17 if\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 memoizedResults\cf13 \strokec13 .\cf16 \strokec16 containsKey\cf13 \strokec13 (\cf11 \strokec11 n\cf13 \strokec13 ))\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
      \cf17 \strokec17 return\cf12 \strokec12  \cf11 \strokec11 memoizedResults\cf13 \strokec13 .\cf16 \strokec16 get\cf13 \strokec13 (\cf11 \strokec11 n\cf13 \strokec13 );\cf12 \strokec12 \
    \cf13 \strokec13 \}\cf12 \strokec12  \cf17 \strokec17 else\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
      \cf17 \strokec17 return\cf12 \strokec12  \cf17 \strokec17 new\cf12 \strokec12  \cf18 \strokec18 HashSet\cf13 \strokec13 <\cf11 \strokec11 ScoreCombo\cf13 \strokec13 >();\cf12 \strokec12 \
    \cf13 \strokec13 \}\cf12 \strokec12 \
  \cf13 \strokec13 \}\cf12 \strokec12 \
\
  \cf17 \strokec17 public\cf12 \strokec12  \cf17 \strokec17 static\cf12 \strokec12  \cf11 \strokec11 void\cf12 \strokec12  \cf16 \strokec16 displayAllScoreCombinations\cf13 \strokec13 (\cf11 \strokec11 int\cf12 \strokec12  \cf11 \strokec11 n\cf13 \strokec13 ,\cf12 \strokec12  \cf11 \strokec11 int\cf13 \strokec13 []\cf12 \strokec12  \cf11 \strokec11 scoreTypes\cf13 \strokec13 )\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
    \cf11 \strokec11 System\cf13 \strokec13 .\cf11 \strokec11 out\cf13 \strokec13 .\cf16 \strokec16 println\cf13 \strokec13 (\cf19 \strokec19 "All score combinations for score "\cf12 \strokec12  \cf13 \strokec13 +\cf12 \strokec12  \cf11 \strokec11 n\cf13 \strokec13 );\cf12 \strokec12 \
    \cf17 \strokec17 for\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 ScoreCombo\cf12 \strokec12  \cf11 \strokec11 c\cf12 \strokec12  \cf13 \strokec13 :\cf12 \strokec12  \cf16 \strokec16 findAllScoreCombinations\cf13 \strokec13 (\cf11 \strokec11 n\cf13 \strokec13 ,\cf12 \strokec12  \cf11 \strokec11 scoreTypes\cf13 \strokec13 ))\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
      \cf17 \strokec17 for\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 int\cf12 \strokec12  \cf11 \strokec11 i\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf14 \strokec14 0\cf13 \strokec13 ;\cf12 \strokec12  \cf11 \strokec11 i\cf12 \strokec12  \cf13 \strokec13 <\cf12 \strokec12  \cf11 \strokec11 c\cf13 \strokec13 .\cf11 \strokec11 scoreCoefficients\cf13 \strokec13 .\cf11 \strokec11 length\cf13 \strokec13 ;\cf12 \strokec12  \cf11 \strokec11 i\cf13 \strokec13 ++)\cf12 \strokec12  \cf13 \strokec13 \{\cf12 \strokec12 \
        \cf11 \strokec11 System\cf13 \strokec13 .\cf11 \strokec11 out\cf13 \strokec13 .\cf16 \strokec16 print\cf13 \strokec13 (\cf11 \strokec11 c\cf13 \strokec13 .\cf11 \strokec11 scoreCoefficients\cf13 \strokec13 [\cf11 \strokec11 i\cf13 \strokec13 ]\cf12 \strokec12  \cf13 \strokec13 +\cf12 \strokec12  \cf19 \strokec19 "x"\cf12 \strokec12  \cf13 \strokec13 +\cf12 \strokec12  \cf11 \strokec11 scoreTypes\cf13 \strokec13 [\cf11 \strokec11 i\cf13 \strokec13 ]\cf12 \strokec12  \cf13 \strokec13 +\cf12 \strokec12  \cf19 \strokec19 "\cf17 \strokec17 \\t\cf19 \strokec19 "\cf13 \strokec13 );\cf12 \strokec12 \
      \cf13 \strokec13 \}\cf12 \strokec12 \
      \cf11 \strokec11 System\cf13 \strokec13 .\cf11 \strokec11 out\cf13 \strokec13 .\cf16 \strokec16 println\cf13 \strokec13 ();\cf12 \strokec12 \
    \cf13 \strokec13 \}\cf12 \strokec12 \
    \cf11 \strokec11 System\cf13 \strokec13 .\cf11 \strokec11 out\cf13 \strokec13 .\cf16 \strokec16 println\cf13 \strokec13 ();\cf12 \strokec12 \
  \cf13 \strokec13 \}\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf13 \strokec13 \}\cf12 \strokec12 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf7 \cb1 \strokec7 This solution runs in O(n*k), where n is the score, and k is the number of different score types (3 if we use the generic 2/3/7 example).\
\pard\pardeftab720\sl540\sa160\partightenfactor0

\f4\b\fs36 \cf7 Dynamic programming in a lazy functional language\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1171968639490660#dynamic-programming-in-a"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\partightenfactor0

\f5\b0\fs20 \cf11 \cb9 \strokec11 ways\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf11 \strokec11 add\cf12 \strokec12  \cf14 \strokec14 2\cf12 \strokec12  \cf13 \strokec13 (\cf19 \strokec19 "safety"\cf12 \strokec12  \cf13 \strokec13 :)\cf12 \strokec12  $\
     \cf11 \strokec11 add\cf12 \strokec12  \cf14 \strokec14 3\cf12 \strokec12  \cf13 \strokec13 (\cf19 \strokec19 "field goal"\cf12 \strokec12  \cf13 \strokec13 :)\cf12 \strokec12  $\
     \cf11 \strokec11 add\cf12 \strokec12  \cf14 \strokec14 7\cf12 \strokec12  \cf13 \strokec13 (\cf19 \strokec19 "touchdown"\cf12 \strokec12  \cf13 \strokec13 :)\cf12 \strokec12  $ \cf13 \strokec13 [[]]\cf12 \strokec12  \cf13 \strokec13 :\cf12 \strokec12  \cf11 \strokec11 repeat\cf12 \strokec12  \cf13 \strokec13 []\cf12 \strokec12 \
  \cf11 \strokec11 where\cf12 \strokec12  \cf11 \strokec11 add\cf12 \strokec12  \cf11 \strokec11 n\cf12 \strokec12  \cf11 \strokec11 f\cf12 \strokec12  \cf11 \strokec11 base\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf11 \strokec11 xs\cf12 \strokec12   \cf11 \strokec11 where\cf12 \strokec12  \cf11 \strokec11 xs\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf16 \strokec16 zipWith\cf12 \strokec12  \cf13 \strokec13 (++)\cf12 \strokec12  \cf16 \strokec16 base\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 replicate\cf12 \strokec12  \cf11 \strokec11 n\cf12 \strokec12  \cf13 \strokec13 []\cf12 \strokec12  \cf13 \strokec13 ++\cf12 \strokec12  \cf16 \strokec16 map\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 map\cf12 \strokec12  \cf11 \strokec11 f\cf13 \strokec13 )\cf12 \strokec12  \cf11 \strokec11 xs\cf13 \strokec13 )\cf12 \strokec12 \
\
\cf11 \strokec11 main\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf11 \strokec11 mapM_\cf12 \strokec12  \cf16 \strokec16 print\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 ways\cf12 \strokec12  \cf13 \strokec13 !!\cf12 \strokec12  \cf14 \strokec14 10\cf13 \strokec13 )\cf12 \strokec12 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf7 \cb1 \strokec7 Slightly more readable form:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls2\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 The datastructure will be a list of lists, where element #n is a\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 list of ways to complete a game with n points.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls3\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 The base case is a 0-point game that does nothing, and all other scores are impossible (empty lists).\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf11 \cb9 \strokec11 baseCase\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf13 \strokec13 [\cf19 \strokec19 "done"\cf13 \strokec13 ]\cf12 \strokec12  \cf13 \strokec13 :\cf12 \strokec12  \cf11 \strokec11 repeat\cf12 \strokec12  \cf13 \strokec13 []\cf12 \strokec12 \
\
\pard\pardeftab720\sl280\partightenfactor0
\cf13 \strokec13 --\cf12 \strokec12  \cf11 \strokec11 Adding\cf12 \strokec12  \cf11 \strokec11 a\cf12 \strokec12  \cf11 \strokec11 single\cf12 \strokec12  \cf11 \strokec11 n\cf13 \strokec13 -\cf11 \strokec11 point\cf12 \strokec12  \cf11 \strokec11 goal\cf12 \strokec12  \cf11 \strokec11 means\cf12 \strokec12  \cf11 \strokec11 moving\cf12 \strokec12  \cf11 \strokec11 the\cf12 \strokec12  \cf17 \strokec17 list\cf12 \strokec12  \cf11 \strokec11 to\cf12 \strokec12  \cf11 \strokec11 the\cf12 \strokec12  \cf11 \strokec11 right\cf12 \strokec12  \cf11 \strokec11 n\cf12 \strokec12  \cf11 \strokec11 spots\cf13 \strokec13 ,\cf12 \strokec12 \
\cf13 \strokec13 --\cf12 \strokec12  \cf17 \strokec17 and\cf12 \strokec12  \cf11 \strokec11 adding\cf12 \strokec12  \cf11 \strokec11 that\cf12 \strokec12  \cf11 \strokec11 goal\cf12 \strokec12  \cf11 \strokec11 to\cf12 \strokec12  \cf11 \strokec11 the\cf12 \strokec12  \cf11 \strokec11 game\cf12 \strokec12  \cf11 \strokec11 history\cf13 \strokec13 .\cf12 \strokec12 \
\
\pard\pardeftab720\sl280\partightenfactor0
\cf11 \strokec11 goal\cf12 \strokec12  \cf11 \strokec11 points\cf12 \strokec12  \cf11 \strokec11 name\cf12 \strokec12  \cf11 \strokec11 oldList\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf11 \strokec11 replicate\cf12 \strokec12  \cf11 \strokec11 points\cf12 \strokec12  \cf13 \strokec13 []\cf12 \strokec12  \cf13 \strokec13 ++\cf12 \strokec12  \cf16 \strokec16 map\cf12 \strokec12  \cf13 \strokec13 (\cf16 \strokec16 map\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 name\cf13 \strokec13 ++))\cf12 \strokec12  \cf11 \strokec11 oldList\cf12 \strokec12 \
\
\pard\pardeftab720\sl280\partightenfactor0
\cf13 \strokec13 --\cf12 \strokec12  \cf11 \strokec11 We\cf12 \strokec12  \cf11 \strokec11 can\cf12 \strokec12  \cf11 \strokec11 combine\cf12 \strokec12  \cf11 \strokec11 two\cf12 \strokec12  \cf11 \strokec11 of\cf12 \strokec12  \cf11 \strokec11 these\cf12 \strokec12  \cf11 \strokec11 tables\cf12 \strokec12  \cf11 \strokec11 by\cf12 \strokec12  \cf11 \strokec11 adding\cf12 \strokec12  \cf11 \strokec11 corresponding\cf12 \strokec12  \cf11 \strokec11 elements\cf12 \strokec12 \
\
\pard\pardeftab720\sl280\partightenfactor0
\cf11 \strokec11 combine\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf16 \strokec16 zipWith\cf12 \strokec12  \cf13 \strokec13 (++)\cf12 \strokec12 \
\
\pard\pardeftab720\sl280\partightenfactor0
\cf13 \strokec13 --\cf12 \strokec12  \cf11 \strokec11 This\cf12 \strokec12  \cf11 \strokec11 computes\cf12 \strokec12  \cf11 \strokec11 a\cf12 \strokec12  \cf11 \strokec11 fixpoint\cf13 \strokec13 ;\cf12 \strokec12  \cf11 \strokec11 notice\cf12 \strokec12  \cf11 \strokec11 that\cf12 \strokec12  \cf11 \strokec11 newList\cf12 \strokec12  \cf17 \strokec17 is\cf12 \strokec12  \cf11 \strokec11 both\cf12 \strokec12  \cf11 \strokec11 the\cf12 \strokec12  \cf11 \strokec11 input\cf12 \strokec12  \cf17 \strokec17 and\cf12 \strokec12 \
\cf13 \strokec13 --\cf12 \strokec12  \cf11 \strokec11 the\cf12 \strokec12  \cf11 \strokec11 output\cf12 \strokec12  \cf11 \strokec11 from\cf12 \strokec12  \cf11 \strokec11 f\cf13 \strokec13 .\cf12 \strokec12  \cf11 \strokec11 Yay\cf12 \strokec12  \cf11 \strokec11 laziness\cf13 \strokec13 .\cf12 \strokec12 \
\
\pard\pardeftab720\sl280\partightenfactor0
\cf11 \strokec11 zeroOrMore\cf12 \strokec12  \cf11 \strokec11 f\cf12 \strokec12  \cf11 \strokec11 oldList\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf11 \strokec11 newList\cf12 \strokec12   \cf11 \strokec11 where\cf12 \strokec12  \cf11 \strokec11 newList\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf11 \strokec11 oldList\cf12 \strokec12  \cf19 \strokec19 `combine`\cf12 \strokec12  \cf11 \strokec11 f\cf12 \strokec12  \cf11 \strokec11 newList\cf12 \strokec12 \
\
\pard\pardeftab720\sl280\partightenfactor0
\cf13 \strokec13 --\cf12 \strokec12  \cf11 \strokec11 Putting\cf12 \strokec12  \cf11 \strokec11 it\cf12 \strokec12  \cf11 \strokec11 together\cf13 \strokec13 :\cf12 \strokec12 \
\
\pard\pardeftab720\sl280\partightenfactor0
\cf11 \strokec11 ways\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf16 \strokec16 zeroOrMore\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 goal\cf12 \strokec12  \cf14 \strokec14 2\cf12 \strokec12  \cf19 \strokec19 "safety, "\cf13 \strokec13 )\cf12 \strokec12  $\
     \cf16 \strokec16 zeroOrMore\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 goal\cf12 \strokec12  \cf14 \strokec14 3\cf12 \strokec12  \cf19 \strokec19 "field goal, "\cf13 \strokec13 )\cf12 \strokec12  $\
     \cf16 \strokec16 zeroOrMore\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 goal\cf12 \strokec12  \cf14 \strokec14 7\cf12 \strokec12  \cf19 \strokec19 "touchdown, "\cf13 \strokec13 )\cf12 \strokec12  $\
     \cf11 \strokec11 baseCase\cf12 \strokec12 \
\
\cf11 \strokec11 main\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf11 \strokec11 mapM_\cf12 \strokec12  \cf11 \strokec11 print\cf12 \strokec12  $ \cf13 \strokec13 (\cf11 \strokec11 ways\cf12 \strokec12  \cf13 \strokec13 !!\cf12 \strokec12  \cf14 \strokec14 10\cf13 \strokec13 )\cf12 \strokec12 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf7 \cb1 \strokec7 If ordering matters, you can just move the 'zero or more' outside:\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf13 \cb9 \strokec13 (\cf11 \strokec11 f\cf12 \strokec12  \cf13 \strokec13 <|>\cf12 \strokec12  \cf11 \strokec11 g\cf13 \strokec13 )\cf12 \strokec12  \cf11 \strokec11 x\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf11 \strokec11 f\cf12 \strokec12  \cf11 \strokec11 x\cf12 \strokec12  \cf19 \strokec19 `combine`\cf12 \strokec12  \cf11 \strokec11 g\cf12 \strokec12  \cf11 \strokec11 x\cf12 \strokec12 \
\
\pard\pardeftab720\sl280\partightenfactor0
\cf11 \strokec11 orderedWays\cf12 \strokec12  \cf13 \strokec13 =\cf12 \strokec12  \cf16 \strokec16 zeroOrMore\cf12 \strokec12  \cf13 \strokec13 (\cf11 \strokec11 goal\cf12 \strokec12  \cf14 \strokec14 2\cf12 \strokec12  \cf19 \strokec19 "safety, "\cf12 \strokec12  \cf13 \strokec13 <|>\cf12 \strokec12  \cf11 \strokec11 goal\cf12 \strokec12  \cf14 \strokec14 3\cf12 \strokec12  \cf19 \strokec19 "field goal, "\cf12 \strokec12  \cf13 \strokec13 <|>\cf12 \strokec12  \cf11 \strokec11 goal\cf12 \strokec12  \cf14 \strokec14 7\cf12 \strokec12  \cf19 \strokec19 "touchdown, "\cf13 \strokec13 )\cf12 \strokec12  \cf11 \strokec11 baseCase\cf12 \strokec12 \
\pard\pardeftab720\sl540\sa160\partightenfactor0

\f4\b\fs36 \cf7 \cb1 \strokec7 Things to look for\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1171968639490660#things-to-look-for"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls4\ilvl0
\f3\b0\fs24 \cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Some candidates will suggest the "brute force solution" of exploding all combinations of 2,3, and 7, and checking which are valid. This requires three for-loops from 0 to k, and is thus O(k^3), or if you're smart O(k^2) \{see above\}. Since k = N / C, This solution is actually O(N^3) or O(N^2). Candidates should realize that as the number of distinct point values grows larger, this approach is less efficient, as the number of for-loops increases.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 It's good when a candidate mentions dynamic programming (or even memoization). It's even better when a candidate demonstrates understanding of the concept.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Alternatively, it's possible to start from score k and work backwards, as long as intermediate results are stored and not recomputed. This approach can actually be more efficient, as it can avoid computing some scores that aren't used in the computation for final score k.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Be sure candidates deal with duplicates. For instance for k = 5, they should only return\'a0
\f4\b one
\f3\b0 \'a0combination, and\'a0
\f4\b not
\f3\b0 \'a0"a field goal and a safety, AND a safety and a field goal".\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Good candidates will not hard-code 2, 3, or 7 anywhere, but instead access them in a generic fashion, as if they have a list of point values.\
}