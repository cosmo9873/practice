{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fmodern\fcharset0 Courier;
\f3\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red22\green25\blue31;\red255\green255\blue255;\red50\green94\blue238;
\red249\green249\blue249;\red66\green147\blue62;\red42\green44\blue51;\red147\green0\blue147;\red178\green113\blue6;
\red14\green112\blue173;\red143\green144\blue150;\red133\green85\blue4;}
{\*\expandedcolortbl;;\cssrgb\c11373\c12941\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c25098\c47059\c94902;
\cssrgb\c98039\c98039\c98039;\cssrgb\c31373\c63137\c30980;\cssrgb\c21961\c22745\c25882;\cssrgb\c65098\c14902\c64314;\cssrgb\c75686\c51765\c392;
\cssrgb\c392\c51765\c73333;\cssrgb\c62745\c63137\c65490;\cssrgb\c59608\c40784\c392;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl860\partightenfactor0

\f0\b\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 GarbageCollector\
\pard\pardeftab720\sl480\partightenfactor0

\fs30 \cf2 Warning: I used to ask this question, and we empirically found that it wasn't generating a lot of signal. Use at your own risk.\'a0
\f1\b0 Owner: Keith Adams\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\i \cf2 \cb3 Problem
\i0 :\'a0
\f0\b Implement a simple garbage collector
\f1\b0 . Given a directed graph, and a "root" node in that graph, find all nodes that are reachable via a directed path from the root. I usually let the candidate work out how to represent the graph, etc. Here is a solution using the strategy known as mark-and-sweep, using BFS to traverse the reference graph:\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf4 \cb5 \strokec4 #include \cf6 \strokec6 <stdio.h>\cf7 \strokec7 \
\cf4 \strokec4 #include \cf6 \strokec6 <assert.h>\cf7 \strokec7 \
\cf4 \strokec4 #include \cf6 \strokec6 <queue>\cf7 \strokec7 \
\cf4 \strokec4 #include \cf6 \strokec6 <vector>\cf7 \strokec7 \
\cf4 \strokec4 #include \cf6 \strokec6 <string>\cf7 \strokec7 \
\
\pard\pardeftab720\sl480\partightenfactor0
\cf8 \strokec8 using\cf7 \strokec7  \cf8 \strokec8 namespace\cf7 \strokec7  \cf9 \strokec9 std\cf7 \strokec7 ;\
\
\cf8 \strokec8 template\cf7 \strokec7  <\cf8 \strokec8 typename\cf7 \strokec7  Payload>\
\cf8 \strokec8 struct\cf7 \strokec7  TNode \{\
  Payload       m_payload;\
  \cf8 \strokec8 bool\cf7 \strokec7           m_mark;\
  \cf9 \strokec9 vector\cf7 \strokec7 <TNode<Payload>*> m_neighbors;\
\};\
\
\cf8 \strokec8 typedef\cf7 \strokec7  TNode<\cf9 \strokec9 string\cf7 \strokec7 > Node;\
\cf8 \strokec8 typedef\cf7 \strokec7  \cf9 \strokec9 vector\cf7 \strokec7 <Node*> Graph;\
\
\cf8 \strokec8 void\cf7 \strokec7 \
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \strokec4 collect\cf7 \strokec7 (Node *root, Graph& g, Graph& garbage) \{\
  \cf8 \strokec8 for\cf7 \strokec7  (Graph::iterator i = g.begin(); i != g.end(); ++i) \{\
    (*i)->m_mark = \cf10 \strokec10 false\cf7 \strokec7 ;\
  \}\
\
  \cf9 \strokec9 queue\cf7 \strokec7 <Node*> q;\
  q.push(root);\
\
  \cf8 \strokec8 while\cf7 \strokec7  (!q.empty()) \{\
    
\f3\i \cf11 \strokec11 // BFS: dfs would involve either an explicit stack<Node>, or
\f2\i0 \cf7 \strokec7 \
    
\f3\i \cf11 \strokec11 // an implicit stack via recursion. Fun topic for discussion w/
\f2\i0 \cf7 \strokec7 \
    
\f3\i \cf11 \strokec11 // candidate: for which heaps does BFS do better? DFS?
\f2\i0 \cf7 \strokec7 \
    Node *n = q.front();\
    assert(!n->m_mark);\
    q.pop();\
    n->m_mark = \cf10 \strokec10 true\cf7 \strokec7 ;\
    \cf8 \strokec8 for\cf7 \strokec7  (Graph::iterator i = n->m_neighbors.begin();\
         i != n->m_neighbors.end(); ++i) \{\
      \cf8 \strokec8 if\cf7 \strokec7  ((*i)->m_mark) \cf8 \strokec8 continue\cf7 \strokec7 ; 
\f3\i \cf11 \strokec11 // careful! cycles!
\f2\i0 \cf7 \strokec7 \
      
\f3\i \cf11 \strokec11 // Some candidates insert all neighbors, whether marked or not, into
\f2\i0 \cf7 \strokec7 \
      
\f3\i \cf11 \strokec11 // the set of pending items. This changes the big-O space utilization!
\f2\i0 \cf7 \strokec7 \
      
\f3\i \cf11 \strokec11 // Give them a hard time about it.
\f2\i0 \cf7 \strokec7 \
      q.push(*i);\
    \}\
  \}\
\
  
\f3\i \cf11 \strokec11 // Everything reachable is marked. Insert everything unreached into
\f2\i0 \cf7 \strokec7 \
  
\f3\i \cf11 \strokec11 // the garbage graph.
\f2\i0 \cf7 \strokec7 \
  \cf8 \strokec8 for\cf7 \strokec7  (Graph::iterator i = g.begin(); i != g.end(); ++i) \{\
    \cf8 \strokec8 if\cf7 \strokec7  (!(*i)->m_mark) \{\
      garbage.push_back(*i);\
    \}\
  \}\
\}\
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb3 \strokec2 Every candidate I've ever interviewed has selected "mark-and-sweep," which is mostly a graph traversal. DFS and BFS both conceptually work equally well. One wrinkle: make sure not to revisit old nodes, since cycles exist. The fun part comes in discussing the behavior of the algorithm. Given a graph with E edges and V vertices. The running time is properly O(E), while the space used is O(V). The fact that there are two different parameters for time and space confuses some candidates.\cb1 \
\cb3 More thoughtful candidates will find these time bounds kind of troubling. This is a good sign; O(E) time especially seems a little crazy at first. This is, after all, how garbage collectors work under the hood; it really must traverse every live edge. Does this mean that the garbage collector changes the big-O behavior of, e.g., Java programs? The answer turns out to be "no," because the Java program must have done O(E) work in the first place to create that graph of nodes. This is a fairly deep insight, which candidates rarely hit on.\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 CONTRAINDICATIONS\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0 \cf2 \cb3 Candidates with a deep language runtime background may overthink this, going straight for, e.g., an incremental or concurrent solution. Stop them from doing so.\cb1 \
\cb3 I've had bad experiences with candidates who code this in straight C (as opposed to C++). They spend so much energy on the representation of the adjacency lists that it can be hard to extract signal. (Arguably, this is useful as negative signal.) Either try to migrate them to something higher level (C++ suffices as high level for this purpose), provide hints for the data representation, or choose a different question.\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 GOING DEEPER\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Q
\f1\b0 : Is it necessary to use this much space?\'a0
\f0\b A
\f1\b0 : Yep.\cb1 \
\ls1\ilvl0
\f0\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Q
\f1\b0 : Really?\'a0
\f0\b A
\f1\b0 : Uh, I'm pretty sure. (Hopefully the candidate starts reasoning about the need to backtrack here: to remember which paths you've already been down so as not to revisit them).\cb1 \
\ls1\ilvl0
\f0\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Q
\f1\b0 \'a0Really\'a0
\i really
\i0 ?\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It turns out it's possible to implement the graph search in constant space. One approach is Deutsch-Schorr-Waite: rather than using an implicit (recursion) or explicit (iteration) stack to keep track of the path that led to the current node, pointers are flipped along the path you've traversed to arrive at this node, and you backtrack by following these flipped edges. Another approach is Knuth's bounded-capacity stack: when you run out of stack space, well, you forget to finish marking some nodes. So you have to keep iterating up at the root node until you see all the root's children are marked. This is\'a0
\i absurd
\i0 \'a0A++ territory, and I can't imagine a candidate\'a0
\i coding
\i0 \'a0this in an interview, but steering the conversation in this direction via the Socratic method will give you a sense for the candidate's ability to think about this sort of thing on their feet.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Exploit parallelism. Candidates who are strong at concurrent thinking will quickly realize you can "feed" N threads out of the BFS/DFS stack/queue; the hard part here is getting the termination condition right. It is rare, but not impossible, to see a working parallel implementation. Here is a mixed serial/parallel implementation, which reuses some code for both.\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf4 \cb5 \strokec4 #include \cf6 \strokec6 <stdio.h>\cf7 \strokec7 \
\cf4 \strokec4 #include \cf6 \strokec6 <pthread.h>\cf7 \strokec7 \
\cf4 \strokec4 #include \cf6 \strokec6 <assert.h>\cf7 \strokec7 \
\cf4 \strokec4 #include \cf6 \strokec6 <vector>\cf7 \strokec7 \
\cf4 \strokec4 #include \cf6 \strokec6 <queue>\cf7 \strokec7 \
\cf4 \strokec4 #include \cf6 \strokec6 <string>\cf7 \strokec7 \
\
\pard\pardeftab720\sl480\partightenfactor0
\cf8 \strokec8 using\cf7 \strokec7  \cf8 \strokec8 namespace\cf7 \strokec7  \cf9 \strokec9 std\cf7 \strokec7 ;\
\
\cf8 \strokec8 struct\cf7 \strokec7  Node \{\
  \cf9 \strokec9 string\cf7 \strokec7         m_data;\
  \cf8 \strokec8 bool\cf7 \strokec7           m_mark;\
  \cf9 \strokec9 vector\cf7 \strokec7 <Node*> m_children;\
\};\
\
\cf8 \strokec8 typedef\cf7 \strokec7  \cf9 \strokec9 vector\cf7 \strokec7 <Node*> Graph;\
\
\pard\pardeftab720\sl480\partightenfactor0

\f3\i \cf11 \strokec11 // Support for both styles of mark-and-sweep.
\f2\i0 \cf7 \strokec7 \
\pard\pardeftab720\sl480\partightenfactor0
\cf8 \strokec8 void\cf7 \strokec7  \cf4 \strokec4 unmark\cf7 \strokec7 (\cf8 \strokec8 const\cf7 \strokec7  Graph& g) \{\
  \cf8 \strokec8 for\cf7 \strokec7  (\cf8 \strokec8 int\cf7 \strokec7  i = \cf12 \strokec12 0\cf7 \strokec7 ; i < g.size(); i++) \{\
    g[i]->m_mark = \cf10 \strokec10 false\cf7 \strokec7 ;\
  \}\
\}\
\
\cf8 \strokec8 void\cf7 \strokec7  \cf4 \strokec4 sweepUnmarked\cf7 \strokec7 (Graph& g) \{\
  \cf8 \strokec8 for\cf7 \strokec7  (\cf8 \strokec8 int\cf7 \strokec7  i = \cf12 \strokec12 0\cf7 \strokec7 ; i < g.size(); i++) \{\
    \cf8 \strokec8 if\cf7 \strokec7  (!g[i]->m_mark) \{\
      \cf8 \strokec8 delete\cf7 \strokec7  g[i];\
      g[i] = \cf10 \strokec10 NULL\cf7 \strokec7 ;\
    \}\
  \}\
\}\
\
\cf8 \strokec8 void\cf7 \strokec7  \cf4 \strokec4 exploreOneNode\cf7 \strokec7 (Node* n, \cf9 \strokec9 queue\cf7 \strokec7 <Node*>& newNodes) \{\
  \cf8 \strokec8 if\cf7 \strokec7  (n->m_mark) \cf8 \strokec8 return\cf7 \strokec7 ;\
  n->m_mark = \cf10 \strokec10 true\cf7 \strokec7 ;\
  \cf8 \strokec8 for\cf7 \strokec7  (\cf8 \strokec8 int\cf7 \strokec7  i = \cf12 \strokec12 0\cf7 \strokec7 ; i < n->m_children.size(); i++) \{\
    Node* c = n->m_children[i];\
    newNodes.push(c);\
  \}\
\}\
\
\pard\pardeftab720\sl480\partightenfactor0

\f3\i \cf11 \strokec11 // Serial solution. BFS-based.
\f2\i0 \cf7 \strokec7 \
\pard\pardeftab720\sl480\partightenfactor0
\cf8 \strokec8 void\cf7 \strokec7  \cf4 \strokec4 serialMarkAndSweep\cf7 \strokec7 (Graph& g, Node* root) \{\
  \cf9 \strokec9 queue\cf7 \strokec7 <Node*> frontier;\
  unmark(g);\
  frontier.push(root);\
  \cf8 \strokec8 while\cf7 \strokec7  (!frontier.empty()) \{\
    Node* n = frontier.front();\
    frontier.pop();\
    exploreOneNode(n, frontier);\
  \}\
  sweepUnmarked(g);\
\}\
\
\pard\pardeftab720\sl480\partightenfactor0

\f3\i \cf11 \strokec11 // pthread worker for parallel mark and sweep.
\f2\i0 \cf7 \strokec7 \
\pard\pardeftab720\sl480\partightenfactor0
\cf8 \strokec8 static\cf7 \strokec7  \cf8 \strokec8 void\cf7 \strokec7 *\
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \strokec4 pmarkWork\cf7 \strokec7 (\cf8 \strokec8 void\cf7 \strokec7 * arg) \{\
  
\f3\i \cf11 \strokec11 // A private copy of serial mark and sweep. It's ok to race on the mark bit
\f2\i0 \cf7 \strokec7 \
  
\f3\i \cf11 \strokec11 // with other threads; the worst that can happen if is exploring a node twice.
\f2\i0 \cf7 \strokec7 \
  \cf9 \strokec9 queue\cf7 \strokec7 <Node*> q;\
  q.push((Node*)arg);\
  \cf8 \strokec8 while\cf7 \strokec7  (!q.empty()) \{\
    Node* n = q.front();\
    q.pop();\
    exploreOneNode(n, q);\
  \}\
  \cf8 \strokec8 return\cf7 \strokec7  \cf10 \strokec10 NULL\cf7 \strokec7 ;\
\}\
\
\
\pard\pardeftab720\sl480\partightenfactor0

\f3\i \cf11 \strokec11 // Here's the whole shebang.
\f2\i0 \cf7 \strokec7 \
\pard\pardeftab720\sl480\partightenfactor0
\cf8 \strokec8 void\cf7 \strokec7  \cf4 \strokec4 parallelMarkAndSweep\cf7 \strokec7 (Graph& g, Node* root) \{\
  unmark(g);\
\
  \cf9 \strokec9 queue\cf7 \strokec7 <Node*> frontier;\
  
\f3\i \cf11 \strokec11 // Explore a little to find some more roots.
\f2\i0 \cf7 \strokec7 \
  frontier.push(root);\
  \cf8 \strokec8 for\cf7 \strokec7  (\cf8 \strokec8 int\cf7 \strokec7  i = \cf12 \strokec12 0\cf7 \strokec7 ; i < \cf12 \strokec12 3\cf7 \strokec7 ; i++) \{\
    \cf8 \strokec8 if\cf7 \strokec7  (frontier.empty()) \{\
      sweepUnmarked(g);\
      \cf8 \strokec8 return\cf7 \strokec7 ;\
    \}\
    Node *n = frontier.front();\
    frontier.pop();\
    exploreOneNode(n, frontier);\
  \}\
\
  
\f3\i \cf11 \strokec11 // Spawn threads for the lesser of numprocs, numroots
\f2\i0 \cf7 \strokec7 \
  \cf8 \strokec8 int\cf7 \strokec7  numWorkers = min<\cf8 \strokec8 int\cf7 \strokec7 >(\cf12 \strokec12 4\cf7 \strokec7  * sysconf(_SC_NPROCESSORS_ONLN), frontier.size());\
  \cf8 \strokec8 pthread_t\cf7 \strokec7  threads[numWorkers];\
\
  \cf8 \strokec8 for\cf7 \strokec7  (\cf8 \strokec8 int\cf7 \strokec7  i = \cf12 \strokec12 0\cf7 \strokec7 ; i < numWorkers; i++) \{\
    assert(!frontier.empty());\
    Node *n = frontier.front();\
    frontier.pop();\
    pthread_create(&threads[i], \cf10 \strokec10 NULL\cf7 \strokec7 , pmarkWork, n);\
  \}\
\
  
\f3\i \cf11 \strokec11 // Anything left in the queue might need collecting, too, so do
\f2\i0 \cf7 \strokec7 \
  
\f3\i \cf11 \strokec11 // it serially here.
\f2\i0 \cf7 \strokec7 \
  \cf8 \strokec8 while\cf7 \strokec7  (!frontier.empty()) \{\
    Node* n = frontier.front();\
    frontier.pop();\
    exploreOneNode(n, frontier);\
  \}\
\
  \cf8 \strokec8 for\cf7 \strokec7  (\cf8 \strokec8 int\cf7 \strokec7  i = \cf12 \strokec12 0\cf7 \strokec7 ; i < numWorkers; i++) \{\
    pthread_join(threads[i], \cf10 \strokec10 NULL\cf7 \strokec7 );\
  \}\
\
  sweepUnmarked(g);\
\}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls2\ilvl0
\f1 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What if the graph is too big to fit on a machine? E.g., this is the twitter follower graph. Again, this one is hard to take past discussion, but it's a fruitful discussion for people with the right background.\cb1 \
}