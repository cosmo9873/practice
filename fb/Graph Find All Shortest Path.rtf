{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fmodern\fcharset0 Courier-Oblique;
\f3\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red22\green25\blue31;\red255\green255\blue255;\red41\green67\blue135;
\red143\green144\blue150;\red249\green249\blue249;\red42\green44\blue51;\red133\green85\blue4;\red147\green0\blue147;
}
{\*\expandedcolortbl;;\cssrgb\c11373\c12941\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c21176\c34510\c60000;
\cssrgb\c62745\c63137\c65490;\cssrgb\c98039\c98039\c98039;\cssrgb\c21961\c22745\c25882;\cssrgb\c59608\c40784\c392;\cssrgb\c65098\c14902\c64314;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl860\partightenfactor0

\f0\b\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Graph Find All Shortest Path\
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 Owner:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/profile/?id=100002904623597"}}{\fldrslt \cf4 \strokec4 Beny Yanbin Luo}}\cb1 \
\cb3 Derived from question:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/wiki/Engineering/Interviewing/Ninja/Graph_DAG_Traversal/"}}{\fldrslt \cf4 \strokec4 Graph DAG Traversal}}\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 Question\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 Find all shortest path in graph with distance. I.E. to locations on map.\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f0\b \cf2 \cb3 Part I (15 ~ 25 min)
\f1\b0 \'a0Find all the shortest paths between two nodes on graph. Given API: List<Pair<Node, Distance>> getAllNeighbors(Node)\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Key Point: DFS / BFS / Dijkstra, Priority Queue, Purging Search, Back Tracking.\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f0\b \cf2 \cb3 Part II (5 ~ 10 min)
\f1\b0 \'a0Optimization: Use heuristic function that guess the distance between nodes Given API: Distance heuristicDistance(Node A, Node B)\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls2\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Key Point: A* Search (Or similar search selection logic)\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 Expected Question By Candidate\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls3\ilvl0
\f1\b0\fs30 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 All distance are positive or zero value?\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 How big are the graph?\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Time / space complexity limit?\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 Positive Signals\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls4\ilvl0
\f1\b0\fs30 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Confirm / consider corner cases.\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Explained the solution clearly. Or develop the solution form observation.\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Finished the question in given time.\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Develop solution base on example. Verify with example.\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Clean / compact code.\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Solution works, with minor / zero bug.\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Get the complexity correct.\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Figure out the modified BFS / DFS without hint.\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Figure out the optimization without too much hints.\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 Common Mistakes\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls5\ilvl0
\f1\b0\fs30 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Try to remember visited nodes, this will ignore some path that should be in the answer.\cb1 \
\ls5\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Did not purge the search when already saw one shortest path.\cb1 \
\ls5\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Try to build the path by back tracking, failed to do so.\cb1 \
\ls5\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In DFS, when a shorter path found, forgot to clear the existing paths.\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 DFS Implementation\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \
\pard\pardeftab720\sl480\partightenfactor0

\f2\i \cf5 \cb6 \strokec5 # DFS implementation.
\f3\i0 \cf7 \strokec7 \

\f2\i \cf5 \strokec5 # Small optimization: pass down existing min_cost to purge long path.
\f3\i0 \cf7 \strokec7 \
def findAllShortestPath_dfs(src, dest, path = [], path_cost = \cf8 \strokec8 0\cf7 \strokec7 ):\
    min_path = []\
    min_cost = inf\
    \cf9 \strokec9 if\cf7 \strokec7  src == dest:\
        min_path = [path + [dest]]\
        min_cost = path_cost\
    \cf9 \strokec9 else\cf7 \strokec7 :\
        \cf9 \strokec9 for\cf7 \strokec7  node, cost in getAllNeighbors(src):\
            \cf9 \strokec9 if\cf7 \strokec7  node not in path:\
                node_paths, node_cost = findAllShortestPath_dfs(node, dest, path + [src], path_cost + cost)\
                \cf9 \strokec9 if\cf7 \strokec7  node_cost < min_cost:\
                    min_path = node_paths\
                    min_cost = node_cost\
                elif node_cost == min_cost:\
                    min_path += node_paths\
    \cf9 \strokec9 return\cf7 \strokec7  min_path, min_cost\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 \strokec2 Modified BFS Implementation\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \
\pard\pardeftab720\sl480\partightenfactor0

\f2\i \cf5 \cb6 \strokec5 # Modified BFS implementation
\f3\i0 \cf7 \strokec7 \
def findAllShortestPath_bfs(\cf9 \strokec9 self\cf7 \strokec7 , src, dest):\
    min_path = []\
    min_cost = inf;\
    queue = PriorityQueue()\
    queue.put((\cf8 \strokec8 0\cf7 \strokec7 , [src]))\
\
    \cf9 \strokec9 while\cf7 \strokec7  not queue.\cf9 \strokec9 empty\cf7 \strokec7 ():\
        path_cost, path = queue.get()\
\
        
\f2\i \cf5 \strokec5 # purge paths that are too long
\f3\i0 \cf7 \strokec7 \
        \cf9 \strokec9 if\cf7 \strokec7  path_cost > min_cost:\
            \cf9 \strokec9 break\cf7 \strokec7 \
\
        
\f2\i \cf5 \strokec5 # because we use priority queue, this must be the shortest path
\f3\i0 \cf7 \strokec7 \
        \cf9 \strokec9 if\cf7 \strokec7  path[\cf8 \strokec8 -1\cf7 \strokec7 ] == dest:\
            min_path.append(path)\
            min_cost = path_cost\
\
        \cf9 \strokec9 for\cf7 \strokec7  node, cost in getAllNeighbors(path[\cf8 \strokec8 -1\cf7 \strokec7 ]):\
            \cf9 \strokec9 if\cf7 \strokec7  node not in path:\
                queue.put((path_cost + cost, path + [node]))\
\
   \cf9 \strokec9 return\cf7 \strokec7  min_path, min_cost\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 \strokec2 Heuristic Search Implementation\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \
\pard\pardeftab720\sl480\partightenfactor0

\f2\i \cf5 \cb6 \strokec5 # heuristic search implementation
\f3\i0 \cf7 \strokec7 \
def findAllShortestPath_hfs(\cf9 \strokec9 self\cf7 \strokec7 , src, dest):\
    min_path = []\
    min_cost = inf;\
    queue = Queue.PriorityQueue()\
    queue.put((\cf9 \strokec9 self\cf7 \strokec7 .heuristicDistance(src, dest), \cf8 \strokec8 0\cf7 \strokec7 , [src]))\
\
    \cf9 \strokec9 while\cf7 \strokec7  not queue.\cf9 \strokec9 empty\cf7 \strokec7 ():\
        h_cost, path_cost, path = queue.get()\
\
        
\f2\i \cf5 \strokec5 # purge external paths
\f3\i0 \cf7 \strokec7 \
        \cf9 \strokec9 if\cf7 \strokec7  path_cost > min_cost:\
            \cf9 \strokec9 break\cf7 \strokec7 \
\
        
\f2\i \cf5 \strokec5 # because we use priority queue, this must be the shortest path
\f3\i0 \cf7 \strokec7 \
        \cf9 \strokec9 if\cf7 \strokec7  path[\cf8 \strokec8 -1\cf7 \strokec7 ] == dest:\
            min_path.append(path)\
            min_cost = path_cost\
\
        \cf9 \strokec9 for\cf7 \strokec7  node, cost in \cf9 \strokec9 self\cf7 \strokec7 .getAllNeighbors(path[\cf8 \strokec8 -1\cf7 \strokec7 ]):\
            \cf9 \strokec9 if\cf7 \strokec7  node not in path:\
                queue.put((\
                    \cf9 \strokec9 self\cf7 \strokec7 .heuristicDistance(node, dest) + path_cost + cost,\
                    path_cost + cost,\
                    path + [node]))\
\
    \cf9 \strokec9 return\cf7 \strokec7  min_path, min_cost\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f0\b\fs42 \cf2 \cb3 \strokec2 Dijkstra Implementation\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 Some PHD background candidate may try to implement the Dijkstra algorithm without using matrix. This is fine. It's not easy find out the issue in the implementation.\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3 \cf7 \cb6 \strokec7 TBD\
}