{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red22\green25\blue31;\red255\green255\blue255;\red41\green67\blue135;
\red133\green85\blue4;\red249\green249\blue249;\red42\green44\blue51;\red66\green147\blue62;\red147\green0\blue147;
\red50\green94\blue238;}
{\*\expandedcolortbl;;\cssrgb\c11373\c12941\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c21176\c34510\c60000;
\cssrgb\c59608\c40784\c392;\cssrgb\c98039\c98039\c98039;\cssrgb\c21961\c22745\c25882;\cssrgb\c31373\c63137\c30980;\cssrgb\c65098\c14902\c64314;
\cssrgb\c25098\c47059\c94902;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl860\partightenfactor0

\f0\b\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Int to English\
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 Owner:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/profile/?id=551092511"}}{\fldrslt \cf4 \strokec4 Oded Blayer}}\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 INFO\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0 \cf2 \cb3 This is a Ninja question I use for most interviews, it has some problem solving and a lot of coding signal in it. It does\'a0
\f0\b not
\f1\b0 have complexity analysis as most solutions have the same runtime.\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 QUESTION DELIVERY\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0 \cf2 \cb3 Write a function that gets a number and prints it in English.\cb1 \
\cb3 I take the time to write the examples on the board - especially the very long number as it clarifies the questions to the candidate.\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf5 \cb6 \strokec5 19\cf7 \strokec7  -> \cf8 \strokec8 "nineteen"\cf7 \strokec7 \
\cf5 \strokec5 800\cf7 \strokec7  -> \cf8 \strokec8 "eight hundred"\cf7 \strokec7 \
\cf5 \strokec5 482910231\cf7 \strokec7  -> \cf8 \strokec8 "four hundred eighty two million nine hundred ten thousand two hundred thirty one"\cf7 \strokec7 \
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb3 \strokec2 Take a minute to confirm that the candidate has understood the question by providing a number:\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf5 \cb6 \strokec5 8762\cf7 \strokec7 \
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb3 \strokec2 Now, have the candidate fill out the string equivalent to confirm that they have understood the problem:\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf5 \cb6 \strokec5 8762\cf7 \strokec7  -> Eight thousand seven hundred sixty two.\
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 \strokec2 CLARIFICATION QUESTIONS\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0 \cf2 \cb3 Good candidates will ask those questions and write good code to handle them.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 what is the limit for the number? -
\f0\b \'a0I usually limit to int - 32 bit - ~2 billion signed
\f1\b0 . ( an opportunity to see if the candidate knows how big an int is)\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Should we handle negative numbers? -\'a0
\f0\b yes
\f1\b0 \cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 EXPECTATIONS\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls2\ilvl0
\f1\b0 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The problem solving part is usually not trivial, people are debating whether to start from the left or from the right.\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Good candidates will identify the repeating logic of handling triplets in a sub-function immediately.\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Starting from the right is much harder than going left-to-right but still possible.\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 At some point (usually during implementation) the candidate will recognize the special case of 11-19 (special names).\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A good candidate should produce clean working code in 30 minutes.\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 CODING\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0 \cf2 \cb3 We are looking for clean code and code re-use. Example:\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf9 \cb6 \strokec9 public\cf7 \strokec7  \cf9 \strokec9 static\cf7 \strokec7  String[] NUMBERS = \{\cf8 \strokec8 ""\cf7 \strokec7 , \cf8 \strokec8 "one"\cf7 \strokec7 , \cf8 \strokec8 "two"\cf7 \strokec7 ,..., \cf8 \strokec8 "nineteen"\cf7 \strokec7 \};\
\cf9 \strokec9 public\cf7 \strokec7  \cf9 \strokec9 static\cf7 \strokec7  String[] DECADES = \{\cf8 \strokec8 ""\cf7 \strokec7 , \cf8 \strokec8 ""\cf7 \strokec7 , \cf8 \strokec8 "twenty"\cf7 \strokec7 , \cf8 \strokec8 "thirty"\cf7 \strokec7 , ..., \cf8 \strokec8 "ninety"\cf7 \strokec7 \};\
\
\cf9 \strokec9 public\cf7 \strokec7  \cf9 \strokec9 static\cf7 \strokec7  String \cf10 \strokec10 intToEnglish\cf7 \strokec7 (\cf9 \strokec9 int\cf7 \strokec7  num) \{\
    \cf9 \strokec9 if\cf7 \strokec7  (num == \cf5 \strokec5 0\cf7 \strokec7 ) \cf9 \strokec9 return\cf7 \strokec7  \cf8 \strokec8 "zero"\cf7 \strokec7 ;\
    StringBuilder sb = \cf9 \strokec9 new\cf7 \strokec7  StringBuilder();\
\
    \cf9 \strokec9 if\cf7 \strokec7  (num < \cf5 \strokec5 0\cf7 \strokec7 ) \{\
         num *= -\cf5 \strokec5 1\cf7 \strokec7 ;\
         sb.append(\cf8 \strokec8 "minus "\cf7 \strokec7 );\
    \}\
\
    \cf9 \strokec9 if\cf7 \strokec7  (num >= \cf5 \strokec5 1000000000\cf7 \strokec7 ) \{\
        sb.append(tripletToEnglish(num/\cf5 \strokec5 1000000000\cf7 \strokec7 )).append(\cf8 \strokec8 " billion "\cf7 \strokec7 );\
        num %= \cf5 \strokec5 1000000000\cf7 \strokec7 ;\
    \}\
    \cf9 \strokec9 if\cf7 \strokec7  (num >= \cf5 \strokec5 1000000\cf7 \strokec7 ) \{\
        sb.append(tripletToEnglish(num/\cf5 \strokec5 1000000\cf7 \strokec7 )).append(\cf8 \strokec8 " million "\cf7 \strokec7 );\
        num %= \cf5 \strokec5 1000000\cf7 \strokec7 ;\
    \}\
    \cf9 \strokec9 if\cf7 \strokec7  (num >= \cf5 \strokec5 1000\cf7 \strokec7 ) \{\
        sb.append(tripletToEnglish(num/\cf5 \strokec5 1000\cf7 \strokec7 )).append(\cf8 \strokec8 " thousand "\cf7 \strokec7 );\
        num %= \cf5 \strokec5 1000\cf7 \strokec7 ;\
    \}\
    \cf9 \strokec9 if\cf7 \strokec7  (num >= \cf5 \strokec5 0\cf7 \strokec7 )  sb.append(tripletToEnglish(num));\
    \cf9 \strokec9 return\cf7 \strokec7  sb.toString();\
\
\}\
\
\cf9 \strokec9 public\cf7 \strokec7  \cf9 \strokec9 static\cf7 \strokec7  String \cf10 \strokec10 tripletToEnglish\cf7 \strokec7 (\cf9 \strokec9 int\cf7 \strokec7  x) \{\
    StringBuilder sb = \cf9 \strokec9 new\cf7 \strokec7  StringBuilder();\
    \cf9 \strokec9 if\cf7 \strokec7  (x >= \cf5 \strokec5 100\cf7 \strokec7 ) \{\
        sb.append(NUMBERS[x/\cf5 \strokec5 100\cf7 \strokec7 ]).append(\cf8 \strokec8 " hundred "\cf7 \strokec7 );\
        x%=\cf5 \strokec5 100\cf7 \strokec7 ;\
    \}\
    \cf9 \strokec9 if\cf7 \strokec7  (x < \cf5 \strokec5 20\cf7 \strokec7 ) \{\
        sb.append(NUMBERS(x));\
    \} \cf9 \strokec9 else\cf7 \strokec7  \{\
        sb.append(DECADES[x/\cf5 \strokec5 10\cf7 \strokec7 ]).append(\cf8 \strokec8 " "\cf7 \strokec7 ).append(NUMBERS[x%\cf5 \strokec5 10\cf7 \strokec7 ]);\
    \}\
    \cf9 \strokec9 return\cf7 \strokec7  sb.toString();\
\}\
}