{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red22\green25\blue31;\red255\green255\blue255;\red41\green67\blue135;
\red147\green0\blue147;\red249\green249\blue249;\red42\green44\blue51;\red50\green94\blue238;\red178\green113\blue6;
\red133\green85\blue4;}
{\*\expandedcolortbl;;\cssrgb\c11373\c12941\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c21176\c34510\c60000;
\cssrgb\c65098\c14902\c64314;\cssrgb\c98039\c98039\c98039;\cssrgb\c21961\c22745\c25882;\cssrgb\c25098\c47059\c94902;\cssrgb\c75686\c51765\c392;
\cssrgb\c59608\c40784\c392;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid402\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid1102\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl860\partightenfactor0

\f0\b\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Select kth element\
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 Owner:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/profile/?id=1507808"}}{\fldrslt \cf4 \strokec4 Jen Dolson}}\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls1\ilvl0
\f0\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Ninja Brown Bag Recording:
\f1\b0 \'a0{\field{\*\fldinst{HYPERLINK "https://l.facebook.com/l.php?u=https%3A%2F%2Fvod.thefacebook.com%2F%23%21%2Fvideo%2F11253%2FOct%2BBB%2B%2525231%2520&h=AT32z7i1SFFeC-XndvfJZIfBuyvE3LINkXX6NB3i773sLXjH-nfZcUioEPYZ5QYNWIEdxNH8yECoHmgenpqWhgwRBf5LdhdSh2Ob3sz8C6qtSQVwj70M_7Vck57leesphpKTCVOpeR-yS-1tWKAiONgb"}}{\fldrslt \cf4 \strokec4 10/6/2015}}\'a0I\'a0{\field{\*\fldinst{HYPERLINK "https://vod.thefacebook.com/#!/video/12835/Ninja+BB+-+Select+kth+Element"}}{\fldrslt \cf4 \strokec4 2/12/2016}}\'a0I\'a0{\field{\*\fldinst{HYPERLINK "https://our.intern.facebook.com/intern/hacktv/view/266908660372509/"}}{\fldrslt \cf4 \strokec4 10/25/16}}\cb1 \
\ls1\ilvl0
\f0\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Keynote:
\f1\b0 \'a0{\field{\*\fldinst{HYPERLINK "https://www.dropbox.com/s/a5eb5l1x2tbln84/kth_largest_keynote.key?dl=0"}}{\fldrslt \cf4 \strokec4 https://www.dropbox.com/s/a5eb5l1x2tbln84/kth_largest_keynote.key?dl=0}}\cb1 \
\pard\pardeftab720\sl480\partightenfactor0
\cf2 \cb3 Order statistics : select the kth largest element in an unsorted array of elements.\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b\fs36 \cf2 \cb3 Time\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \
\cb3 This question should take <= half the coding time in a standard Ninja interview.\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b\fs36 \cf2 \cb3 Setup\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 Suppose you have an array of integers 5, 3, 9, 1 (the array is length n) and a value k\cb1 \
\cb3 Find the kth largest value in the array e.g.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls2\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 k = 0 => 9\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 k = 1 => 5\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 k = n-1 => 1\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b\fs36 \cf2 \cb3 Approaches\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \
\cb3 Selecting the kth largest can be done a few ways. for example:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls3\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 sort and pick the kth\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 maintain an k-sized heap (of appropriate type min or max)\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 using a partitioning approach e.g. the quickselect algorithm.\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 scanning through the array multiple times\cb1 \
\pard\pardeftab720\sl480\partightenfactor0
\cf2 \cb3 The\'a0
\f0\b heap based solution
\f1\b0 \'a0is also a good one to have the candidate implement. The\'a0
\f0\b partition based solution
\f1\b0 \'a0can provide good signal, although some candidates already know the quickselect algorithm and might not have to do the same amount of work to derive it -- trust your judgement in terms of the amount of signal you can get. For example, if a candidate has never heard of a heap and gets stuck, you might want to switch your approach or move on to a different question.\cb1 \
\
\cb3 You can get a fair amount of signal at the start of this question by\'a0
\f0\b building up from the most obvious sorting / lookup method
\f1\b0 \'a0and having the candidates discuss tradeoffs of different approaches.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls4\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 For example, if your array is stored in shared memory and is not changing across different values of k, might be best to sort once and then have O(1) lookup after that. Another answer might be to do quickselect for each function call, doing the minimal amount of work to find k, until the array becomes fully sorted.\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 sorting also gives you a good lower bound of O(nlogn) for your discussion of algorithm performance\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If a candidate can't move past sorting, you can ask him/her how to find the solution if k=0, then k=1, and maybe build into the heap approach from there\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b\fs36 \cf2 \cb3 Heap based approach\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls5\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You can constrain the problem to lead the candidate to this approach\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl480\partightenfactor0
\ls5\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 e.g. streaming the array, array is very large, can\'92t copy more than half of it at any time\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls5\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Some languages don\'92t have obvious heap classes (e.g. Objective-C) \'96 don\'92t worry about this\cb1 \
\ls5\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Can let the candidate declare their own sane heap interface\cb1 \
\ls5\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 People familiar with C++ would think to use a priority queue\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 GOOD C++ EXAMPLE\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0 \cf2 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf5 \cb6 \strokec5 static\cf7 \strokec7  \cf5 \strokec5 int\cf7 \strokec7  \cf8 \strokec8 kthLargest\cf7 \strokec7 (\cf9 \strokec9 std\cf7 \strokec7 ::\cf9 \strokec9 vector\cf7 \strokec7 <\cf5 \strokec5 int\cf7 \strokec7 > &values, \cf5 \strokec5 const\cf7 \strokec7  \cf5 \strokec5 int\cf7 \strokec7  k) \{\
    \cf9 \strokec9 std\cf7 \strokec7 ::priority_queue<\cf5 \strokec5 int\cf7 \strokec7 , \cf9 \strokec9 std\cf7 \strokec7 ::\cf9 \strokec9 vector\cf7 \strokec7 <\cf5 \strokec5 int\cf7 \strokec7 >, \cf9 \strokec9 std\cf7 \strokec7 ::greater<\cf5 \strokec5 int\cf7 \strokec7 > > min_heap;\
    \cf5 \strokec5 for\cf7 \strokec7  (\cf5 \strokec5 int\cf7 \strokec7  i = \cf10 \strokec10 0\cf7 \strokec7 ; i < values.size(); ++i) \{\
        \cf5 \strokec5 if\cf7 \strokec7  (min_heap.size() <= k) \{\
            min_heap.push(values[i]);\
        \}\
        \cf5 \strokec5 else\cf7 \strokec7  \cf5 \strokec5 if\cf7 \strokec7  (values[i] > min_heap.top()) \{\
            min_heap.pop();\
            min_heap.push(values[i]);\
        \}\
    \}\
    \cf5 \strokec5 return\cf7 \strokec7  min_heap.top();\
\}\
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 \strokec2 BETTER C++ EXAMPLE (BOUNDS MEMORY USE TO N / 2 FOR ARRAY OF SIZE N)\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0 \cf2 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf5 \cb6 \strokec5 static\cf7 \strokec7  \cf5 \strokec5 int\cf7 \strokec7  \cf8 \strokec8 kthLargest\cf7 \strokec7 (\cf9 \strokec9 std\cf7 \strokec7 ::\cf9 \strokec9 vector\cf7 \strokec7 <\cf5 \strokec5 int\cf7 \strokec7 > &values, \cf5 \strokec5 const\cf7 \strokec7  \cf5 \strokec5 int\cf7 \strokec7  k) \{\
  \cf5 \strokec5 if\cf7 \strokec7  (k >= values.size() / \cf10 \strokec10 2\cf7 \strokec7 ) \{\
    \cf5 \strokec5 int\cf7 \strokec7  heapK = values.size() - k;\
    \cf9 \strokec9 std\cf7 \strokec7 ::priority_queue<\cf5 \strokec5 int\cf7 \strokec7 , \cf9 \strokec9 std\cf7 \strokec7 ::\cf9 \strokec9 vector\cf7 \strokec7 <\cf5 \strokec5 int\cf7 \strokec7 >> max_heap;\
    \cf5 \strokec5 for\cf7 \strokec7  (\cf5 \strokec5 int\cf7 \strokec7  i = \cf10 \strokec10 0\cf7 \strokec7 ; i < values.size(); ++i) \{\
      \cf5 \strokec5 if\cf7 \strokec7  (max_heap.size() < heapK) \{\
        max_heap.push(values[i]);\
      \}\
      \cf5 \strokec5 else\cf7 \strokec7  \cf5 \strokec5 if\cf7 \strokec7  (values[i] < max_heap.top()) \{\
        max_heap.pop();\
        max_heap.push(values[i]);\
      \}\
    \}\
    \cf5 \strokec5 return\cf7 \strokec7  max_heap.top();\
  \}\
  \cf5 \strokec5 else\cf7 \strokec7  \{\
    \cf9 \strokec9 std\cf7 \strokec7 ::priority_queue<\cf5 \strokec5 int\cf7 \strokec7 , \cf9 \strokec9 std\cf7 \strokec7 ::\cf9 \strokec9 vector\cf7 \strokec7 <\cf5 \strokec5 int\cf7 \strokec7 >, \cf9 \strokec9 std\cf7 \strokec7 ::greater<\cf5 \strokec5 int\cf7 \strokec7 > > min_heap;\
    \cf5 \strokec5 for\cf7 \strokec7  (\cf5 \strokec5 int\cf7 \strokec7  i = \cf10 \strokec10 0\cf7 \strokec7 ; i < values.size(); ++i) \{\
      \cf5 \strokec5 if\cf7 \strokec7  (min_heap.size() <= k) \{\
        min_heap.push(values[i]);\
      \}\
      \cf5 \strokec5 else\cf7 \strokec7  \cf5 \strokec5 if\cf7 \strokec7  (values[i] > min_heap.top()) \{\
        min_heap.pop();\
        min_heap.push(values[i]);\
      \}\
    \}\
    \cf5 \strokec5 return\cf7 \strokec7  min_heap.top();\
  \}\
\}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls6\ilvl0
\f1 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 note that the symmetry of the problem means that this is much more efficient for large values of k\cb1 \
\ls6\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 verbosity of the code will vary by languages. In languages where you can pass in the comparator dynamically, the code above should ideally be more concise.\cb1 \
\ls6\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 note that optimizations like pulling if-statements out of long loops can also be discussed (e.g. whether the if max_heap.size() < heapK is inside or outside of the main loop)\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b\fs36 \cf2 \cb3 Partitioning approach / Quickselect\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls7\ilvl0
\f1\b0\fs30 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 This is O(n) and in some real world cases might be the best approach\cb1 \
\ls7\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 For some values of k or unlucky pivots though, this would be O(n^2)\cb1 \
\ls7\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If a candidate just recites that this is O(n), see if he/she can actually think through the relative performance / worst case issues\cb1 \
\ls7\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 discuss how many times you would need to touch each element in the array : more than once\cb1 \
\ls7\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 This leads into discussion of a different approach where you can only stream the array \'96 i.e. process each element once or a minimal number of times.\cb1 \
\ls7\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 This is also a more well-known algorithm, but If you think you can get good signal, totally fine if a candidate implements this solution and not the heap one.\cb1 \
\pard\pardeftab720\sl480\partightenfactor0
\cf2 \cb3 Partition code is notoriously hard to get right when there are duplicates so it best to ask this with an array of no duplicates. There are at least three popular ways of partitioning an array. You could let candidates come up with their own version and convince yourself that it works. The second part of the question is to get the boundary conditions and recursive calls to partition right. If somebody rushes through it, an extension could be to ask them to get rid of the recursion. This is tail recursion so it's trivial to get rid of it but there are always gotchas.\cb1 \
\cb3 Usual errors : a) The classic Hoare Partition:{\field{\*\fldinst{HYPERLINK "http://l.facebook.com/l.php?u=http%3A%2F%2Franger.uta.edu%2F%7Echqding%2Fcse5311%2FLectures%2FCounting-Sort-Hoare-Partition.pdf&h=AT1ILZ_Hsr7L58ttEEp52aUMMXRaX18Jd1c5RwbPOX6kTdolUtDu7-A-O9fK-PGjEDYTv_iip-txPWFoDFYCFrNFHsuyLvL0t0LK4bKjHSt5vTOsYKSdNA1iwECAp-fNGZhwX7XhoF4ow7XB51EPTfny"}}{\fldrslt \cf4 \strokec4 is easy to go wrong with duplicates. Be attentive and convince yourself that code is not stuck in infinite loop. b) Selecting the right side and boundaries to recurse on is another aspect c) Most people get the complexity reasoning wrong and cant explain why a randomized version is linear asymptotically. It boils to the sum of the series n + n/2 .. 1 being O(n).\
Here is a possible solution using lomuto partition : [https://phabricator.fb.com/P2003203\cb1 \
}}More information on quickselect\'a0{\field{\*\fldinst{HYPERLINK "https://l.facebook.com/l.php?u=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FQuickselect&h=AT0hD9Qk6pxK6suNlnIezVIC4NnrAzl8P_UVxtLKjM8Rm3v9DdfqdO8xnA3_ypcsI2XCdv3i3tpGGZq0nbeIwylrIn5EuMch_Sy8OWNfDTDvbTC0PvVSGO0wtd9JYfzxWSOYe5FFtMp0r4zplDqMy_Q2"}}{\fldrslt \cf4 \strokec4 https://en.wikipedia.org/wiki/Quickselect}}\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b\fs36 \cf2 \cb3 Hiring Signal\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs30 \cf2 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 GENERAL SIGNAL\cb1 \
\pard\pardeftab720\sl480\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/wiki/Engineering/Interviewing/Ninja/Ninja_Interview_Generic_Signals/"}}{\fldrslt 
\f1\b0 \cf4 \cb3 \strokec4 Engineering/Interviewing/Ninja/Ninja Interview Generic Signals}}
\f1\b0 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 COMMON POSITIVE SIGNAL\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls8\ilvl0
\f1\b0 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Quickly discusses/compares all the options including sort, quick select, heap, and maybe some other approaches\cb1 \
\ls8\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Clean implementation\cb1 \
\ls8\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Not a lot of hints needed\cb1 \
\ls8\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Can discuss a variety of approaches to solve the problem and compare / contrast them\cb1 \
\ls8\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Able to write bug-free code in their language of choice\cb1 \
\ls8\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Recognizes symmetry of the problem (if heap approach)\cb1 \
\ls8\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Can talk about the complexity and memory use of all approaches\cb1 \
\ls8\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Walks through code carefully; finds and fixes their own bugs\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 COMMON NEGATIVE SIGNAL\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0 \cf2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls9\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Needs a lot of hints to move along initial discussion\cb1 \
\ls9\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Can never suggest alternatives to the approach they think of first / can\'92t react to changing problem constraints\cb1 \
\ls9\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Doesn\'92t know what a heap is (or language-equivalent data structure) and can\'92t derive it from other knowledge\cb1 \
\ls9\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Discussion is centered around algorithms that don\'92t actually work\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 TYPICAL NO HIRE\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls10\ilvl0
\f1\b0 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Never writes working code\cb1 \
\ls10\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Can\'92t reason about complexity and memory tradeoffs\cb1 \
\ls10\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Hasn\'92t heard of a heap before and can\'92t suggest alternatives to e.g. keeping a fully sorted array as helper memory\cb1 \
\ls10\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Never suggests quick select or even has trouble discussing the sorting approach\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 MAYBE HIRE\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls11\ilvl0
\f1\b0 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Writes working code with some major bugs you need to point out\cb1 \
\ls11\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Hasn\'92t heard of a heap before, but can kind of derive something like it, so you don\'92t have to fully sort the helper memory on each element\cb1 \
\ls11\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Can\'92t talk about big-O complexity but is able to reason about tradeoffs somewhat, with hints\cb1 \
\ls11\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If all of the above are happening, probably still a \'91no hire\'92\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 MOST LIKELY A HIRE\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls12\ilvl0
\f1\b0 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Clean heap solution that works completely\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl480\partightenfactor0
\ls12\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You may have hinted at a couple of the bugs\cb1 \
\ls12\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 They understood the bugs and fixed them with general solutions\cb1 \
\ls12\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Might have had to hint at symmetry of problem, but they got it\cb1 \
\ls12\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Might have run out of time re-writing problem to handle symmetry, but you\'92re sure they would have completed it in a few more minutes\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls12\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Clean quickselect solution, maybe with some hints (if you\'92re calibrated on this)\cb1 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f0\b \cf2 \cb3 VERY LIKELY A HIRE\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls13\ilvl0
\f1\b0 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Quickly discusses/compares all the options including sort, quick select, heap, and maybe some other approaches\cb1 \
\ls13\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Clean implementation\cb1 \
\ls13\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Can talk about the complexity and memory use of all approaches\cb1 \
\ls13\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Walks through code carefully; finds and fixes their own bugs; no hints\cb1 \
}