{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red22\green25\blue31;\red255\green255\blue255;\red41\green67\blue135;
\red42\green44\blue51;\red249\green249\blue249;\red133\green85\blue4;\red147\green0\blue147;}
{\*\expandedcolortbl;;\cssrgb\c11373\c12941\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c21176\c34510\c60000;
\cssrgb\c21961\c22745\c25882;\cssrgb\c98039\c98039\c98039;\cssrgb\c59608\c40784\c392;\cssrgb\c65098\c14902\c64314;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl860\partightenfactor0

\f0\b\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Stock Profit\
\pard\pardeftab720\sl480\partightenfactor0

\f1\i\b0\fs30 \cf2 Note: usage of dynamic programming concepts is generally considered low-signal in a ninja. See\'a0{\field{\*\fldinst{HYPERLINK "https://fburl.com/EschewDP"}}{\fldrslt \cf4 \strokec4 http://fburl.com/EschewDP}}\'a0.
\i0 \cb1 \
\pard\pardeftab720\sl480\partightenfactor0
\cf2 \cb3 This is a low-pass filter question that I use for quickly eliminating candidates. Its on the easier with a single aha insight that can easily be discovered once they have the brute force solution.\cb1 \
\cb3 The question: Given predicted stock prices for next n days for a stock e.g : 20, 40, 52, 15, 30, 50, 10, 25 find the maximum profit that can be made with a single buy-sell transaction. If no profit can be made return 0. In the example buying at 15 and selling at 50 gives maximum profit. Note that the two prices are neither minimum nor maximum in the array.\cb1 \
\cb3 The naive O(n^2) solution starts with each candidate price and find the maximum price to the right of it. The O(n) solution requires a bit of dynamic programming thinking. Suppose we have solved the problem for the first k elements, the maximum profit for the first k+1 elements is the greater number between the solution for the first k element and the (k+1)th element minus the smallest element in the first k elements.\cb1 \
\cb3 Here is some code that uses the idea:\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf5 \cb6 \strokec5 int findProfit(int * input, int n) \{\
    int currMin = input[\cf7 \strokec7 0\cf5 \strokec5 ], profit = \cf7 \strokec7 0\cf5 \strokec5 ;\
    \cf8 \strokec8 for\cf5 \strokec5 (int i=\cf7 \strokec7 1\cf5 \strokec5 ; i<n; i++)\{\
       profit = max(profit, input[i] - currMin);\
       currMin = min(currMin, input[i]);\
    \}\
    \cf8 \strokec8 return\cf5 \strokec5  profit;\
\}\
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb3 \strokec2 Variance 1 - same difficulty\cb1 \
\cb3 Following the same question, as many as possible buy-sell transactions can be made, what's the total profit during that period? Like above, you can only ever hold one stock at a time.\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf5 \cb6 \strokec5 int findProfit(int * input, int n) \{\
    int last = input[\cf7 \strokec7 0\cf5 \strokec5 ], profit = \cf7 \strokec7 0\cf5 \strokec5 ;\
    \cf8 \strokec8 for\cf5 \strokec5 (int i=\cf7 \strokec7 1\cf5 \strokec5 ; i<n; i++)\{\
       profit += max(\cf7 \strokec7 0\cf5 \strokec5 , input[i] - last);\
       last = input[i];\
    \}\
    \cf8 \strokec8 return\cf5 \strokec5  profit;\
\}\
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb3 \strokec2 Variance 2 - same difficulty\cb1 \
\cb3 Following the same question (unlimited buy-sell transactions), each trade costs n dollars. so making fewer trades matters int findProfit(int * input, int cost)\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf5 \cb6 \strokec5 int findProfit(int[] input, int cost) \{\
  \cf8 \strokec8 if\cf5 \strokec5  (input.length == \cf7 \strokec7 0\cf5 \strokec5 ) \{ \
    \cf8 \strokec8 return\cf5 \strokec5  \cf7 \strokec7 0\cf5 \strokec5 ; \
  \}\
  \cf8 \strokec8 var\cf5 \strokec5  profit = \cf7 \strokec7 0\cf5 \strokec5 ;\
  \cf8 \strokec8 var\cf5 \strokec5  min = input[\cf7 \strokec7 0\cf5 \strokec5 ];\
  \cf8 \strokec8 var\cf5 \strokec5  max = input[\cf7 \strokec7 0\cf5 \strokec5 ];\
  \cf8 \strokec8 for\cf5 \strokec5  (\cf8 \strokec8 var\cf5 \strokec5  i = \cf7 \strokec7 1\cf5 \strokec5 ; i < input.length; i++) \{\
    \cf8 \strokec8 if\cf5 \strokec5  (max - input[i] >= cost) \{\
      profit += Math.max(\cf7 \strokec7 0\cf5 \strokec5 , max - min - cost);\
      max = min = input[i];\
    \}\
    max = Math.max(max, input[i]);\
    \cf8 \strokec8 if\cf5 \strokec5  (input[i] < min) \{\
      max = min = input[i];\
    \}\
  \}\
  profit += Math.max(\cf7 \strokec7 0\cf5 \strokec5 , max - min - cost);\
  \cf8 \strokec8 return\cf5 \strokec5  profit;\
\}\
\pard\pardeftab720\sl480\partightenfactor0

\f1 \cf2 \cb3 \strokec2 Variance 3 - difficult\cb1 \
\cb3 Following the same question, there are up to 2 buy-sell transactions can be made, given that the 2nd buy cannot be made before the 1st buy has been sold, what's the total profit from those transactions?\cb1 \
\cb3 The solution is based on the code from the base question, however, an array to store the maximum value to the right has to be made first.\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2 \cf5 \cb6 \strokec5 int findProfit(int * input, int n) \{\
    int rightMax[n];\
    int curMax = input[n\cf7 \strokec7 -1\cf5 \strokec5 ];\
    \cf8 \strokec8 for\cf5 \strokec5  (int i = n \cf7 \strokec7 -1\cf5 \strokec5 ; i >= \cf7 \strokec7 0\cf5 \strokec5 ; i--) \{\
       curMax = max(curMax, input[i]);\
       rightMax[i] = curMax;\
    \}\
    int curMin = input[\cf7 \strokec7 0\cf5 \strokec5 ], \cf7 \strokec7 1\cf5 \strokec5 stProfit = \cf7 \strokec7 0\cf5 \strokec5 , profit = \cf7 \strokec7 0\cf5 \strokec5 ;\
    \cf8 \strokec8 for\cf5 \strokec5 (int i=\cf7 \strokec7 1\cf5 \strokec5 ; i<n; i++) \{\
       profit = max(profit, rightMax[i] - input[i] + \cf7 \strokec7 1\cf5 \strokec5 stProfit);\
       curMin = min(curMin, input[i]);\
       \cf7 \strokec7 1\cf5 \strokec5 stProfit = max(\cf7 \strokec7 1\cf5 \strokec5 stProfit, input[i] - curMin);\
    \}\
    \cf8 \strokec8 return\cf5 \strokec5  max(profit, \cf7 \strokec7 1\cf5 \strokec5 stProfit);\
\}\
}