{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\fswiss\fcharset0 Helvetica-Bold;\f4\fswiss\fcharset0 Helvetica;\f5\fnil\fcharset0 Georgia;
\f6\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red21\green23\blue25;\red255\green255\blue255;\red52\green56\blue63;
\red78\green84\blue93;\red41\green67\blue135;\red22\green25\blue31;\red54\green59\blue74;\red252\green244\blue202;
\red210\green229\blue240;\red0\green0\blue82;\red0\green0\blue0;\red6\green50\blue15;\red152\green18\blue15;
\red83\green83\blue83;\red152\green46\blue3;\red76\green12\blue1;\red12\green95\blue32;\red40\green52\blue164;
}
{\*\expandedcolortbl;;\cssrgb\c10980\c11765\c12941;\cssrgb\c100000\c100000\c100000;\cssrgb\c26667\c28627\c31373;
\cssrgb\c37647\c40392\c43922;\cssrgb\c21176\c34510\c60000;\cssrgb\c11373\c12941\c16078;\cssrgb\c27451\c29804\c36078;\cssrgb\c99216\c96078\c83137;
\cssrgb\c85490\c91765\c95294;\cssrgb\c0\c3922\c39608;\cssrgb\c0\c0\c0;\cssrgb\c0\c25098\c7059;\cssrgb\c66667\c13333\c6667;
\cssrgb\c40000\c40000\c40000;\cssrgb\c66667\c25098\c0;\cssrgb\c37647\c7059\c0;\cssrgb\c0\c43922\c16471;\cssrgb\c20784\c29412\c70196;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid202\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Tree Longest Path (binary or non-binary)\
\pard\pardeftab720\sl520\qc\partightenfactor0

\f1\i\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl520\qc\partightenfactor0
\cf4 \strokec4 \
\pard\pardeftab720\sl520\qc\partightenfactor0

\f0\i0 \cf4 More Items\
\pard\pardeftab720\sl320\partightenfactor0

\f1\b0 \cf5 \strokec5 Owner:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/profile/?id=592650843"}}{\fldrslt \cf6 \strokec6 Nicholas Ormrod}}\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Medium\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 Ninja\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf7 \strokec7 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf5 \strokec5 General\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \strokec2 Description\
\pard\pardeftab720\sl280\partightenfactor0

\f3\fs24 \cf8 \cb9 \strokec8 WARNING:
\f4\b0 \cf7 \strokec7 \'a0This problem is on LeetCode\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf7 \cb1 Given a binary tree, find the length of the longest path between any two nodes.\
\pard\pardeftab720\sl240\partightenfactor0

\f5\fs22 \cf7 2\
7\
3\
1\
6\
5\
11\
9\
4\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\fs24 \cf7 In the above tree, the longest path is 5/11 -> 6 -> 7 -> 2 -> 3 -> 9 -> 4, so the length is 6 (6 edges).\
\pard\pardeftab720\sl280\partightenfactor0

\f3\b \cf8 \cb10 \strokec8 NOTE:
\f4\b0 \cf7 \strokec7 \'a0The greatest distance between any two nodes in a graph (which in this example is 6) is also known as the ''diameter'' of the graph.\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \cb1 \strokec2 Question Statement\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 \strokec7 Given a binary tree, find the length of the longest path between any two nodes.\
Variant: Given an n-ary tree, find the length of the longest path between any two nodes\
\pard\pardeftab720\sl540\sa160\partightenfactor0

\f3\b\fs36 \cf7 Time\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=797435320393863#time"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 20 min\
\pard\pardeftab720\sl540\sa160\partightenfactor0

\f3\b\fs36 \cf7 How to ask the question\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=797435320393863#how-to-ask-the-question"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 Draw a tree on the whiteboard, and ask the candidate what the length of the longest path is. If you want to ask the n-ary version, then make sure your tree has a node with more than two children.\
Candidates will usually reply with the *height* of the tree (so 4, for the above example). That is perfectly normal and expected. Let them know that this tree is actually undirected, and so they can go up *and* down the tree.\
Candidates either reply with the length of the longest path as measured by number of edges, or as measured by the number of vertices. It depends on how you were taught. Both are acceptable, as long as the candidate is consistent throughout the implementation. Once they've made their choice, make them stick to it.\
\pard\pardeftab720\sl540\sa160\partightenfactor0

\f3\b\fs36 \cf7 Areas of signal\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=797435320393863#areas-of-signal"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 Anything better than O(n^2) will require some level of technical proficiency. Ideally, the candidate uses a nested helper function and multi-value returns, but there are lots of ways to solve the problem, such as with memoization, pre-computation of heights, and passing mutable state as a by-reference argument.\
Almost all solutions will involve recursion and helper functions.\
\pard\pardeftab720\sl540\sa160\partightenfactor0

\f3\b\fs36 \cf7 Solutions\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=797435320393863#solutions"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\fs33 \cf7 Optimal solution\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=797435320393863#optimal-solution"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 The optimal solution uses generative recursion (i.e. a recursive helper function) that returns multiple values (height and diameter). O(n) time, O(h) space (stack).\
\pard\pardeftab720\sl280\partightenfactor0

\f6\fs20 \cf11 \cb9 \strokec11 def\cf12 \strokec12  \cf13 \strokec13 longestPath\cf14 \strokec14 (\cf11 \strokec11 node\cf14 \strokec14 ):\cf12 \strokec12 \
    \cf15 \strokec15 # returns (height, diameter)\cf12 \strokec12 \
    \cf11 \strokec11 def\cf12 \strokec12  \cf13 \strokec13 helper\cf14 \strokec14 (\cf11 \strokec11 node\cf14 \strokec14 ):\cf12 \strokec12 \
        \cf16 \strokec16 if\cf12 \strokec12  \cf11 \strokec11 node\cf12 \strokec12  \cf16 \strokec16 is\cf12 \strokec12  \cf11 \strokec11 None\cf14 \strokec14 :\cf12 \strokec12 \
            \cf16 \strokec16 return\cf12 \strokec12  \cf14 \strokec14 (\cf17 \strokec17 0\cf14 \strokec14 ,\cf17 \strokec17 0\cf14 \strokec14 )\cf12 \strokec12 \
        \cf11 \strokec11 lh\cf14 \strokec14 ,\cf12 \strokec12  \cf11 \strokec11 ld\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf13 \strokec13 helper\cf14 \strokec14 (\cf11 \strokec11 node\cf14 \strokec14 .\cf11 \strokec11 left\cf14 \strokec14 )\cf12 \strokec12 \
        \cf11 \strokec11 rh\cf14 \strokec14 ,\cf12 \strokec12  \cf11 \strokec11 rd\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf13 \strokec13 helper\cf14 \strokec14 (\cf11 \strokec11 node\cf14 \strokec14 .\cf11 \strokec11 right\cf14 \strokec14 )\cf12 \strokec12 \
\
        \cf11 \strokec11 d_through_self\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf11 \strokec11 lh\cf12 \strokec12  \cf14 \strokec14 +\cf12 \strokec12  \cf11 \strokec11 rh\cf12 \strokec12 \
        \cf11 \strokec11 h\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf13 \strokec13 max\cf14 \strokec14 (\cf11 \strokec11 lh\cf14 \strokec14 ,\cf12 \strokec12  \cf11 \strokec11 rh\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 +\cf12 \strokec12  \cf17 \strokec17 1\cf12 \strokec12 \
        \cf11 \strokec11 d\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf13 \strokec13 max\cf14 \strokec14 (\cf11 \strokec11 ld\cf14 \strokec14 ,\cf12 \strokec12  \cf11 \strokec11 rd\cf14 \strokec14 ,\cf12 \strokec12  \cf11 \strokec11 d_through_self\cf14 \strokec14 )\cf12 \strokec12 \
        \cf16 \strokec16 return\cf12 \strokec12  \cf14 \strokec14 (\cf11 \strokec11 h\cf14 \strokec14 ,\cf12 \strokec12  \cf11 \strokec11 d\cf14 \strokec14 )\cf12 \strokec12 \
\
    \cf16 \strokec16 return\cf12 \strokec12  \cf13 \strokec13 helper\cf14 \strokec14 (\cf11 \strokec11 node\cf14 \strokec14 )[\cf17 \strokec17 1\cf14 \strokec14 ]\cf12 \strokec12 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\fs24 \cf7 \cb1 \strokec7 In Haskell:\
\pard\pardeftab720\sl280\partightenfactor0

\f6\fs20 \cf11 \cb9 \strokec11 data\cf12 \strokec12  \cf11 \strokec11 Tree\cf12 \strokec12  \cf11 \strokec11 a\cf12 \strokec12 \
  \cf14 \strokec14 =\cf12 \strokec12  \cf11 \strokec11 Node\cf12 \strokec12  \cf13 \strokec13 a\cf12 \strokec12  \cf14 \strokec14 (\cf11 \strokec11 Tree\cf12 \strokec12  \cf11 \strokec11 a\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 (\cf11 \strokec11 Tree\cf12 \strokec12  \cf11 \strokec11 a\cf14 \strokec14 )\cf12 \strokec12 \
  \cf14 \strokec14 |\cf12 \strokec12  \cf11 \strokec11 Leaf\cf12 \strokec12 \
\
\cf11 \strokec11 type\cf12 \strokec12  \cf11 \strokec11 Height\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf11 \strokec11 Int\cf12 \strokec12 \
\cf11 \strokec11 type\cf12 \strokec12  \cf11 \strokec11 Width\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf11 \strokec11 Int\cf12 \strokec12 \
\
\pard\pardeftab720\sl280\partightenfactor0
\cf18 \strokec18 diameter\cf12 \strokec12  \cf14 \strokec14 ::\cf12 \strokec12  \cf14 \strokec14 (\cf11 \strokec11 Tree\cf12 \strokec12  \cf11 \strokec11 a\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 ->\cf12 \strokec12  \cf19 \strokec19 Int\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf11 \strokec11 diameter\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf11 \strokec11 snd\cf12 \strokec12  \cf14 \strokec14 .\cf12 \strokec12  \cf11 \strokec11 heightAndWidth\cf12 \strokec12 \
  \cf11 \strokec11 where\cf12 \strokec12 \
    \cf18 \strokec18 heightAndWidth\cf12 \strokec12  \cf14 \strokec14 ::\cf12 \strokec12  \cf14 \strokec14 (\cf11 \strokec11 Tree\cf12 \strokec12  \cf11 \strokec11 a\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 ->\cf12 \strokec12  \cf14 \strokec14 (\cf11 \strokec11 Height\cf14 \strokec14 ,\cf12 \strokec12  \cf11 \strokec11 Width\cf14 \strokec14 )\cf12 \strokec12 \
    \cf11 \strokec11 heightAndWidth\cf12 \strokec12  \cf11 \strokec11 Leaf\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf14 \strokec14 (\cf17 \strokec17 0\cf14 \strokec14 ,\cf12 \strokec12  \cf17 \strokec17 0\cf14 \strokec14 )\cf12 \strokec12 \
    \cf13 \strokec13 heightAndWidth\cf12 \strokec12  \cf14 \strokec14 (\cf11 \strokec11 Node\cf12 \strokec12  \cf11 \strokec11 _\cf12 \strokec12  \cf11 \strokec11 left\cf12 \strokec12  \cf11 \strokec11 right\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12 \
      \cf13 \strokec13 let\cf12 \strokec12 \
        \cf14 \strokec14 (\cf11 \strokec11 leftHeight\cf14 \strokec14 ,\cf12 \strokec12  \cf11 \strokec11 leftWidth\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf11 \strokec11 heightAndWidth\cf12 \strokec12  \cf13 \strokec13 left\cf12 \strokec12 \
        \cf14 \strokec14 (\cf11 \strokec11 rightHeight\cf14 \strokec14 ,\cf12 \strokec12  \cf11 \strokec11 rightWidth\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf11 \strokec11 heightAndWidth\cf12 \strokec12  \cf11 \strokec11 right\cf12 \strokec12 \
      \cf13 \strokec13 in\cf12 \strokec12 \
        \cf14 \strokec14 (\cf12 \strokec12  \cf11 \strokec11 max\cf12 \strokec12  \cf11 \strokec11 leftHeight\cf12 \strokec12  \cf11 \strokec11 rightHeight\cf12 \strokec12  \cf14 \strokec14 +\cf12 \strokec12  \cf17 \strokec17 1\cf12 \strokec12 \
        \cf14 \strokec14 ,\cf12 \strokec12  \cf13 \strokec13 max\cf12 \strokec12  \cf14 \strokec14 (\cf11 \strokec11 leftHeight\cf12 \strokec12  \cf14 \strokec14 +\cf12 \strokec12  \cf11 \strokec11 rightHeight\cf14 \strokec14 )\cf12 \strokec12  $ \cf11 \strokec11 max\cf12 \strokec12  \cf11 \strokec11 leftWidth\cf12 \strokec12  \cf11 \strokec11 rightWidth\cf12 \strokec12 \
        \cf14 \strokec14 )\cf12 \strokec12 \
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f3\b\fs33 \cf7 \cb1 \strokec7 Simple solution\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=797435320393863#simple-solution"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 Most people observe that the diameter of the tree, if it goes through the root, is left-height plus right-height.\
If they assume that the diameter MUST go through the root, then that is negative signal.\
Once they make these two observations, a simple solution presents itself:\
\pard\pardeftab720\sl280\partightenfactor0

\f6\fs20 \cf11 \cb9 \strokec11 def\cf12 \strokec12  \cf13 \strokec13 longestPath\cf14 \strokec14 (\cf11 \strokec11 node\cf14 \strokec14 ):\cf12 \strokec12 \
    \cf16 \strokec16 if\cf12 \strokec12  \cf11 \strokec11 node\cf12 \strokec12  \cf16 \strokec16 is\cf12 \strokec12  \cf11 \strokec11 None\cf14 \strokec14 :\cf12 \strokec12 \
        \cf16 \strokec16 return\cf12 \strokec12  \cf17 \strokec17 0\cf12 \strokec12 \
    \cf11 \strokec11 ld\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf13 \strokec13 longestPath\cf14 \strokec14 (\cf11 \strokec11 node\cf14 \strokec14 .\cf11 \strokec11 left\cf14 \strokec14 )\cf12 \strokec12 \
    \cf11 \strokec11 rd\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf13 \strokec13 longestPath\cf14 \strokec14 (\cf11 \strokec11 node\cf14 \strokec14 .\cf11 \strokec11 right\cf14 \strokec14 )\cf12 \strokec12 \
    \cf11 \strokec11 lh\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf13 \strokec13 getHeight\cf14 \strokec14 (\cf11 \strokec11 node\cf14 \strokec14 .\cf11 \strokec11 left\cf14 \strokec14 )\cf12 \strokec12 \
    \cf11 \strokec11 rh\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf13 \strokec13 getHeight\cf14 \strokec14 (\cf11 \strokec11 node\cf14 \strokec14 .\cf11 \strokec11 right\cf14 \strokec14 )\cf12 \strokec12 \
    \cf16 \strokec16 return\cf12 \strokec12  \cf13 \strokec13 max\cf14 \strokec14 (\cf11 \strokec11 ld\cf14 \strokec14 ,\cf12 \strokec12  \cf11 \strokec11 rd\cf14 \strokec14 ,\cf12 \strokec12  \cf11 \strokec11 lh\cf12 \strokec12  \cf14 \strokec14 +\cf12 \strokec12  \cf11 \strokec11 rh\cf14 \strokec14 )\cf12 \strokec12 \
\
\cf11 \strokec11 def\cf12 \strokec12  \cf13 \strokec13 getHeight\cf14 \strokec14 (\cf11 \strokec11 node\cf14 \strokec14 ):\cf12 \strokec12 \
    \cf16 \strokec16 if\cf12 \strokec12  \cf11 \strokec11 node\cf12 \strokec12  \cf16 \strokec16 is\cf12 \strokec12  \cf11 \strokec11 None\cf14 \strokec14 :\cf12 \strokec12 \
        \cf16 \strokec16 return\cf12 \strokec12  \cf17 \strokec17 0\cf12 \strokec12 \
    \cf16 \strokec16 return\cf12 \strokec12  \cf17 \strokec17 1\cf12 \strokec12  \cf14 \strokec14 +\cf12 \strokec12  \cf13 \strokec13 max\cf14 \strokec14 (\cf13 \strokec13 getHeight\cf14 \strokec14 (\cf11 \strokec11 node\cf14 \strokec14 .\cf11 \strokec11 left\cf14 \strokec14 ),\cf12 \strokec12  \cf13 \strokec13 getHeight\cf14 \strokec14 (\cf11 \strokec11 node\cf14 \strokec14 .\cf11 \strokec11 right\cf14 \strokec14 ))\cf12 \strokec12 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\fs24 \cf7 \cb1 \strokec7 This solution is O(n^2). If they produce this code, I ask them to analyze the runtime, and then to make the code more efficient.\
There are two common ways to fix the O(n^2) problem\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Memoize/pre-compute getHeight\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Have a pass-by-reference maxDiameter variable\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf7 Many people try to memoize the height of a node inside of the node itself. If they try this, I interject and tell them not to mutate their input.\
It is negative signal if the candidate uses a raw global variable. Their code should be thread-safe and callable more than once.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f3\b\fs33 \cf7 Alternative solution\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=797435320393863#alternative-solution"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 The question can also be solved using 2 DFSs or BFSs as follows. Starting from any node in the tree, we do a DFS or a BFS and note the furthest away node. We'll mark this node as U. From node U we do another DFS or BFS and mark the furthest away node from it as V. The path from U to V is called the "tree diameter" and it also has the length of the longest path in the tree. Total complexity is O(n). Works for both binary and non-binary versions of the question. An explanation for why this works can be found here:\'a0{\field{\*\fldinst{HYPERLINK "https://l.facebook.com/l.php?u=https%3A%2F%2Fcs.stackexchange.com%2Fquestions%2F22855%2Falgorithm-to-find-diameter-of-a-tree-using-bfs-dfs-why-does-it-work&h=AT3oW_p075nZKk0CwxhZnJpGoACr2cunlOlRAPA28AKirXFLhZTvtKb4u81aG2au0-iyHuozjduMnz-185BovUYxHemxmLBiRcbdHNaxGeiIXaX3AIKPf9DnCLsg03kaG5ww1zv4Z6y7XXmd2zwUjvWY"}}{\fldrslt \cf6 \strokec6 https://cs.stackexchange.com/questions/22855/algorithm-to-find-diameter-of-a-tree-using-bfs-dfs-why-does-it-work}}\
Please be aware of this solution and accept is as correct if a candidate solves it this way. That said, make sure to ask why it works and if we can prove the correctness.\
\pard\pardeftab720\sl540\sa160\partightenfactor0

\f3\b\fs36 \cf7 How to salvage the question\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=797435320393863#how-to-salvage-the-quest"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls2\ilvl0
\f4\b0\fs24 \cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 If the candidate is stuck trying to find a solution to the problem, lead them towards recursion. Get them to focus on the root node. "What is the longest path that passes through the root?" (note: this is a major hint)\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 If the candidate is stuck thinking that the diameter must pass through the root, tell them to implement the solution. It's dirt simple, so the code happens fast. Furthermore, they almost always write the getHeight helper function, which can be recycled in the actual solution.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 If the candidate is stuck trying to solve the problem faster than O(n^2), ask them what work they want to save. They often say something like "I'm computing getHeight multiple times", and then you can pointedly ask how to solve that problem, to which people often have a solution such as memoization or precomputation.\
\pard\pardeftab720\sl540\sa160\partightenfactor0

\f3\b\fs36 \cf7 Variants\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=797435320393863#variants"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\fs33 \cf7 Non-binary tree\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=797435320393863#non-binary-tree"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 I like asking for a solution involving non-binary trees, i.e. trees with a list of children instead of .left and .right.\
This adds some code complexity and state to the solution. Mainly, when computing the diameter-through-the-root, you need to add the two deepest children together, instead of just .left and .right.\
Extra areas of signal:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls3\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Do they compute all children depths, then find the two deepest? This involves extra space overhead.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 How do they find the two deepest nodes?\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl280\partightenfactor0
\ls3\ilvl1\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 If they sort all children's depths, then their code becomes O(nlogn). Do they recognize this? (This happens when the root has n-1 children, all of which are leaves.)\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 If they track max_height and second_max_height by hand, do they do so properly? This is an easy place to mess up, either by overwriting both maxes with the new value, or by overwriting the max with the new value but leaving the second max unchanged.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls3\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 How do they deal with nodes that have less than two children? Special-casing is bad. Sensible variable initialization saves the day.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Do they have excessive control flow? Keep in mind that the list nature of the node's children means that their code won't be called with null trees.\
\pard\pardeftab720\sl280\partightenfactor0

\f6\fs20 \cf11 \cb9 \strokec11 def\cf12 \strokec12  \cf13 \strokec13 longestPath\cf14 \strokec14 (\cf11 \strokec11 node\cf14 \strokec14 ):\cf12 \strokec12 \
    \cf15 \strokec15 # returns (height, diameter)\cf12 \strokec12 \
    \cf11 \strokec11 def\cf12 \strokec12  \cf13 \strokec13 helper\cf14 \strokec14 (\cf11 \strokec11 node\cf14 \strokec14 ):\cf12 \strokec12 \
        \cf11 \strokec11 h1\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf17 \strokec17 0\cf12 \strokec12 \
        \cf11 \strokec11 h2\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf17 \strokec17 0\cf12 \strokec12 \
        \cf11 \strokec11 maxd\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf17 \strokec17 0\cf12 \strokec12 \
        \cf16 \strokec16 for\cf12 \strokec12  \cf11 \strokec11 c\cf12 \strokec12  \cf11 \strokec11 in\cf12 \strokec12  \cf11 \strokec11 node\cf14 \strokec14 .\cf11 \strokec11 children\cf14 \strokec14 :\cf12 \strokec12 \
            \cf11 \strokec11 h\cf14 \strokec14 ,\cf12 \strokec12  \cf11 \strokec11 d\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf13 \strokec13 helper\cf14 \strokec14 (\cf11 \strokec11 c\cf14 \strokec14 )\cf12 \strokec12 \
            \cf11 \strokec11 maxd\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf13 \strokec13 max\cf14 \strokec14 (\cf11 \strokec11 maxd\cf14 \strokec14 ,\cf12 \strokec12  \cf11 \strokec11 d\cf14 \strokec14 )\cf12 \strokec12 \
            \cf16 \strokec16 if\cf12 \strokec12  \cf11 \strokec11 h\cf12 \strokec12  \cf14 \strokec14 >\cf12 \strokec12  \cf11 \strokec11 h1\cf14 \strokec14 :\cf12 \strokec12 \
                \cf11 \strokec11 h2\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf11 \strokec11 h1\cf12 \strokec12 \
                \cf11 \strokec11 h1\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf11 \strokec11 h\cf12 \strokec12 \
            \cf11 \strokec11 elif\cf12 \strokec12  \cf11 \strokec11 h\cf12 \strokec12  \cf14 \strokec14 >\cf12 \strokec12  \cf11 \strokec11 h2\cf14 \strokec14 :\cf12 \strokec12 \
                \cf11 \strokec11 h2\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf11 \strokec11 h\cf12 \strokec12 \
        \cf16 \strokec16 return\cf12 \strokec12  \cf14 \strokec14 (\cf11 \strokec11 h1\cf12 \strokec12  \cf14 \strokec14 +\cf12 \strokec12  \cf17 \strokec17 1\cf14 \strokec14 ,\cf12 \strokec12  \cf13 \strokec13 max\cf14 \strokec14 (\cf11 \strokec11 maxd\cf14 \strokec14 ,\cf12 \strokec12  \cf11 \strokec11 h1\cf12 \strokec12  \cf14 \strokec14 +\cf12 \strokec12  \cf11 \strokec11 h2\cf14 \strokec14 ))\cf12 \strokec12 \
\
    \cf16 \strokec16 return\cf12 \strokec12  \cf13 \strokec13 helper\cf14 \strokec14 (\cf11 \strokec11 node\cf14 \strokec14 )[\cf17 \strokec17 1\cf14 \strokec14 ]\cf12 \strokec12 \
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f3\b\fs33 \cf7 \cb1 \strokec7 Other merge functions\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=797435320393863#other-merge-functions"}}{\fldrslt \cf6 \strokec6 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f4\b0\fs24 \cf7 This problem requires the multi-return type pattern because the desired solution (in this case, diameter) is computed from a ''different'' recursively-computed variable (in this case, the height).\
This general pattern, of returning the thing you care about and of returning information for computing the thing you care about, is a general problem template.\
Other problems that share this pattern:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls4\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://our.intern.facebook.com/intern/recruiting/interview/questions/?question_id=1463546713712082"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 https://our.intern.facebook.com/intern/recruiting/interview/questions/?question_id=1463546713712082}}\cf7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls4\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Max Path Sum in a tree (tree values must be ints, sum all elements in a path to get the path sum, return the maximum possible path sum)\
}