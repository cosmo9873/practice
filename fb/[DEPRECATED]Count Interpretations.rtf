{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\fswiss\fcharset0 Helvetica;\f4\fswiss\fcharset0 Helvetica-Bold;\f5\fnil\fcharset0 Monaco;
\f6\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red245\green30\blue48;\red21\green23\blue25;\red255\green255\blue255;
\red52\green56\blue63;\red78\green84\blue93;\red41\green67\blue135;\red22\green25\blue31;\red54\green59\blue74;
\red252\green244\blue202;\red152\green46\blue3;\red0\green0\blue0;\red0\green0\blue82;\red152\green18\blue15;
\red0\green0\blue129;\red6\green50\blue15;\red83\green83\blue83;\red76\green12\blue1;\red98\green83\blue14;
\red38\green38\blue38;\red228\green230\blue234;}
{\*\expandedcolortbl;;\cssrgb\c98039\c21961\c24314;\cssrgb\c10980\c11765\c12941;\cssrgb\c100000\c100000\c100000;
\cssrgb\c26667\c28627\c31373;\cssrgb\c37647\c40392\c43922;\cssrgb\c21176\c34510\c60000;\cssrgb\c11373\c12941\c16078;\cssrgb\c27451\c29804\c36078;
\cssrgb\c99216\c96078\c83137;\cssrgb\c66667\c25098\c0;\cssrgb\c0\c0\c0;\cssrgb\c0\c3922\c39608;\cssrgb\c66667\c13333\c6667;
\cssrgb\c0\c7059\c58039;\cssrgb\c0\c25098\c7059;\cssrgb\c40000\c40000\c40000;\cssrgb\c37647\c7059\c0;\cssrgb\c46275\c39608\c6275;
\cssrgb\c20000\c20000\c20000;\cssrgb\c91373\c92157\c93333;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 [DEPRECATED]\cf3 \strokec3 Count Interpretations\
\pard\pardeftab720\sl520\qc\partightenfactor0

\f1\i\fs24 \cf4 \strokec4 \
\pard\pardeftab720\sl520\qc\partightenfactor0
\cf5 \strokec5 \
\pard\pardeftab720\sl520\qc\partightenfactor0

\f0\i0 \cf5 More Items\
\pard\pardeftab720\sl320\partightenfactor0

\f1\b0 \cf6 \strokec6 Owner:\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/profile/?id=749586413"}}{\fldrslt \cf7 \strokec7 Srinivas Narayanan}}\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf8 \strokec8 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf6 \strokec6 Medium\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf8 \strokec8 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf6 \strokec6 Ninja\
\pard\pardeftab720\sl280\partightenfactor0

\f2\i \cf8 \strokec8 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\i0 \cf6 \strokec6 General\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf3 \strokec3 Description\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf8 \strokec8 We have a coding system from letters to numbers where a=1, b=2, ..., z=26. You are given a string of digits as an input. Write a function that will compute the number of valid interpretations of the input.\
\pard\pardeftab720\sl280\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.facebook.com/internalvideos/videos/813325772211802/"}}{\fldrslt \cf7 \strokec7 Ninja Brown Bag Recording}}\
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.dropbox.com/s/nut67e08h99vj1d/Count_Interpretations.pptx?dl=0+Count+Interpretations+Deck"}}{\fldrslt \cf7 \strokec7 PowerPoint}}\
\pard\pardeftab720\sl560\partightenfactor0

\f0\b\fs48 \cf3 \strokec3 Question Statement\
\pard\pardeftab720\sl280\partightenfactor0

\f4\fs24 \cf9 \cb10 \strokec9 WARNING:
\f3\b0 \cf8 \strokec8 \'a0Dynamic programming questions are very strongly discouraged. If you're a new interviewer, do not ask this question. If you're an experienced interviewer, please migrate to something else. See\'a0{\field{\*\fldinst{HYPERLINK "https://l.facebook.com/l.php?u=https%3A%2F%2Ffburl.com%2FEschewDP&h=AT1pLLaQEse1qdn5QipLdH5LVZwOg-SrYbO9seGBeJMMGGyCSGN94eFKUGp5DE8Wt60r0YbRD3qgDaoEg5iTrPQiCj-2OA1BiCuqXildVob8ZYgJ3V-gTovd8YrrZknn7Ygph84CCaYwEp2weD3P7k5k"}}{\fldrslt \cf7 \strokec7 https://fburl.com/EschewDP}}.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf8 \cb1 Target\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1004952222926959#target"}}{\fldrslt \cf7 \strokec7 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf8 This question tests basic algorithmic and programming skills, complexity analysis, and ability to optimize for time and space.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf8 Question\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1004952222926959#question"}}{\fldrslt \cf7 \strokec7 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf8 We have a coding system from letters to numbers where a=1, b=2, ...z=26. You are given a string of digits as an input. Write a function that will compute the number of valid interpretations of the input.\
Note: don't use a=0, ..., z=25 as that makes the question easier.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf8 Setting up the question\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1004952222926959#setting-up-the-question"}}{\fldrslt \cf7 \strokec7 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf8 First, make sure the candidate understands the problem. Give a couple of simple sample inputs and make sure they know what the expected answer is.\
Examples:\
f('12') = 2 Actual interpretations: ('ab', 'l')\
f('123') = 3 Actual interpretations: ('abc', 'aw', 'lc')\
You can tell them that the expected answer for '12' should be 2 and ask them what the answer should be for '123' or for some other small input.\
Repeat to the candidate that the goal is to just output the count and not necessarily all the valid interpretations as strings.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf8 Solution 1\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1004952222926959#solution-1"}}{\fldrslt \cf7 \strokec7 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf8 The problem lends itself to a simple recursive solution. Assume the given string S is of the form abX where a and b are single digits and X is the rest of the string.\
Anything that starts with a zero cannot have a valid interpretation since there is no valid character that 0 maps to. So the answer for any string that starts with a zero is 0.\
Case 1: If a is a digit from 1-9, it can represent some character from [a-i]\
Case 2: If ab taken together has a value from 10-26, it can represent some character from [j-z]\
Since these two cases are mutually exclusive, the number of possible interpretations of abX = number of possible interpretations of bX (Case 1) + number of possible interpretations of X (Case 2).\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf11 \cb10 \strokec11 function\cf12 \strokec12  \cf13 \strokec13 countPerms\cf14 \strokec14 (\cf15 \strokec15 $num\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 \{\cf12 \strokec12 \
  \cf15 \strokec15 $len\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf16 \strokec16 strlen\cf14 \strokec14 (\cf15 \strokec15 $num\cf14 \strokec14 );\cf12 \strokec12 \
\
  \cf17 \strokec17 // Base case. Assume zero length inputs represent empty string and return 1.\cf12 \strokec12 \
  \cf17 \strokec17 // You can also argue for this returning 0, but this just makes the code a bit simpler.\cf12 \strokec12 \
  \cf11 \strokec11 if\cf12 \strokec12  \cf14 \strokec14 (\cf15 \strokec15 $len\cf12 \strokec12  \cf14 \strokec14 ===\cf12 \strokec12  \cf18 \strokec18 0\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 \{\cf12 \strokec12 \
    \cf11 \strokec11 return\cf12 \strokec12  \cf18 \strokec18 1\cf14 \strokec14 ;\cf12 \strokec12 \
  \cf14 \strokec14 \}\cf12 \strokec12 \
\
  \cf17 \strokec17 // Any string with a leading zero is invalid since no character starts with a zero\cf12 \strokec12 \
  \cf11 \strokec11 if\cf12 \strokec12  \cf14 \strokec14 (\cf15 \strokec15 $num\cf14 \strokec14 [\cf18 \strokec18 0\cf14 \strokec14 ]\cf12 \strokec12  \cf14 \strokec14 ===\cf12 \strokec12  \cf19 \strokec19 '0'\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 \{\cf12 \strokec12 \
    \cf11 \strokec11 return\cf12 \strokec12  \cf18 \strokec18 0\cf14 \strokec14 ;\cf12 \strokec12 \
  \cf14 \strokec14 \}\cf12 \strokec12 \
\
  \cf17 \strokec17 // Base case with single digit\cf12 \strokec12 \
  \cf11 \strokec11 if\cf12 \strokec12  \cf14 \strokec14 (\cf15 \strokec15 $len\cf12 \strokec12  \cf14 \strokec14 ===\cf12 \strokec12  \cf18 \strokec18 1\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 \{\cf12 \strokec12 \
    \cf11 \strokec11 return\cf12 \strokec12  \cf18 \strokec18 1\cf14 \strokec14 ;\cf12 \strokec12 \
  \cf14 \strokec14 \}\cf12 \strokec12 \
\
  \cf17 \strokec17 // Case 1 in the description above\cf12 \strokec12 \
  \cf15 \strokec15 $count\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf16 \strokec16 countPerms\cf14 \strokec14 (\cf16 \strokec16 substr\cf14 \strokec14 (\cf15 \strokec15 $num\cf14 \strokec14 ,\cf12 \strokec12  \cf18 \strokec18 1\cf14 \strokec14 ,\cf12 \strokec12  \cf15 \strokec15 $len\cf12 \strokec12  \cf14 \strokec14 -\cf12 \strokec12  \cf18 \strokec18 1\cf14 \strokec14 ));\cf12 \strokec12  \
 \
  \cf17 \strokec17 // Case 2 in the description above\cf12 \strokec12 \
  \cf17 \strokec17 // Note, don't really have to check for >= 10 because\cf12 \strokec12 \
  \cf17 \strokec17 // we won't reach here if there was a leading 0.\cf12 \strokec12 \
  \cf11 \strokec11 if\cf12 \strokec12  \cf14 \strokec14 (\cf16 \strokec16 intVal\cf14 \strokec14 (\cf16 \strokec16 substr\cf14 \strokec14 (\cf15 \strokec15 $num\cf14 \strokec14 ,\cf18 \strokec18 0\cf14 \strokec14 ,\cf18 \strokec18 2\cf14 \strokec14 ))\cf12 \strokec12  \cf14 \strokec14 <=\cf12 \strokec12  \cf18 \strokec18 26\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 \{\cf12 \strokec12 \
     \cf15 \strokec15 $count\cf12 \strokec12  \cf14 \strokec14 +=\cf12 \strokec12  \cf16 \strokec16 countPerms\cf14 \strokec14 (\cf16 \strokec16 substr\cf14 \strokec14 (\cf15 \strokec15 $num\cf14 \strokec14 ,\cf12 \strokec12  \cf18 \strokec18 2\cf14 \strokec14 ,\cf12 \strokec12  \cf15 \strokec15 $len\cf12 \strokec12  \cf14 \strokec14 -\cf12 \strokec12  \cf18 \strokec18 2\cf14 \strokec14 ));\cf12 \strokec12 \
  \cf14 \strokec14 \}\cf12 \strokec12 \
  \cf11 \strokec11 return\cf12 \strokec12  \cf15 \strokec15 $count\cf14 \strokec14 ;\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf14 \strokec14 \}\cf12 \strokec12 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf8 \cb1 \strokec8 Edge cases: Zero needs to be handled specially as shown in the code above. This surprisingly trips up a few people. Make sure the candidate realizes that and has a reasonable solution for it. It shows capability for attention to detail. If the candidate has the basic structure right and ends up spending too much time in the corner cases, I usually just go to the complexity analysis (see next section) and come back to this at the end.\
Gotchas: I've seen several people add an extra 1 to the formula as in $count = 1 + countPerms($num, 1, $len - 1); This is wrong. If you ask them to run their algorithm on a small input, they should realize the mistake quickly.\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf8 Complexity Analysis\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1004952222926959#complexity-analysis"}}{\fldrslt \cf7 \strokec7 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf8 Time complexity: Exponential. Roughly O(2^n) since for a string of length n, we have 2 sub-problems of size n-1 & n-2. Strictly speaking, the complexity is fibonacci(n) since the recurrence relation for the worst case is exactly the fibonacci sequence.\
Space Complexity: Linear. Since it is recursive and depth of stack is O(n)\
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf8 Improvements\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1004952222926959#improvements"}}{\fldrslt \cf7 \strokec7 #}}\
\pard\pardeftab720\sl375\sa160\partightenfactor0

\fs30 \cf8 Improving time complexity\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1004952222926959#improving-time-complexit"}}{\fldrslt \cf7 \strokec7 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf8 The first simple improvement is to note that there are a lot of repeated computations and to store the result of a subproblem in a cache (aka. "memoization") and to look that up before calling the function recursively. This reduces the time complexity from exponential to linear since we need to compute the result for a specific subproblem only once. The space complexity is still linear, but we have used O(n) extra space.\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf11 \cb10 \strokec11 function\cf12 \strokec12  \cf13 \strokec13 countPerms\cf14 \strokec14 (\cf15 \strokec15 $num\cf14 \strokec14 ,\cf12 \strokec12  \cf15 \strokec15 $pos\cf14 \strokec14 ,\cf12 \strokec12  \cf14 \strokec14 &\cf15 \strokec15 $cache\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 \{\cf12 \strokec12 \
  \cf17 \strokec17 // check cache before proceeding\cf12 \strokec12 \
  \cf11 \strokec11 if\cf12 \strokec12  \cf14 \strokec14 (\cf16 \strokec16 isset\cf14 \strokec14 (\cf15 \strokec15 $cache\cf14 \strokec14 [\cf15 \strokec15 $pos\cf14 \strokec14 ]))\cf12 \strokec12  \cf14 \strokec14 \{\cf12 \strokec12 \
    \cf11 \strokec11 return\cf12 \strokec12  \cf15 \strokec15 $cache\cf14 \strokec14 [\cf15 \strokec15 $pos\cf14 \strokec14 ];\cf12 \strokec12 \
  \cf14 \strokec14 \}\cf12 \strokec12 \
\
  \cf15 \strokec15 $len\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf16 \strokec16 strlen\cf14 \strokec14 (\cf15 \strokec15 $num\cf14 \strokec14 );\cf12 \strokec12   \
\
  \cf11 \strokec11 if\cf12 \strokec12  \cf14 \strokec14 (\cf15 \strokec15 $pos\cf12 \strokec12  \cf14 \strokec14 ===\cf12 \strokec12  \cf15 \strokec15 $len\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 \{\cf12 \strokec12 \
    \cf15 \strokec15 $count\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf18 \strokec18 1\cf14 \strokec14 ;\cf12 \strokec12 \
  \cf14 \strokec14 \}\cf12 \strokec12  \cf11 \strokec11 else\cf12 \strokec12  \cf11 \strokec11 if\cf12 \strokec12  \cf14 \strokec14 (\cf15 \strokec15 $num\cf14 \strokec14 [\cf15 \strokec15 $pos\cf14 \strokec14 ]\cf12 \strokec12  \cf14 \strokec14 ===\cf12 \strokec12  \cf19 \strokec19 '0'\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 \{\cf12 \strokec12 \
    \cf15 \strokec15 $count\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf18 \strokec18 0\cf14 \strokec14 ;\cf12 \strokec12 \
  \cf14 \strokec14 \}\cf12 \strokec12  \cf11 \strokec11 else\cf12 \strokec12  \cf11 \strokec11 if\cf12 \strokec12  \cf14 \strokec14 (\cf15 \strokec15 $pos\cf12 \strokec12  \cf14 \strokec14 ===\cf12 \strokec12  \cf15 \strokec15 $len\cf14 \strokec14 -\cf18 \strokec18 1\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 \{\cf12 \strokec12 \
    \cf15 \strokec15 $count\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf18 \strokec18 1\cf14 \strokec14 ;\cf12 \strokec12 \
  \cf14 \strokec14 \}\cf12 \strokec12  \cf11 \strokec11 else\cf12 \strokec12  \cf14 \strokec14 \{\cf12 \strokec12 \
    \cf15 \strokec15 $count\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf16 \strokec16 countPerms\cf14 \strokec14 (\cf15 \strokec15 $num\cf14 \strokec14 ,\cf12 \strokec12  \cf15 \strokec15 $pos\cf14 \strokec14 +\cf18 \strokec18 1\cf14 \strokec14 ,\cf12 \strokec12  \cf15 \strokec15 $cache\cf14 \strokec14 );\cf12 \strokec12 \
\
    \cf11 \strokec11 if\cf12 \strokec12  \cf14 \strokec14 (\cf16 \strokec16 intVal\cf14 \strokec14 (\cf16 \strokec16 substr\cf14 \strokec14 (\cf15 \strokec15 $num\cf14 \strokec14 ,\cf12 \strokec12  \cf15 \strokec15 $pos\cf14 \strokec14 ,\cf12 \strokec12  \cf18 \strokec18 2\cf14 \strokec14 ))\cf12 \strokec12  \cf14 \strokec14 <=\cf12 \strokec12  \cf18 \strokec18 26\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 \{\cf12 \strokec12 \
       \cf15 \strokec15 $count\cf12 \strokec12  \cf14 \strokec14 +=\cf12 \strokec12  \cf16 \strokec16 countPerms\cf14 \strokec14 (\cf15 \strokec15 $num\cf14 \strokec14 ,\cf12 \strokec12  \cf15 \strokec15 $pos\cf14 \strokec14 +\cf18 \strokec18 2\cf14 \strokec14 ,\cf12 \strokec12  \cf15 \strokec15 $cache\cf14 \strokec14 );\cf12 \strokec12 \
    \cf14 \strokec14 \}\cf12 \strokec12 \
  \cf14 \strokec14 \}\cf12 \strokec12 \
\
  \cf17 \strokec17 // cache the result of the computation for each position\cf12 \strokec12 \
  \cf15 \strokec15 $cache\cf14 \strokec14 [\cf15 \strokec15 $pos\cf14 \strokec14 ]\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf15 \strokec15 $count\cf14 \strokec14 ;\cf12 \strokec12 \
  \cf11 \strokec11 return\cf12 \strokec12  \cf15 \strokec15 $count\cf14 \strokec14 ;\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf14 \strokec14 \}\cf12 \strokec12 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf8 \cb1 \strokec8 Note: Some candidates use the entire substring instead of the position as the key for the cache. If you do this, the space complexity is O(n^2).\
\pard\pardeftab720\sl375\sa160\partightenfactor0

\f4\b\fs30 \cf8 Improving space complexity\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1004952222926959#improving-space-complexi"}}{\fldrslt \cf7 \strokec7 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf8 Just as with fibonacci, there is a linear time, constant space solution to the problem. The key is to realize that you can build the solution incrementally starting at the end of the string and keeping a count for the number of decodings for only the last two positions.\
Say S = abY where a and b are single digits. f(abY) = f(bY) + f(Y) (if 10 <= ab <= 26).\
The first term represents the case where a represents a digit from a-i and the second term represents the case where ab considered together has a value <= 26 and so represents some digit from j-z. So, if we had the counts for f(bY) and f(Y), we can easily compute f(abY). This leads us to the iterative solution where we just need to keep the counts for the last two positions at any point in time and incrementally build up the final answer.\
Note: This can also be done the other way around, though it is a little more unclear: "F(Xba) = (F(Xb) if a is not '0', else 0) + (F(X) if ab is a valid combination, else 0)" - had 2 candidates come up with this solution.\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf14 \cb10 \strokec14 ...\cf13 \strokec13 a\cf12 \strokec12    \cf13 \strokec13 b\cf12 \strokec12    \cf13 \strokec13 Y\cf14 \strokec14 ...\cf12 \strokec12 \
   \cf14 \strokec14 |\cf12 \strokec12    \cf14 \strokec14 |\cf12 \strokec12    \cf14 \strokec14 |\cf12 \strokec12 \
   \cf14 \strokec14 |\cf12 \strokec12    \cf14 \strokec14 |\cf12 \strokec12    \cf14 \strokec14 |\cf12 \strokec12  \
   \cf14 \strokec14 |\cf12 \strokec12    \cf14 \strokec14 |\cf12 \strokec12    \cf13 \strokec13 count_prev2\cf12 \strokec12 \
   \cf14 \strokec14 |\cf12 \strokec12    \cf14 \strokec14 |\cf12 \strokec12     \
   \cf14 \strokec14 |\cf12 \strokec12   \cf13 \strokec13 count_prev\cf12 \strokec12  \
   \cf14 \strokec14 |\cf12 \strokec12  \
  \cf13 \strokec13 count_curr\cf12 \strokec12 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\fs24 \cf8 \cb1 \strokec8 Code:\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf11 \cb10 \strokec11 function\cf12 \strokec12  \cf13 \strokec13 countPerms\cf14 \strokec14 (\cf15 \strokec15 $num\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 \{\cf12 \strokec12 \
  \cf15 \strokec15 $len\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf15 \strokec15 $pos\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf16 \strokec16 strlen\cf14 \strokec14 (\cf15 \strokec15 $num\cf14 \strokec14 );\cf12 \strokec12 \
\
  \cf17 \strokec17 // count_curr, count_prev and count_prev2 represent the number of interpretations \cf12 \strokec12 \
  \cf17 \strokec17 // of the substrings starting at position x, x+1 and x+2 respectively.\cf12 \strokec12 \
  \cf15 \strokec15 $count_curr\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf18 \strokec18 0\cf14 \strokec14 ;\cf12 \strokec12 \
  \cf15 \strokec15 $count_prev\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf15 \strokec15 $count_prev2\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf18 \strokec18 1\cf14 \strokec14 ;\cf12 \strokec12  \cf17 \strokec17 // counts start at 1 (they're only added if valid)\cf12 \strokec12 \
\
  \cf11 \strokec11 while\cf12 \strokec12  \cf14 \strokec14 (--\cf15 \strokec15 $pos\cf12 \strokec12  \cf14 \strokec14 >=\cf12 \strokec12  \cf18 \strokec18 0\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 \{\cf12 \strokec12 \
    \cf11 \strokec11 if\cf12 \strokec12  \cf14 \strokec14 (\cf15 \strokec15 $num\cf14 \strokec14 [\cf15 \strokec15 $pos\cf14 \strokec14 ]\cf12 \strokec12  \cf14 \strokec14 ===\cf12 \strokec12  \cf19 \strokec19 '0'\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 \{\cf12 \strokec12 \
      \cf17 \strokec17 // Any string starting with '0' has no valid interpretation\cf12 \strokec12 \
      \cf15 \strokec15 $count_curr\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf18 \strokec18 0\cf14 \strokec14 ;\cf12 \strokec12 \
    \cf14 \strokec14 \}\cf12 \strokec12  \cf11 \strokec11 else\cf12 \strokec12  \cf14 \strokec14 \{\cf12 \strokec12 \
      \cf15 \strokec15 $count_curr\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf15 \strokec15 $count_prev\cf14 \strokec14 ;\cf12 \strokec12 \
\
      \cf11 \strokec11 if\cf12 \strokec12  \cf14 \strokec14 (\cf15 \strokec15 $pos\cf12 \strokec12  \cf14 \strokec14 +\cf12 \strokec12  \cf18 \strokec18 2\cf12 \strokec12  \cf14 \strokec14 <=\cf12 \strokec12  \cf15 \strokec15 $len\cf12 \strokec12  \cf14 \strokec14 &&\cf12 \strokec12  \cf16 \strokec16 intVal\cf14 \strokec14 (\cf16 \strokec16 substr\cf14 \strokec14 (\cf15 \strokec15 $num\cf14 \strokec14 ,\cf12 \strokec12  \cf15 \strokec15 $pos\cf14 \strokec14 ,\cf12 \strokec12  \cf18 \strokec18 2\cf14 \strokec14 ))\cf12 \strokec12  \cf14 \strokec14 <=\cf12 \strokec12  \cf18 \strokec18 26\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 \{\cf12 \strokec12 \
        \cf15 \strokec15 $count_curr\cf12 \strokec12  \cf14 \strokec14 +=\cf12 \strokec12  \cf15 \strokec15 $count_prev2\cf14 \strokec14 ;\cf12 \strokec12 \
      \cf14 \strokec14 \}\cf12 \strokec12 \
    \cf14 \strokec14 \}\cf12 \strokec12 \
\
    \cf15 \strokec15 $count_prev2\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf15 \strokec15 $count_prev\cf14 \strokec14 ;\cf12 \strokec12 \
    \cf15 \strokec15 $count_prev\cf12 \strokec12  \cf14 \strokec14 =\cf12 \strokec12  \cf15 \strokec15 $count_curr\cf14 \strokec14 ;\cf12 \strokec12 \
  \cf14 \strokec14 \}\cf12 \strokec12 \
\
  \cf11 \strokec11 return\cf12 \strokec12  \cf15 \strokec15 $count_curr\cf14 \strokec14 ;\cf12 \strokec12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf14 \strokec14 \}\cf12 \strokec12 \
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf8 \cb1 \strokec8 What to expect from candidates?\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1004952222926959#what-to-expect-from-cand"}}{\fldrslt \cf7 \strokec7 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf8 Good candidates should be able to at least write the recursive solution, analyze time and space complexity correctly, and improve the time complexity without a lot of help. Bonus points the non-recursive, optimized space complexity solution. While the solution to this question involves well-known techniques like dynamic programming and memoization, not everyone knows these terms and therefore do not focus on use of those terms.\
\pard\pardeftab720\sl375\sa160\partightenfactor0

\f4\b\fs30 \cf8 Statistics\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1004952222926959#statistics"}}{\fldrslt \cf7 \strokec7 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf8 [ilk] I analyzed a sample of 26 candidates whom I asked this question in TLV in 2017; mostly SWEs, but also some interns. 13 of the sample are candidates on whom I have made a hire/bring onsite decision, and 13 are no hire/reject. Here are the steps of the solution, and how candidates did in each step:\
\pard\pardeftab720\sl280\partightenfactor0

\f5\fs20 \cf14 \cb10 \strokec14 |\cf12 \strokec12                                                  \cf14 \strokec14 |\cf12 \strokec12  \cf14 \strokec14 %\cf12 \strokec12  \cf13 \strokec13 who\cf12 \strokec12  \cf13 \strokec13 did\cf12 \strokec12  \cf14 \strokec14 |\cf12 \strokec12  \cf13 \strokec13 how\cf12 \strokec12  \cf13 \strokec13 likely\cf12 \strokec12  \cf11 \strokec11 is\cf12 \strokec12  \cf13 \strokec13 a\cf12 \strokec12  \cf14 \strokec14 |\cf12 \strokec12   \cf13 \strokec13 how\cf12 \strokec12  \cf13 \strokec13 likely\cf12 \strokec12  \cf11 \strokec11 is\cf12 \strokec12  \cf13 \strokec13 a\cf12 \strokec12    \cf14 \strokec14 |\cf12 \strokec12 \
\cf14 \strokec14 |\cf12 \strokec12                                                  \cf14 \strokec14 |\cf12 \strokec12     \cf13 \strokec13 this\cf12 \strokec12    \cf14 \strokec14 |\cf12 \strokec12  \cf13 \strokec13 hire\cf12 \strokec12  \cf13 \strokec13 to\cf12 \strokec12  \cf11 \strokec11 do\cf12 \strokec12  \cf13 \strokec13 this\cf12 \strokec12  \cf14 \strokec14 |\cf12 \strokec12  \cf13 \strokec13 no\cf14 \strokec14 -\cf13 \strokec13 hire\cf12 \strokec12  \cf13 \strokec13 to\cf12 \strokec12  \cf11 \strokec11 do\cf12 \strokec12  \cf13 \strokec13 this\cf12 \strokec12  \cf14 \strokec14 |\cf12 \strokec12  \
\cf14 \strokec14 |\cf12 \strokec12                                                  \cf14 \strokec14 |\cf12 \strokec12            \cf14 \strokec14 |\cf12 \strokec12                  \cf14 \strokec14 |\cf12 \strokec12                     \cf14 \strokec14 |\cf12 \strokec12 \
\cf14 \strokec14 |\cf12 \strokec12  \cf13 \strokec13 Came\cf12 \strokec12  \cf13 \strokec13 up\cf12 \strokec12  \cf13 \strokec13 with\cf12 \strokec12  \cf13 \strokec13 tree\cf14 \strokec14 -\cf13 \strokec13 like\cf12 \strokec12  \cf13 \strokec13 recursion\cf12 \strokec12  \cf13 \strokec13 independently\cf12 \strokec12   \cf14 \strokec14 |\cf12 \strokec12     \cf18 \strokec18 81\cf14 \strokec14 %\cf12 \strokec12     \cf14 \strokec14 |\cf12 \strokec12       \cf18 \strokec18 100\cf14 \strokec14 %\cf12 \strokec12        \cf14 \strokec14 |\cf12 \strokec12         \cf18 \strokec18 62\cf14 \strokec14 %\cf12 \strokec12          \cf14 \strokec14 |\cf12 \strokec12 \
\cf14 \strokec14 |\cf12 \strokec12  \cf13 \strokec13 Bug\cf14 \strokec14 -\cf13 \strokec13 free\cf12 \strokec12  \cf13 \strokec13 code\cf12 \strokec12  \cf13 \strokec13 without\cf12 \strokec12  \cf16 \strokec16 hints\cf12 \strokec12  \cf14 \strokec14 (\cf13 \strokec13 ignoring\cf12 \strokec12  \cf19 \strokec19 '0'\cf12 \strokec12  \cf11 \strokec11 case\cf14 \strokec14 )\cf12 \strokec12  \cf14 \strokec14 |\cf12 \strokec12     \cf18 \strokec18 38\cf14 \strokec14 %\cf12 \strokec12     \cf14 \strokec14 |\cf12 \strokec12        \cf18 \strokec18 62\cf14 \strokec14 %\cf12 \strokec12        \cf14 \strokec14 |\cf12 \strokec12         \cf18 \strokec18 15\cf14 \strokec14 %\cf12 \strokec12          \cf14 \strokec14 |\cf12 \strokec12 \
\cf14 \strokec14 |\cf12 \strokec12  \cf13 \strokec13 Came\cf12 \strokec12  \cf13 \strokec13 up\cf12 \strokec12  \cf13 \strokec13 with\cf12 \strokec12  \cf19 \strokec19 '0'\cf12 \strokec12  \cf11 \strokec11 case\cf12 \strokec12  \cf13 \strokec13 independently\cf12 \strokec12              \cf14 \strokec14 |\cf12 \strokec12     \cf18 \strokec18 35\cf14 \strokec14 %\cf12 \strokec12     \cf14 \strokec14 |\cf12 \strokec12        \cf18 \strokec18 31\cf14 \strokec14 %\cf12 \strokec12        \cf14 \strokec14 |\cf12 \strokec12         \cf18 \strokec18 38\cf14 \strokec14 %\cf12 \strokec12          \cf14 \strokec14 |\cf12 \strokec12 \
\cf14 \strokec14 |\cf12 \strokec12  \cf13 \strokec13 Bug\cf14 \strokec14 -\cf13 \strokec13 free\cf12 \strokec12  \cf13 \strokec13 fix\cf12 \strokec12  \cf11 \strokec11 for\cf12 \strokec12  \cf19 \strokec19 '0'\cf12 \strokec12  \cf11 \strokec11 case\cf12 \strokec12                        \cf14 \strokec14 |\cf12 \strokec12     \cf18 \strokec18 35\cf14 \strokec14 %\cf12 \strokec12     \cf14 \strokec14 |\cf12 \strokec12        \cf18 \strokec18 62\cf14 \strokec14 %\cf12 \strokec12        \cf14 \strokec14 |\cf12 \strokec12          \cf18 \strokec18 8\cf14 \strokec14 %\cf12 \strokec12          \cf14 \strokec14 |\cf12 \strokec12 \
\cf14 \strokec14 |\cf12 \strokec12  \cf13 \strokec13 Identified\cf12 \strokec12  \cf13 \strokec13 complexity\cf12 \strokec12  \cf11 \strokec11 as\cf12 \strokec12  \cf13 \strokec13 exponential\cf12 \strokec12             \cf14 \strokec14 |\cf12 \strokec12     \cf18 \strokec18 35\cf14 \strokec14 %\cf12 \strokec12     \cf14 \strokec14 |\cf12 \strokec12        \cf18 \strokec18 54\cf14 \strokec14 %\cf12 \strokec12        \cf14 \strokec14 |\cf12 \strokec12         \cf18 \strokec18 15\cf14 \strokec14 %\cf12 \strokec12          \cf14 \strokec14 |\cf12 \strokec12 \
\cf14 \strokec14 |\cf12 \strokec12  \cf13 \strokec13 Came\cf12 \strokec12  \cf13 \strokec13 up\cf12 \strokec12  \cf13 \strokec13 with\cf12 \strokec12  \cf13 \strokec13 scalable\cf12 \strokec12  \cf13 \strokec13 optimization\cf12 \strokec12               \cf14 \strokec14 |\cf12 \strokec12     \cf18 \strokec18 38\cf14 \strokec14 %\cf12 \strokec12     \cf14 \strokec14 |\cf12 \strokec12        \cf18 \strokec18 62\cf14 \strokec14 %\cf12 \strokec12        \cf14 \strokec14 |\cf12 \strokec12         \cf18 \strokec18 15\cf14 \strokec14 %\cf12 \strokec12          \cf14 \strokec14 |\cf12 \strokec12 \
\cf14 \strokec14 |\cf12 \strokec12  \cf13 \strokec13 Bug\cf14 \strokec14 -\cf13 \strokec13 free\cf12 \strokec12  \cf13 \strokec13 code\cf12 \strokec12  \cf11 \strokec11 for\cf12 \strokec12  \cf13 \strokec13 optimization\cf12 \strokec12                   \cf14 \strokec14 |\cf12 \strokec12     \cf18 \strokec18 12\cf14 \strokec14 %\cf12 \strokec12     \cf14 \strokec14 |\cf12 \strokec12        \cf18 \strokec18 23\cf14 \strokec14 %\cf12 \strokec12        \cf14 \strokec14 |\cf12 \strokec12          \cf18 \strokec18 0\cf14 \strokec14 %\cf12 \strokec12          \cf14 \strokec14 |\cf12 \strokec12 \
\pard\pardeftab720\sl453\sa160\partightenfactor0

\f4\b\fs33 \cf8 \cb1 \strokec8 Followup Questions\'a0{\field{\*\fldinst{HYPERLINK "https://our.internmc.facebook.com/intern/recruiting/interview/questions/?question_id=1004952222926959#followup-questions"}}{\fldrslt \cf7 \strokec7 #}}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3\b0\fs24 \cf8 In case candidate gone relatively quickly through existing version but no time left for another question these followups might be handy:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 "Allow wildcards." i.e. in addition we can have\'a0
\f6 \cf20 \cb21 \strokec20 *
\f3 \cf8 \cb1 \strokec8 \'a0characters that can be replaced by any digit. This adds extra complexity to deal with them (multiple by 10 for one digit step and more tricky for 2 digits).\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 "Realtime input." You get next character only after answering number of interpretation for current string. Requires rewriting iterative solution in the opposite direction which has its own pitfalls.\
}